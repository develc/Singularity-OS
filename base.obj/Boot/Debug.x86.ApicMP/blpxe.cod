; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	C:\Users\cc\source\repos\Singularity-OS\base\Boot\SingLdrPc\blpxe.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?BlPxeApiPacket@@3U_PXE_API_PACKET@@A		; BlPxeApiPacket
PUBLIC	?BlPxeCallFrame@@3PAGA				; BlPxeCallFrame
PUBLIC	?BlPxeEntry16@@3U_FAR_POINTER@@A		; BlPxeEntry16
PUBLIC	?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
PUBLIC	?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A ; BlPxeInstallationCheck
PUBLIC	?BlPxeBootpReply@@3U_BOOTP_REPLY@@A		; BlPxeBootpReply
_BSS	SEGMENT
?BlPxeApiPacket@@3U_PXE_API_PACKET@@A DB 09eH DUP (?)	; BlPxeApiPacket
	ALIGN	4

?BlPxeCallFrame@@3PAGA DW 010H DUP (?)			; BlPxeCallFrame
?BlPxeEntry16@@3U_FAR_POINTER@@A DD 01H DUP (?)		; BlPxeEntry16
?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A DD 01H DUP (?) ; BlPxeExtendedInformation
?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A DD 01H DUP (?) ; BlPxeInstallationCheck
?BlPxeBootpReply@@3U_BOOTP_REPLY@@A DB 06ccH DUP (?)	; BlPxeBootpReply
_BSS	ENDS
PUBLIC	?BlPxeCallPxeApi@@YIXGPAX@Z			; BlPxeCallPxeApi
EXTRN	?BlRtlCallLegacyFunction@@YIXGGPAXKPAU_BL_LEGACY_CALL_CONTEXT@@1@Z:PROC ; BlRtlCallLegacyFunction
EXTRN	?BlRtlConvertLinearPointerToFarPointer@@YIXPAXPAU_FAR_POINTER@@@Z:PROC ; BlRtlConvertLinearPointerToFarPointer
EXTRN	?BlRtlZeroMemory@@YIXPAXK@Z:PROC		; BlRtlZeroMemory
; Function compile flags: /Odsp
; File c:\users\cc\source\repos\singularity-os\base\boot\singldrpc\blpxe.cpp
;	COMDAT ?BlPxeCallPxeApi@@YIXGPAX@Z
_TEXT	SEGMENT
_Packet$ = -48						; size = 4
_OpCode$ = -44						; size = 2
_Context$ = -40						; size = 36
_FarPointer$ = -4					; size = 4
?BlPxeCallPxeApi@@YIXGPAX@Z PROC			; BlPxeCallPxeApi, COMDAT
; _OpCode$ = cx
; _Packet$ = edx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	89 55 d0	 mov	 DWORD PTR _Packet$[ebp], edx
  00009	66 89 4d d4	 mov	 WORD PTR _OpCode$[ebp], cx

; 192  :     BL_LEGACY_CALL_CONTEXT Context;
; 193  :     FAR_POINTER FarPointer;
; 194  : 
; 195  :     BlRtlZeroMemory(&Context, sizeof(BL_LEGACY_CALL_CONTEXT));

  0000d	6a 24		 push	 36			; 00000024H
  0000f	5a		 pop	 edx
  00010	8d 4d d8	 lea	 ecx, DWORD PTR _Context$[ebp]
  00013	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 196  : 
; 197  :     if (BlPxeExtendedInformation != NULL) {

  00018	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A, 0 ; BlPxeExtendedInformation
  0001f	74 3f		 je	 SHORT $LN2@BlPxeCallP

; 198  : 
; 199  :         BlPxeCallFrame[0] = OpCode;

  00021	66 8b 45 d4	 mov	 ax, WORD PTR _OpCode$[ebp]
  00025	66 a3 00 00 00
	00		 mov	 WORD PTR ?BlPxeCallFrame@@3PAGA, ax

; 200  :         BlRtlConvertLinearPointerToFarPointer(Packet, (PFAR_POINTER) &BlPxeCallFrame[1]);

  0002b	ba 02 00 00 00	 mov	 edx, OFFSET ?BlPxeCallFrame@@3PAGA+2
  00030	8b 4d d0	 mov	 ecx, DWORD PTR _Packet$[ebp]
  00033	e8 00 00 00 00	 call	 ?BlRtlConvertLinearPointerToFarPointer@@YIXPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertLinearPointerToFarPointer

; 201  : 
; 202  :         BlRtlCallLegacyFunction(BlPxeExtendedInformation->Entry16.Segment,
; 203  :                                 BlPxeExtendedInformation->Entry16.Offset,
; 204  :                                 BlPxeCallFrame,
; 205  :                                 3 * sizeof(UINT16),
; 206  :                                 &Context,
; 207  :                                 &Context);

  00038	8d 45 d8	 lea	 eax, DWORD PTR _Context$[ebp]
  0003b	50		 push	 eax
  0003c	8d 45 d8	 lea	 eax, DWORD PTR _Context$[ebp]
  0003f	50		 push	 eax
  00040	6a 06		 push	 6
  00042	68 00 00 00 00	 push	 OFFSET ?BlPxeCallFrame@@3PAGA
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  0004c	66 8b 50 10	 mov	 dx, WORD PTR [eax+16]
  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  00055	66 8b 48 12	 mov	 cx, WORD PTR [eax+18]
  00059	e8 00 00 00 00	 call	 ?BlRtlCallLegacyFunction@@YIXGGPAXKPAU_BL_LEGACY_CALL_CONTEXT@@1@Z ; BlRtlCallLegacyFunction

; 208  : 
; 209  :     } else {

  0005e	eb 43		 jmp	 SHORT $LN3@BlPxeCallP
$LN2@BlPxeCallP:

; 210  : 
; 211  :         BlRtlConvertLinearPointerToFarPointer(Packet, &FarPointer);

  00060	8d 55 fc	 lea	 edx, DWORD PTR _FarPointer$[ebp]
  00063	8b 4d d0	 mov	 ecx, DWORD PTR _Packet$[ebp]
  00066	e8 00 00 00 00	 call	 ?BlRtlConvertLinearPointerToFarPointer@@YIXPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertLinearPointerToFarPointer

; 212  : 
; 213  :         Context.ebx = OpCode;

  0006b	0f b7 45 d4	 movzx	 eax, WORD PTR _OpCode$[ebp]
  0006f	89 45 dc	 mov	 DWORD PTR _Context$[ebp+4], eax

; 214  :         Context.es = FarPointer.Segment;

  00072	0f b7 45 fe	 movzx	 eax, WORD PTR _FarPointer$[ebp+2]
  00076	89 45 f4	 mov	 DWORD PTR _Context$[ebp+28], eax

; 215  :         Context.edi = FarPointer.Offset;

  00079	0f b7 45 fc	 movzx	 eax, WORD PTR _FarPointer$[ebp]
  0007d	89 45 ec	 mov	 DWORD PTR _Context$[ebp+20], eax

; 216  : 
; 217  :         BlRtlCallLegacyFunction(BlPxeInstallationCheck->RealModeEntry.Segment,
; 218  :                                 BlPxeInstallationCheck->RealModeEntry.Offset,
; 219  :                                 NULL,
; 220  :                                 0,
; 221  :                                 &Context,
; 222  :                                 &Context);

  00080	8d 45 d8	 lea	 eax, DWORD PTR _Context$[ebp]
  00083	50		 push	 eax
  00084	8d 45 d8	 lea	 eax, DWORD PTR _Context$[ebp]
  00087	50		 push	 eax
  00088	6a 00		 push	 0
  0008a	6a 00		 push	 0
  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A ; BlPxeInstallationCheck
  00091	66 8b 50 0a	 mov	 dx, WORD PTR [eax+10]
  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A ; BlPxeInstallationCheck
  0009a	66 8b 48 0c	 mov	 cx, WORD PTR [eax+12]
  0009e	e8 00 00 00 00	 call	 ?BlRtlCallLegacyFunction@@YIXGGPAXKPAU_BL_LEGACY_CALL_CONTEXT@@1@Z ; BlRtlCallLegacyFunction
$LN3@BlPxeCallP:

; 223  :     }
; 224  : 
; 225  :     return;
; 226  : }

  000a3	c9		 leave
  000a4	c3		 ret	 0
?BlPxeCallPxeApi@@YIXGPAX@Z ENDP			; BlPxeCallPxeApi
_TEXT	ENDS
PUBLIC	??_C@_0CC@ILIHPFFI@PXE?3?5Invalid?5BOOTP_REPLY?5packet?$CB@ ; `string'
PUBLIC	??_C@_0CC@MBIIDCBG@PXE?3?5Get?5DHCP_ACK?5failed?50x?$CF04x?$CB@ ; `string'
PUBLIC	??_C@_09HEHCHIGP@blpxe?4cpp?$AA@		; `string'
PUBLIC	??_C@_0CE@DBAHJIHD@PXE?3?5Get?5PXE_REPLY?5failed?3?50x?$CF04@ ; `string'
PUBLIC	?BlPxeGetBootpReply@@YIXXZ			; BlPxeGetBootpReply
EXTRN	?BlCommandLine@@3PA_WA:DWORD			; BlCommandLine
EXTRN	?BlPoolAllocateBlock@@YIPAXK@Z:PROC		; BlPoolAllocateBlock
EXTRN	?BlRtlHaltInternal@@YIXPBDK@Z:PROC		; BlRtlHaltInternal
EXTRN	?BlRtlPrintf@@YAEPBDZZ:PROC			; BlRtlPrintf
;	COMDAT ??_C@_0CC@ILIHPFFI@PXE?3?5Invalid?5BOOTP_REPLY?5packet?$CB@
CONST	SEGMENT
??_C@_0CC@ILIHPFFI@PXE?3?5Invalid?5BOOTP_REPLY?5packet?$CB@ DB 'PXE: Inva'
	DB	'lid BOOTP_REPLY packet!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MBIIDCBG@PXE?3?5Get?5DHCP_ACK?5failed?50x?$CF04x?$CB@
CONST	SEGMENT
??_C@_0CC@MBIIDCBG@PXE?3?5Get?5DHCP_ACK?5failed?50x?$CF04x?$CB@ DB 'PXE: '
	DB	'Get DHCP_ACK failed 0x%04x!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
CONST	SEGMENT
??_C@_09HEHCHIGP@blpxe?4cpp?$AA@ DB 'blpxe.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DBAHJIHD@PXE?3?5Get?5PXE_REPLY?5failed?3?50x?$CF04@
CONST	SEGMENT
??_C@_0CE@DBAHJIHD@PXE?3?5Get?5PXE_REPLY?5failed?3?50x?$CF04@ DB 'PXE: Ge'
	DB	't PXE_REPLY failed: 0x%04x!', 0aH, 00H	; `string'
; Function compile flags: /Odsp
CONST	ENDS
;	COMDAT ?BlPxeGetBootpReply@@YIXXZ
_TEXT	SEGMENT
tv140 = -24						; size = 4
_GetCachedInfo$ = -20					; size = 4
_Next$ = -16						; size = 4
_Option$ = -12						; size = 4
_Limit$ = -8						; size = 4
_Index$ = -4						; size = 4
?BlPxeGetBootpReply@@YIXXZ PROC				; BlPxeGetBootpReply, COMDAT

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 242  :     PPXE_GET_CACHED_INFO GetCachedInfo;
; 243  :     UINT32 Index;
; 244  :     ULONG_PTR Limit;
; 245  :     ULONG_PTR Next;
; 246  :     PDHCP_OPTION_HEADER Option;
; 247  : 
; 248  :     GetCachedInfo = &BlPxeApiPacket.u1.GetCachedInfo;

  00006	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _GetCachedInfo$[ebp], OFFSET ?BlPxeApiPacket@@3U_PXE_API_PACKET@@A ; BlPxeApiPacket

; 249  : 
; 250  :     //
; 251  :     // Get the discover reply packet received from the boot server.
; 252  :     //
; 253  : 
; 254  :     BlRtlZeroMemory(GetCachedInfo, sizeof(PXE_GET_CACHED_INFO));

  0000d	6a 0c		 push	 12			; 0000000cH
  0000f	5a		 pop	 edx
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _GetCachedInfo$[ebp]
  00013	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 255  :     GetCachedInfo->PacketType = PXE_PACKET_TYPE_CACHED_REPLY;

  00018	8b 45 ec	 mov	 eax, DWORD PTR _GetCachedInfo$[ebp]
  0001b	66 c7 40 02 03
	00		 mov	 WORD PTR [eax+2], 3

; 256  :     BlRtlConvertLinearPointerToFarPointer(&BlPxeBootpReply, &GetCachedInfo->Buffer);

  00021	8b 55 ec	 mov	 edx, DWORD PTR _GetCachedInfo$[ebp]
  00024	83 c2 06	 add	 edx, 6
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A ; BlPxeBootpReply
  0002c	e8 00 00 00 00	 call	 ?BlRtlConvertLinearPointerToFarPointer@@YIXPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertLinearPointerToFarPointer

; 257  :     GetCachedInfo->BufferSize = sizeof(BlPxeBootpReply);

  00031	8b 45 ec	 mov	 eax, DWORD PTR _GetCachedInfo$[ebp]
  00034	66 c7 40 04 cc
	06		 mov	 WORD PTR [eax+4], 1740	; 000006ccH

; 258  : 
; 259  :     BlPxeCallPxeApi(PXE_OPCODE_GET_CACHED_INFO, GetCachedInfo);

  0003a	8b 55 ec	 mov	 edx, DWORD PTR _GetCachedInfo$[ebp]
  0003d	66 b9 71 00	 mov	 cx, 113			; 00000071H
  00041	e8 00 00 00 00	 call	 ?BlPxeCallPxeApi@@YIXGPAX@Z ; BlPxeCallPxeApi

; 260  : 
; 261  :     if (GetCachedInfo->Status != PXE_STATUS_SUCCESS) {

  00046	8b 45 ec	 mov	 eax, DWORD PTR _GetCachedInfo$[ebp]
  00049	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0004c	85 c0		 test	 eax, eax
  0004e	74 22		 je	 SHORT $LN15@BlPxeGetBo

; 262  : 
; 263  :         BlRtlPrintf("PXE: Get PXE_REPLY failed: 0x%04x!\n", GetCachedInfo->Status);

  00050	8b 45 ec	 mov	 eax, DWORD PTR _GetCachedInfo$[ebp]
  00053	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@DBAHJIHD@PXE?3?5Get?5PXE_REPLY?5failed?3?50x?$CF04@
  0005c	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00061	59		 pop	 ecx
  00062	59		 pop	 ecx

; 264  :         BlRtlHalt();

  00063	ba 08 01 00 00	 mov	 edx, 264		; 00000108H
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  0006d	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN15@BlPxeGetBo:

; 265  :     }
; 266  : 
; 267  :     //
; 268  :     // If the discover reply packet does not have the BOOTP reply opcode, then get the DHCP ACK packet.
; 269  :     //
; 270  : 
; 271  :     if (BlPxeBootpReply.OpCode != BOOTP_REPLY_OPCODE_REPLY) {

  00072	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A
  00079	83 f8 02	 cmp	 eax, 2
  0007c	74 65		 je	 SHORT $LN14@BlPxeGetBo

; 272  : 
; 273  :         BlRtlZeroMemory(GetCachedInfo, sizeof(PXE_GET_CACHED_INFO));

  0007e	6a 0c		 push	 12			; 0000000cH
  00080	5a		 pop	 edx
  00081	8b 4d ec	 mov	 ecx, DWORD PTR _GetCachedInfo$[ebp]
  00084	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 274  :         GetCachedInfo->PacketType = PXE_PACKET_TYPE_DHCP_ACK;

  00089	8b 45 ec	 mov	 eax, DWORD PTR _GetCachedInfo$[ebp]
  0008c	66 c7 40 02 02
	00		 mov	 WORD PTR [eax+2], 2

; 275  :         BlRtlConvertLinearPointerToFarPointer(&BlPxeBootpReply, &GetCachedInfo->Buffer);

  00092	8b 55 ec	 mov	 edx, DWORD PTR _GetCachedInfo$[ebp]
  00095	83 c2 06	 add	 edx, 6
  00098	b9 00 00 00 00	 mov	 ecx, OFFSET ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A ; BlPxeBootpReply
  0009d	e8 00 00 00 00	 call	 ?BlRtlConvertLinearPointerToFarPointer@@YIXPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertLinearPointerToFarPointer

; 276  :         GetCachedInfo->BufferSize = sizeof(BlPxeBootpReply);

  000a2	8b 45 ec	 mov	 eax, DWORD PTR _GetCachedInfo$[ebp]
  000a5	66 c7 40 04 cc
	06		 mov	 WORD PTR [eax+4], 1740	; 000006ccH

; 277  : 
; 278  :         BlPxeCallPxeApi(PXE_OPCODE_GET_CACHED_INFO, GetCachedInfo);

  000ab	8b 55 ec	 mov	 edx, DWORD PTR _GetCachedInfo$[ebp]
  000ae	66 b9 71 00	 mov	 cx, 113			; 00000071H
  000b2	e8 00 00 00 00	 call	 ?BlPxeCallPxeApi@@YIXGPAX@Z ; BlPxeCallPxeApi

; 279  : 
; 280  :         if (GetCachedInfo->Status != PXE_STATUS_SUCCESS) {

  000b7	8b 45 ec	 mov	 eax, DWORD PTR _GetCachedInfo$[ebp]
  000ba	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000bd	85 c0		 test	 eax, eax
  000bf	74 22		 je	 SHORT $LN14@BlPxeGetBo

; 281  : 
; 282  :             BlRtlPrintf("PXE: Get DHCP_ACK failed 0x%04x!\n", GetCachedInfo->Status);

  000c1	8b 45 ec	 mov	 eax, DWORD PTR _GetCachedInfo$[ebp]
  000c4	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000c7	50		 push	 eax
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@MBIIDCBG@PXE?3?5Get?5DHCP_ACK?5failed?50x?$CF04x?$CB@
  000cd	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  000d2	59		 pop	 ecx
  000d3	59		 pop	 ecx

; 283  :             BlRtlHalt();

  000d4	ba 1b 01 00 00	 mov	 edx, 283		; 0000011bH
  000d9	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  000de	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN14@BlPxeGetBo:

; 284  :         }
; 285  :     }
; 286  : 
; 287  :     //
; 288  :     // If neither discover reply packet nor the DHCP ACK packet contains the BOOTP reply opcode, then PXE boot is not possible.
; 289  :     //
; 290  : 
; 291  :     if (BlPxeBootpReply.OpCode != BOOTP_REPLY_OPCODE_REPLY) {

  000e3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A
  000ea	83 f8 02	 cmp	 eax, 2
  000ed	74 1a		 je	 SHORT $LN12@BlPxeGetBo

; 292  : 
; 293  :         BlRtlPrintf("PXE: Invalid BOOTP_REPLY packet!\n");

  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@ILIHPFFI@PXE?3?5Invalid?5BOOTP_REPLY?5packet?$CB@
  000f4	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  000f9	59		 pop	 ecx

; 294  :         BlRtlHalt();

  000fa	ba 26 01 00 00	 mov	 edx, 294		; 00000126H
  000ff	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  00104	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN12@BlPxeGetBo:

; 295  :     }
; 296  : 
; 297  : #if PXE_VERBOSE
; 298  : 
; 299  :     BlRtlPrintf("PXE: IP=%u.%u.%u.%u DHCP=%u.%u.%u.%u GATEWAY=%u.%u.%u.%u\n",
; 300  :                 BlPxeBootpReply.ClientIP.Array[0],
; 301  :                 BlPxeBootpReply.ClientIP.Array[1],
; 302  :                 BlPxeBootpReply.ClientIP.Array[2],
; 303  :                 BlPxeBootpReply.ClientIP.Array[3],
; 304  :                 BlPxeBootpReply.ServerIP.Array[0],
; 305  :                 BlPxeBootpReply.ServerIP.Array[1],
; 306  :                 BlPxeBootpReply.ServerIP.Array[2],
; 307  :                 BlPxeBootpReply.ServerIP.Array[3],
; 308  :                 BlPxeBootpReply.GatewayIP.Array[0],
; 309  :                 BlPxeBootpReply.GatewayIP.Array[1],
; 310  :                 BlPxeBootpReply.GatewayIP.Array[2],
; 311  :                 BlPxeBootpReply.GatewayIP.Array[3]
; 312  :                 );
; 313  : 
; 314  : #endif
; 315  : 
; 316  :     Limit = ((ULONG_PTR) &BlPxeBootpReply) + GetCachedInfo->BufferSize;

  00109	8b 45 ec	 mov	 eax, DWORD PTR _GetCachedInfo$[ebp]
  0010c	0f b7 40 04	 movzx	 eax, WORD PTR [eax+4]
  00110	05 00 00 00 00	 add	 eax, OFFSET ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A ; BlPxeBootpReply
  00115	89 45 f8	 mov	 DWORD PTR _Limit$[ebp], eax

; 317  :     Next = (ULONG_PTR) (&BlPxeBootpReply.Data);

  00118	c7 45 f0 f0 00
	00 00		 mov	 DWORD PTR _Next$[ebp], OFFSET ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A+240
$LN11@BlPxeGetBo:

; 318  : 
; 319  :     while (Next < Limit) {

  0011f	8b 45 f0	 mov	 eax, DWORD PTR _Next$[ebp]
  00122	3b 45 f8	 cmp	 eax, DWORD PTR _Limit$[ebp]
  00125	0f 83 c0 00 00
	00		 jae	 $LN16@BlPxeGetBo

; 320  : 
; 321  :         Option = (PDHCP_OPTION_HEADER) Next;

  0012b	8b 45 f0	 mov	 eax, DWORD PTR _Next$[ebp]
  0012e	89 45 f4	 mov	 DWORD PTR _Option$[ebp], eax

; 322  : 
; 323  :         switch (Option->Code) {

  00131	8b 45 f4	 mov	 eax, DWORD PTR _Option$[ebp]
  00134	8a 00		 mov	 al, BYTE PTR [eax]
  00136	88 45 e8	 mov	 BYTE PTR tv140[ebp], al
  00139	80 7d e8 00	 cmp	 BYTE PTR tv140[ebp], 0
  0013d	74 0b		 je	 SHORT $LN7@BlPxeGetBo
  0013f	80 7d e8 08	 cmp	 BYTE PTR tv140[ebp], 8
  00143	74 11		 je	 SHORT $LN6@BlPxeGetBo
  00145	e9 8b 00 00 00	 jmp	 $LN1@BlPxeGetBo
$LN7@BlPxeGetBo:

; 324  : 
; 325  :             case DHCP_OPTION_CODE_PAD: {
; 326  : 
; 327  :                 Next += 1;

  0014a	8b 45 f0	 mov	 eax, DWORD PTR _Next$[ebp]
  0014d	40		 inc	 eax
  0014e	89 45 f0	 mov	 DWORD PTR _Next$[ebp], eax

; 328  : 
; 329  :                 break;

  00151	e9 90 00 00 00	 jmp	 $LN8@BlPxeGetBo
$LN6@BlPxeGetBo:

; 330  :             }
; 331  : 
; 332  :             case DHCP_OPTION_CODE_COMMAND_LINE: {
; 333  : 
; 334  :                 if (((Next + sizeof(DHCP_OPTION_HEADER)) < Limit) &&
; 335  :                     ((Next + sizeof(DHCP_OPTION_HEADER) + Option->Length) < Limit)) {

  00156	8b 45 f0	 mov	 eax, DWORD PTR _Next$[ebp]
  00159	40		 inc	 eax
  0015a	40		 inc	 eax
  0015b	3b 45 f8	 cmp	 eax, DWORD PTR _Limit$[ebp]
  0015e	73 6d		 jae	 SHORT $LN5@BlPxeGetBo
  00160	8b 45 f4	 mov	 eax, DWORD PTR _Option$[ebp]
  00163	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  00167	8b 4d f0	 mov	 ecx, DWORD PTR _Next$[ebp]
  0016a	8d 44 01 02	 lea	 eax, DWORD PTR [ecx+eax+2]
  0016e	3b 45 f8	 cmp	 eax, DWORD PTR _Limit$[ebp]
  00171	73 5a		 jae	 SHORT $LN5@BlPxeGetBo

; 336  : 
; 337  :                     BlCommandLine = (PWCHAR)BlPoolAllocateBlock((Option->Length + 1) * sizeof(WCHAR));

  00173	8b 45 f4	 mov	 eax, DWORD PTR _Option$[ebp]
  00176	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  0017a	8d 4c 00 02	 lea	 ecx, DWORD PTR [eax+eax+2]
  0017e	e8 00 00 00 00	 call	 ?BlPoolAllocateBlock@@YIPAXK@Z ; BlPoolAllocateBlock
  00183	a3 00 00 00 00	 mov	 DWORD PTR ?BlCommandLine@@3PA_WA, eax ; BlCommandLine

; 338  : 
; 339  :                     for (Index = 0; Index < Option->Length; Index += 1) {

  00188	83 65 fc 00	 and	 DWORD PTR _Index$[ebp], 0
  0018c	eb 07		 jmp	 SHORT $LN4@BlPxeGetBo
$LN3@BlPxeGetBo:
  0018e	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  00191	40		 inc	 eax
  00192	89 45 fc	 mov	 DWORD PTR _Index$[ebp], eax
$LN4@BlPxeGetBo:
  00195	8b 45 f4	 mov	 eax, DWORD PTR _Option$[ebp]
  00198	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  0019c	39 45 fc	 cmp	 DWORD PTR _Index$[ebp], eax
  0019f	73 1a		 jae	 SHORT $LN2@BlPxeGetBo

; 340  : 
; 341  :                         BlCommandLine[Index] = (WCHAR) (((PCHAR) (Option + 1))[Index]);

  001a1	8b 45 f4	 mov	 eax, DWORD PTR _Option$[ebp]
  001a4	03 45 fc	 add	 eax, DWORD PTR _Index$[ebp]
  001a7	66 0f be 40 02	 movsx	 ax, BYTE PTR [eax+2]
  001ac	8b 4d fc	 mov	 ecx, DWORD PTR _Index$[ebp]
  001af	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlCommandLine@@3PA_WA ; BlCommandLine
  001b5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax

; 342  :                     }

  001b9	eb d3		 jmp	 SHORT $LN3@BlPxeGetBo
$LN2@BlPxeGetBo:

; 343  : 
; 344  :                     BlCommandLine[Option->Length] = 0;

  001bb	8b 45 f4	 mov	 eax, DWORD PTR _Option$[ebp]
  001be	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  001c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlCommandLine@@3PA_WA ; BlCommandLine
  001c8	66 83 24 41 00	 and	 WORD PTR [ecx+eax*2], 0
$LN5@BlPxeGetBo:

; 345  : 
; 346  : #if PXE_VERBOSE
; 347  : 
; 348  :                     BlRtlPrintf("PXE: CMD=[%s]\n", BlCommandLine);
; 349  : 
; 350  : #endif
; 351  :                 }
; 352  : 
; 353  :                 Next = Limit;

  001cd	8b 45 f8	 mov	 eax, DWORD PTR _Limit$[ebp]
  001d0	89 45 f0	 mov	 DWORD PTR _Next$[ebp], eax

; 354  : 
; 355  :                 break;

  001d3	eb 11		 jmp	 SHORT $LN8@BlPxeGetBo
$LN1@BlPxeGetBo:

; 356  :             }
; 357  : 
; 358  :             default: {
; 359  : 
; 360  :                 Next += (sizeof(DHCP_OPTION_HEADER) + Option->Length);

  001d5	8b 45 f4	 mov	 eax, DWORD PTR _Option$[ebp]
  001d8	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  001dc	8b 4d f0	 mov	 ecx, DWORD PTR _Next$[ebp]
  001df	8d 44 01 02	 lea	 eax, DWORD PTR [ecx+eax+2]
  001e3	89 45 f0	 mov	 DWORD PTR _Next$[ebp], eax
$LN8@BlPxeGetBo:

; 361  :             }
; 362  :         }
; 363  :     }

  001e6	e9 34 ff ff ff	 jmp	 $LN11@BlPxeGetBo
$LN16@BlPxeGetBo:

; 364  : 
; 365  :     return;
; 366  : }

  001eb	c9		 leave
  001ec	c3		 ret	 0
?BlPxeGetBootpReply@@YIXXZ ENDP				; BlPxeGetBootpReply
_TEXT	ENDS
PUBLIC	?BlPxeGetFileSize@@YIEPBDPAK@Z			; BlPxeGetFileSize
EXTRN	?BlRtlCopyMemory@@YIXPAXPBXK@Z:PROC		; BlRtlCopyMemory
EXTRN	?BlRtlStringLength@@YIKPBD@Z:PROC		; BlRtlStringLength
; Function compile flags: /Odsp
;	COMDAT ?BlPxeGetFileSize@@YIEPBDPAK@Z
_TEXT	SEGMENT
_FileSize$ = -16					; size = 4
_Path$ = -12						; size = 4
_PathLength$ = -8					; size = 4
_GetFileSize$ = -4					; size = 4
?BlPxeGetFileSize@@YIEPBDPAK@Z PROC			; BlPxeGetFileSize, COMDAT
; _Path$ = ecx
; _FileSize$ = edx

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 55 f0	 mov	 DWORD PTR _FileSize$[ebp], edx
  00009	89 4d f4	 mov	 DWORD PTR _Path$[ebp], ecx

; 394  :     PPXE_TFTP_GET_FILE_SIZE GetFileSize;
; 395  :     UINT32 PathLength;
; 396  : 
; 397  :     GetFileSize = &BlPxeApiPacket.u1.TFTPGetFileSize;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _GetFileSize$[ebp], OFFSET ?BlPxeApiPacket@@3U_PXE_API_PACKET@@A ; BlPxeApiPacket

; 398  : 
; 399  :     BlRtlZeroMemory(GetFileSize, sizeof(PXE_TFTP_GET_FILE_SIZE));

  00013	ba 8e 00 00 00	 mov	 edx, 142		; 0000008eH
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _GetFileSize$[ebp]
  0001b	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 400  : 
; 401  :     PathLength = BlRtlStringLength(Path);

  00020	8b 4d f4	 mov	 ecx, DWORD PTR _Path$[ebp]
  00023	e8 00 00 00 00	 call	 ?BlRtlStringLength@@YIKPBD@Z ; BlRtlStringLength
  00028	89 45 f8	 mov	 DWORD PTR _PathLength$[ebp], eax

; 402  : 
; 403  :     if (PathLength >= sizeof(GetFileSize->FileName)) {

  0002b	81 7d f8 80 00
	00 00		 cmp	 DWORD PTR _PathLength$[ebp], 128 ; 00000080H
  00032	72 04		 jb	 SHORT $LN2@BlPxeGetFi

; 404  : 
; 405  :         return FALSE;

  00034	32 c0		 xor	 al, al
  00036	eb 5d		 jmp	 SHORT $LN3@BlPxeGetFi
$LN2@BlPxeGetFi:

; 406  : 
; 407  :     }
; 408  : 
; 409  :     GetFileSize->ServerIP = BlPxeBootpReply.ServerIP;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _GetFileSize$[ebp]
  0003b	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A+20
  00041	89 48 02	 mov	 DWORD PTR [eax+2], ecx

; 410  :     GetFileSize->GatewayIP = BlPxeBootpReply.GatewayIP;

  00044	8b 45 fc	 mov	 eax, DWORD PTR _GetFileSize$[ebp]
  00047	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A+24
  0004d	89 48 06	 mov	 DWORD PTR [eax+6], ecx

; 411  : 
; 412  :     BlRtlCopyMemory(GetFileSize->FileName, Path, PathLength);

  00050	ff 75 f8	 push	 DWORD PTR _PathLength$[ebp]
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _GetFileSize$[ebp]
  00056	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00059	8b 55 f4	 mov	 edx, DWORD PTR _Path$[ebp]
  0005c	e8 00 00 00 00	 call	 ?BlRtlCopyMemory@@YIXPAXPBXK@Z ; BlRtlCopyMemory

; 413  : 
; 414  :     GetFileSize->FileName[PathLength] = 0;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _GetFileSize$[ebp]
  00064	03 45 f8	 add	 eax, DWORD PTR _PathLength$[ebp]
  00067	c6 40 0a 00	 mov	 BYTE PTR [eax+10], 0

; 415  : 
; 416  :     BlPxeCallPxeApi(PXE_OPCODE_TFTP_GET_FILE_SIZE, GetFileSize);

  0006b	8b 55 fc	 mov	 edx, DWORD PTR _GetFileSize$[ebp]
  0006e	66 b9 25 00	 mov	 cx, 37			; 00000025H
  00072	e8 00 00 00 00	 call	 ?BlPxeCallPxeApi@@YIXGPAX@Z ; BlPxeCallPxeApi

; 417  : 
; 418  :     if (GetFileSize->Status != PXE_STATUS_SUCCESS) {

  00077	8b 45 fc	 mov	 eax, DWORD PTR _GetFileSize$[ebp]
  0007a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0007d	85 c0		 test	 eax, eax
  0007f	74 04		 je	 SHORT $LN1@BlPxeGetFi

; 419  : 
; 420  :         return FALSE;

  00081	32 c0		 xor	 al, al
  00083	eb 10		 jmp	 SHORT $LN3@BlPxeGetFi
$LN1@BlPxeGetFi:

; 421  :     }
; 422  : 
; 423  :     *FileSize = GetFileSize->FileSize;

  00085	8b 45 f0	 mov	 eax, DWORD PTR _FileSize$[ebp]
  00088	8b 4d fc	 mov	 ecx, DWORD PTR _GetFileSize$[ebp]
  0008b	8b 89 8a 00 00
	00		 mov	 ecx, DWORD PTR [ecx+138]
  00091	89 08		 mov	 DWORD PTR [eax], ecx

; 424  : 
; 425  :     return TRUE;

  00093	b0 01		 mov	 al, 1
$LN3@BlPxeGetFi:

; 426  : }

  00095	c9		 leave
  00096	c3		 ret	 0
?BlPxeGetFileSize@@YIEPBDPAK@Z ENDP			; BlPxeGetFileSize
_TEXT	ENDS
PUBLIC	?BlPxeReadFile@@YIEPBDPAXK@Z			; BlPxeReadFile
EXTRN	?BlRtlAssertFailed@@YIXPBDK@Z:PROC		; BlRtlAssertFailed
; Function compile flags: /Odsp
;	COMDAT ?BlPxeReadFile@@YIEPBDPAXK@Z
_TEXT	SEGMENT
_Buffer$ = -20						; size = 4
_Path$ = -16						; size = 4
_PathLength$ = -12					; size = 4
_ReadFile$ = -8						; size = 4
_Index$ = -4						; size = 4
_NumberOfBytes$ = 8					; size = 4
?BlPxeReadFile@@YIEPBDPAXK@Z PROC			; BlPxeReadFile, COMDAT
; _Path$ = ecx
; _Buffer$ = edx

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 55 ec	 mov	 DWORD PTR _Buffer$[ebp], edx
  00009	89 4d f0	 mov	 DWORD PTR _Path$[ebp], ecx

; 457  :     UINT32 Index;
; 458  :     UINT32 PathLength;
; 459  :     PPXE_TFTP_READ_FILE ReadFile;
; 460  : 
; 461  :     BLASSERT((((ULONG_PTR) Buffer) + NumberOfBytes) > ((ULONG_PTR) Buffer));

  0000c	8b 45 ec	 mov	 eax, DWORD PTR _Buffer$[ebp]
  0000f	03 45 08	 add	 eax, DWORD PTR _NumberOfBytes$[ebp]
  00012	3b 45 ec	 cmp	 eax, DWORD PTR _Buffer$[ebp]
  00015	77 0f		 ja	 SHORT $LN7@BlPxeReadF
  00017	ba cd 01 00 00	 mov	 edx, 461		; 000001cdH
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  00021	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN7@BlPxeReadF:

; 462  : 
; 463  :     BLASSERT((((ULONG_PTR) Buffer) + NumberOfBytes) <= 0xFFFFFFFF);

  00026	8b 45 ec	 mov	 eax, DWORD PTR _Buffer$[ebp]
  00029	03 45 08	 add	 eax, DWORD PTR _NumberOfBytes$[ebp]
  0002c	83 f8 ff	 cmp	 eax, -1
  0002f	76 0f		 jbe	 SHORT $LN6@BlPxeReadF
  00031	ba cf 01 00 00	 mov	 edx, 463		; 000001cfH
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  0003b	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN6@BlPxeReadF:

; 464  : 
; 465  :     ReadFile = &BlPxeApiPacket.u1.TFTPReadFile;

  00040	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ReadFile$[ebp], OFFSET ?BlPxeApiPacket@@3U_PXE_API_PACKET@@A ; BlPxeApiPacket

; 466  : 
; 467  :     PathLength = BlRtlStringLength(Path);

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _Path$[ebp]
  0004a	e8 00 00 00 00	 call	 ?BlRtlStringLength@@YIKPBD@Z ; BlRtlStringLength
  0004f	89 45 f4	 mov	 DWORD PTR _PathLength$[ebp], eax

; 468  : 
; 469  :     if (PathLength >= sizeof(ReadFile->FileName)) {

  00052	81 7d f4 80 00
	00 00		 cmp	 DWORD PTR _PathLength$[ebp], 128 ; 00000080H
  00059	72 07		 jb	 SHORT $LN5@BlPxeReadF

; 470  : 
; 471  : #if PXE_VERBOSE
; 472  : 
; 473  :         BlRtlPrintf("PXE: Path is too long [%s]\n", Path);
; 474  : 
; 475  : #endif
; 476  : 
; 477  :         return FALSE;

  0005b	32 c0		 xor	 al, al
  0005d	e9 8f 00 00 00	 jmp	 $LN8@BlPxeReadF
$LN5@BlPxeReadF:

; 478  :     }
; 479  : 
; 480  :     for (Index = 0; Index < PXE_TFTP_READ_FILE_RETRY_COUNT; Index += 1) {

  00062	83 65 fc 00	 and	 DWORD PTR _Index$[ebp], 0
  00066	eb 07		 jmp	 SHORT $LN4@BlPxeReadF
$LN3@BlPxeReadF:
  00068	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  0006b	40		 inc	 eax
  0006c	89 45 fc	 mov	 DWORD PTR _Index$[ebp], eax
$LN4@BlPxeReadF:
  0006f	83 7d fc 05	 cmp	 DWORD PTR _Index$[ebp], 5
  00073	73 7a		 jae	 SHORT $LN2@BlPxeReadF

; 481  : 
; 482  :         BlRtlZeroMemory(ReadFile, sizeof(PXE_TFTP_READ_FILE));

  00075	ba 9e 00 00 00	 mov	 edx, 158		; 0000009eH
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _ReadFile$[ebp]
  0007d	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 483  : 
; 484  :         BlRtlCopyMemory(ReadFile->FileName,
; 485  :                         Path,
; 486  :                         PathLength);

  00082	ff 75 f4	 push	 DWORD PTR _PathLength$[ebp]
  00085	8b 4d f8	 mov	 ecx, DWORD PTR _ReadFile$[ebp]
  00088	41		 inc	 ecx
  00089	41		 inc	 ecx
  0008a	8b 55 f0	 mov	 edx, DWORD PTR _Path$[ebp]
  0008d	e8 00 00 00 00	 call	 ?BlRtlCopyMemory@@YIXPAXPBXK@Z ; BlRtlCopyMemory

; 487  : 
; 488  :         ReadFile->FileName[PathLength] = 0;

  00092	8b 45 f8	 mov	 eax, DWORD PTR _ReadFile$[ebp]
  00095	03 45 f4	 add	 eax, DWORD PTR _PathLength$[ebp]
  00098	c6 40 02 00	 mov	 BYTE PTR [eax+2], 0

; 489  : 
; 490  :         ReadFile->BufferSize = NumberOfBytes;

  0009c	8b 45 f8	 mov	 eax, DWORD PTR _ReadFile$[ebp]
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _NumberOfBytes$[ebp]
  000a2	89 88 82 00 00
	00		 mov	 DWORD PTR [eax+130], ecx

; 491  :         ReadFile->Buffer = (UINT32) (ULONG_PTR) Buffer;

  000a8	8b 45 f8	 mov	 eax, DWORD PTR _ReadFile$[ebp]
  000ab	8b 4d ec	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  000ae	89 88 86 00 00
	00		 mov	 DWORD PTR [eax+134], ecx

; 492  :         ReadFile->ServerIP = BlPxeBootpReply.ServerIP;

  000b4	8b 45 f8	 mov	 eax, DWORD PTR _ReadFile$[ebp]
  000b7	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A+20
  000bd	89 88 8a 00 00
	00		 mov	 DWORD PTR [eax+138], ecx

; 493  :         ReadFile->GatewayIP = BlPxeBootpReply.GatewayIP;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _ReadFile$[ebp]
  000c6	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A+24
  000cc	89 88 8e 00 00
	00		 mov	 DWORD PTR [eax+142], ecx

; 494  : 
; 495  :         BlPxeCallPxeApi(PXE_OPCODE_TFTP_READ_FILE, ReadFile);

  000d2	8b 55 f8	 mov	 edx, DWORD PTR _ReadFile$[ebp]
  000d5	66 b9 23 00	 mov	 cx, 35			; 00000023H
  000d9	e8 00 00 00 00	 call	 ?BlPxeCallPxeApi@@YIXGPAX@Z ; BlPxeCallPxeApi

; 496  : 
; 497  :         if (ReadFile->Status == PXE_STATUS_SUCCESS) {

  000de	8b 45 f8	 mov	 eax, DWORD PTR _ReadFile$[ebp]
  000e1	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000e4	85 c0		 test	 eax, eax
  000e6	75 02		 jne	 SHORT $LN1@BlPxeReadF

; 498  : 
; 499  :             break;

  000e8	eb 05		 jmp	 SHORT $LN2@BlPxeReadF
$LN1@BlPxeReadF:

; 500  :         }
; 501  : 
; 502  : #if PXE_VERBOSE
; 503  : 
; 504  :         BlRtlPrintf("PXE: TFTP_READ failed: 0x%04x! [%u / %u]\n",
; 505  :                     ReadFile->Status,
; 506  :                     Index + 1,
; 507  :                     PXE_TFTP_READ_FILE_RETRY_COUNT);
; 508  : 
; 509  : #endif
; 510  : 
; 511  :     }

  000ea	e9 79 ff ff ff	 jmp	 $LN3@BlPxeReadF
$LN2@BlPxeReadF:

; 512  : 
; 513  :     return TRUE;

  000ef	b0 01		 mov	 al, 1
$LN8@BlPxeReadF:

; 514  : }

  000f1	c9		 leave
  000f2	c2 04 00	 ret	 4
?BlPxeReadFile@@YIEPBDPAXK@Z ENDP			; BlPxeReadFile
_TEXT	ENDS
PUBLIC	??_C@_0BH@OIJGCMHH@PXE?3?5?$CBPXE?5is?5invalid?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@BNOBOGEO@PXE?3?5Unable?5to?5find?5PXE?$CB?6?$AA@ ; `string'
PUBLIC	?BlPxeInitialize@@YIXXZ				; BlPxeInitialize
EXTRN	?BlFsReadFile@@3P6IEPBDPAXK@ZA:DWORD		; BlFsReadFile
EXTRN	?BlFsGetFileSize@@3P6IEPBDPAK@ZA:DWORD		; BlFsGetFileSize
EXTRN	?BlRtlComputeChecksum8@@YIEPBXK@Z:PROC		; BlRtlComputeChecksum8
EXTRN	?BlRtlConvertFarPointerToLinearPointer@@YIPAXPAU_FAR_POINTER@@@Z:PROC ; BlRtlConvertFarPointerToLinearPointer
EXTRN	?BlRtlCallLegacyInterruptService@@YIXEPAU_BL_LEGACY_CALL_CONTEXT@@0@Z:PROC ; BlRtlCallLegacyInterruptService
;	COMDAT ??_C@_0BH@OIJGCMHH@PXE?3?5?$CBPXE?5is?5invalid?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BH@OIJGCMHH@PXE?3?5?$CBPXE?5is?5invalid?$CB?6?$AA@ DB 'PXE: !PXE i'
	DB	's invalid!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BNOBOGEO@PXE?3?5Unable?5to?5find?5PXE?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BK@BNOBOGEO@PXE?3?5Unable?5to?5find?5PXE?$CB?6?$AA@ DB 'PXE: Unabl'
	DB	'e to find PXE!', 0aH, 00H			; `string'
; Function compile flags: /Odsp
CONST	ENDS
;	COMDAT ?BlPxeInitialize@@YIXXZ
_TEXT	SEGMENT
_Context$ = -52						; size = 36
_Next$ = -16						; size = 4
_Limit$ = -12						; size = 4
_FarPointer$ = -8					; size = 4
_InstallationCheck$ = -4				; size = 4
?BlPxeInitialize@@YIXXZ PROC				; BlPxeInitialize, COMDAT

; 529  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 530  :     BL_LEGACY_CALL_CONTEXT Context;
; 531  :     FAR_POINTER FarPointer;
; 532  :     PPXE_INSTALLATION_CHECK InstallationCheck;
; 533  :     ULONG_PTR Limit;
; 534  :     ULONG_PTR Next;
; 535  : 
; 536  :     BlRtlZeroMemory(&Context, sizeof(Context));

  00006	6a 24		 push	 36			; 00000024H
  00008	5a		 pop	 edx
  00009	8d 4d cc	 lea	 ecx, DWORD PTR _Context$[ebp]
  0000c	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 537  : 
; 538  :     Context.eax = 0x5650;

  00011	c7 45 cc 50 56
	00 00		 mov	 DWORD PTR _Context$[ebp], 22096 ; 00005650H

; 539  : 
; 540  :     BlRtlCallLegacyInterruptService(0x1A,
; 541  :                                     &Context,
; 542  :                                     &Context);

  00018	8d 45 cc	 lea	 eax, DWORD PTR _Context$[ebp]
  0001b	50		 push	 eax
  0001c	8d 55 cc	 lea	 edx, DWORD PTR _Context$[ebp]
  0001f	b1 1a		 mov	 cl, 26			; 0000001aH
  00021	e8 00 00 00 00	 call	 ?BlRtlCallLegacyInterruptService@@YIXEPAU_BL_LEGACY_CALL_CONTEXT@@0@Z ; BlRtlCallLegacyInterruptService

; 543  : 
; 544  :     if (((Context.eflags & RFLAGS_CF) == 0) && ((Context.eax & 0xFFFF) == 0x564E)) {

  00026	8b 45 ec	 mov	 eax, DWORD PTR _Context$[ebp+32]
  00029	83 e0 01	 and	 eax, 1
  0002c	75 35		 jne	 SHORT $LN11@BlPxeIniti
  0002e	8b 45 cc	 mov	 eax, DWORD PTR _Context$[ebp]
  00031	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00036	3d 4e 56 00 00	 cmp	 eax, 22094		; 0000564eH
  0003b	75 26		 jne	 SHORT $LN11@BlPxeIniti

; 545  : 
; 546  :         FarPointer.Segment = (UINT16) Context.es;

  0003d	66 8b 45 e8	 mov	 ax, WORD PTR _Context$[ebp+28]
  00041	66 89 45 fa	 mov	 WORD PTR _FarPointer$[ebp+2], ax

; 547  :         FarPointer.Offset = (UINT16) (Context.ebx & 0xFFFF);

  00045	8b 45 d0	 mov	 eax, DWORD PTR _Context$[ebp+4]
  00048	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0004d	66 89 45 f8	 mov	 WORD PTR _FarPointer$[ebp], ax

; 548  : 
; 549  : #if PXE_VERBOSE
; 550  : 
; 551  :         BlRtlPrintf("PXE: INT1A/5650h => [ES:BX = %04x:%04x]\n",
; 552  :                     FarPointer.Segment,
; 553  :                     FarPointer.Offset);
; 554  : 
; 555  : #endif
; 556  : 
; 557  :         BlPxeInstallationCheck = (PPXE_INSTALLATION_CHECK)
; 558  :             BlRtlConvertFarPointerToLinearPointer(&FarPointer);

  00051	8d 4d f8	 lea	 ecx, DWORD PTR _FarPointer$[ebp]
  00054	e8 00 00 00 00	 call	 ?BlRtlConvertFarPointerToLinearPointer@@YIPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertFarPointerToLinearPointer
  00059	a3 00 00 00 00	 mov	 DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A, eax ; BlPxeInstallationCheck

; 559  : 
; 560  :     } else {

  0005e	e9 a3 00 00 00	 jmp	 $LN10@BlPxeIniti
$LN11@BlPxeIniti:

; 561  : 
; 562  :         Next = 0xA0000;

  00063	c7 45 f0 00 00
	0a 00		 mov	 DWORD PTR _Next$[ebp], 655360 ; 000a0000H

; 563  :         Limit = 0x10000;

  0006a	c7 45 f4 00 00
	01 00		 mov	 DWORD PTR _Limit$[ebp], 65536 ; 00010000H

; 564  : 
; 565  :         BlPxeInstallationCheck = NULL;

  00071	83 25 00 00 00
	00 00		 and	 DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A, 0 ; BlPxeInstallationCheck
$LN9@BlPxeIniti:

; 566  : 
; 567  :         do {
; 568  : 
; 569  :             Next -= 16;

  00078	8b 45 f0	 mov	 eax, DWORD PTR _Next$[ebp]
  0007b	83 e8 10	 sub	 eax, 16			; 00000010H
  0007e	89 45 f0	 mov	 DWORD PTR _Next$[ebp], eax

; 570  : 
; 571  :             InstallationCheck = (PPXE_INSTALLATION_CHECK) Next;

  00081	8b 45 f0	 mov	 eax, DWORD PTR _Next$[ebp]
  00084	89 45 fc	 mov	 DWORD PTR _InstallationCheck$[ebp], eax

; 572  : 
; 573  :             if ((InstallationCheck->Length >= sizeof(PXE_INSTALLATION_CHECK)) &&
; 574  :                 (InstallationCheck->Signature[0] == 'P') &&
; 575  :                 (InstallationCheck->Signature[1] == 'X') &&
; 576  :                 (InstallationCheck->Signature[2] == 'E') &&
; 577  :                 (InstallationCheck->Signature[3] == 'N') &&
; 578  :                 (InstallationCheck->Signature[4] == 'V') &&
; 579  :                 (InstallationCheck->Signature[5] == '+') &&
; 580  :                 (BlRtlComputeChecksum8(InstallationCheck, InstallationCheck->Length) == 0)) {

  00087	8b 45 fc	 mov	 eax, DWORD PTR _InstallationCheck$[ebp]
  0008a	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0008e	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  00091	72 67		 jb	 SHORT $LN8@BlPxeIniti
  00093	8b 45 fc	 mov	 eax, DWORD PTR _InstallationCheck$[ebp]
  00096	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00099	83 f8 50	 cmp	 eax, 80			; 00000050H
  0009c	75 5c		 jne	 SHORT $LN8@BlPxeIniti
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _InstallationCheck$[ebp]
  000a1	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  000a5	83 f8 58	 cmp	 eax, 88			; 00000058H
  000a8	75 50		 jne	 SHORT $LN8@BlPxeIniti
  000aa	8b 45 fc	 mov	 eax, DWORD PTR _InstallationCheck$[ebp]
  000ad	0f b6 40 02	 movzx	 eax, BYTE PTR [eax+2]
  000b1	83 f8 45	 cmp	 eax, 69			; 00000045H
  000b4	75 44		 jne	 SHORT $LN8@BlPxeIniti
  000b6	8b 45 fc	 mov	 eax, DWORD PTR _InstallationCheck$[ebp]
  000b9	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  000bd	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  000c0	75 38		 jne	 SHORT $LN8@BlPxeIniti
  000c2	8b 45 fc	 mov	 eax, DWORD PTR _InstallationCheck$[ebp]
  000c5	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  000c9	83 f8 56	 cmp	 eax, 86			; 00000056H
  000cc	75 2c		 jne	 SHORT $LN8@BlPxeIniti
  000ce	8b 45 fc	 mov	 eax, DWORD PTR _InstallationCheck$[ebp]
  000d1	0f b6 40 05	 movzx	 eax, BYTE PTR [eax+5]
  000d5	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  000d8	75 20		 jne	 SHORT $LN8@BlPxeIniti
  000da	8b 45 fc	 mov	 eax, DWORD PTR _InstallationCheck$[ebp]
  000dd	0f b6 50 08	 movzx	 edx, BYTE PTR [eax+8]
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _InstallationCheck$[ebp]
  000e4	e8 00 00 00 00	 call	 ?BlRtlComputeChecksum8@@YIEPBXK@Z ; BlRtlComputeChecksum8
  000e9	0f b6 c0	 movzx	 eax, al
  000ec	85 c0		 test	 eax, eax
  000ee	75 0a		 jne	 SHORT $LN8@BlPxeIniti

; 581  : 
; 582  :                 BlPxeInstallationCheck = InstallationCheck;

  000f0	8b 45 fc	 mov	 eax, DWORD PTR _InstallationCheck$[ebp]
  000f3	a3 00 00 00 00	 mov	 DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A, eax ; BlPxeInstallationCheck

; 583  : 
; 584  :                 break;

  000f8	eb 0c		 jmp	 SHORT $LN10@BlPxeIniti
$LN8@BlPxeIniti:

; 585  :             }
; 586  : 
; 587  :         } while (Next > Limit);

  000fa	8b 45 f0	 mov	 eax, DWORD PTR _Next$[ebp]
  000fd	3b 45 f4	 cmp	 eax, DWORD PTR _Limit$[ebp]
  00100	0f 87 72 ff ff
	ff		 ja	 $LN9@BlPxeIniti
$LN10@BlPxeIniti:

; 588  :     }
; 589  : 
; 590  :     if (BlPxeInstallationCheck == NULL) {

  00106	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A, 0 ; BlPxeInstallationCheck
  0010d	75 1a		 jne	 SHORT $LN5@BlPxeIniti

; 591  : 
; 592  :         BlRtlPrintf("PXE: Unable to find PXE!\n");

  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@BNOBOGEO@PXE?3?5Unable?5to?5find?5PXE?$CB?6?$AA@
  00114	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00119	59		 pop	 ecx

; 593  :         BlRtlHalt();

  0011a	ba 51 02 00 00	 mov	 edx, 593		; 00000251H
  0011f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  00124	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN5@BlPxeIniti:

; 594  :     }
; 595  : 
; 596  :     if (BlPxeInstallationCheck->Version < 0x201) {

  00129	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A ; BlPxeInstallationCheck
  0012e	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  00132	3d 01 02 00 00	 cmp	 eax, 513		; 00000201H
  00137	7d 12		 jge	 SHORT $LN4@BlPxeIniti

; 597  : 
; 598  : #if PXE_VERBOSE
; 599  : 
; 600  :         BlRtlPrintf("PXE: Using PXENV+.\n");
; 601  : 
; 602  : #endif
; 603  : 
; 604  :         BlPxeEntry16 = BlPxeInstallationCheck->RealModeEntry;

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A ; BlPxeInstallationCheck
  0013e	8b 40 0a	 mov	 eax, DWORD PTR [eax+10]
  00141	a3 00 00 00 00	 mov	 DWORD PTR ?BlPxeEntry16@@3U_FAR_POINTER@@A, eax ; BlPxeEntry16

; 605  : 
; 606  :     } else {

  00146	e9 9a 00 00 00	 jmp	 $LN3@BlPxeIniti
$LN4@BlPxeIniti:

; 607  : 
; 608  : #if PXE_VERBOSE
; 609  : 
; 610  :         BlRtlPrintf("PXE: Using !PXE.\n");
; 611  : 
; 612  : #endif
; 613  : 
; 614  :         BlPxeExtendedInformation = (PPXE_EXTENDED_INFORMATION)
; 615  :             BlRtlConvertFarPointerToLinearPointer(&BlPxeInstallationCheck->ExtendedInformation);

  0014b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A ; BlPxeInstallationCheck
  00151	83 c1 28	 add	 ecx, 40			; 00000028H
  00154	e8 00 00 00 00	 call	 ?BlRtlConvertFarPointerToLinearPointer@@YIPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertFarPointerToLinearPointer
  00159	a3 00 00 00 00	 mov	 DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A, eax ; BlPxeExtendedInformation

; 616  : 
; 617  :         if (!((BlPxeExtendedInformation->Length >= sizeof(PXE_EXTENDED_INFORMATION)) &&
; 618  :               (BlPxeExtendedInformation->Signature[0] == '!') &&
; 619  :               (BlPxeExtendedInformation->Signature[1] == 'P') &&
; 620  :               (BlPxeExtendedInformation->Signature[2] == 'X') &&
; 621  :               (BlPxeExtendedInformation->Signature[3] == 'E') &&
; 622  :               (BlRtlComputeChecksum8(BlPxeExtendedInformation, BlPxeExtendedInformation->Length) == 0))) {

  0015e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  00163	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  00167	83 f8 58	 cmp	 eax, 88			; 00000058H
  0016a	72 52		 jb	 SHORT $LN1@BlPxeIniti
  0016c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  00171	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00174	83 f8 21	 cmp	 eax, 33			; 00000021H
  00177	75 45		 jne	 SHORT $LN1@BlPxeIniti
  00179	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  0017e	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  00182	83 f8 50	 cmp	 eax, 80			; 00000050H
  00185	75 37		 jne	 SHORT $LN1@BlPxeIniti
  00187	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  0018c	0f b6 40 02	 movzx	 eax, BYTE PTR [eax+2]
  00190	83 f8 58	 cmp	 eax, 88			; 00000058H
  00193	75 29		 jne	 SHORT $LN1@BlPxeIniti
  00195	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  0019a	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  0019e	83 f8 45	 cmp	 eax, 69			; 00000045H
  001a1	75 1b		 jne	 SHORT $LN1@BlPxeIniti
  001a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  001a8	0f b6 50 04	 movzx	 edx, BYTE PTR [eax+4]
  001ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  001b2	e8 00 00 00 00	 call	 ?BlRtlComputeChecksum8@@YIEPBXK@Z ; BlRtlComputeChecksum8
  001b7	0f b6 c0	 movzx	 eax, al
  001ba	85 c0		 test	 eax, eax
  001bc	74 1a		 je	 SHORT $LN2@BlPxeIniti
$LN1@BlPxeIniti:

; 623  : 
; 624  :             BlRtlPrintf("PXE: !PXE is invalid!\n");

  001be	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OIJGCMHH@PXE?3?5?$CBPXE?5is?5invalid?$CB?6?$AA@
  001c3	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  001c8	59		 pop	 ecx

; 625  :             BlRtlHalt();

  001c9	ba 71 02 00 00	 mov	 edx, 625		; 00000271H
  001ce	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  001d3	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN2@BlPxeIniti:

; 626  :         }
; 627  : 
; 628  :         BlPxeEntry16 = BlPxeExtendedInformation->Entry16;

  001d8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  001dd	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  001e0	a3 00 00 00 00	 mov	 DWORD PTR ?BlPxeEntry16@@3U_FAR_POINTER@@A, eax ; BlPxeEntry16
$LN3@BlPxeIniti:

; 629  :     }
; 630  : 
; 631  : #if PXE_VERBOSE
; 632  : 
; 633  :     BlRtlPrintf("PXE: PXENV+ @ %p\n"
; 634  :                 "PXE: !PXE   @ %p\n"
; 635  :                 "PXE: Entry16 @ %04x:%04x\n",
; 636  :                 BlPxeInstallationCheck,
; 637  :                 BlPxeExtendedInformation,
; 638  :                 BlPxeEntry16.Segment,
; 639  :                 BlPxeEntry16.Offset);
; 640  : 
; 641  : #endif
; 642  : 
; 643  :     BlPxeGetBootpReply();

  001e5	e8 00 00 00 00	 call	 ?BlPxeGetBootpReply@@YIXXZ ; BlPxeGetBootpReply

; 644  : 
; 645  :     BlFsGetFileSize = BlPxeGetFileSize;

  001ea	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BlFsGetFileSize@@3P6IEPBDPAK@ZA, OFFSET ?BlPxeGetFileSize@@YIEPBDPAK@Z ; BlFsGetFileSize, BlPxeGetFileSize

; 646  :     BlFsReadFile = BlPxeReadFile;

  001f4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BlFsReadFile@@3P6IEPBDPAXK@ZA, OFFSET ?BlPxeReadFile@@YIEPBDPAXK@Z ; BlFsReadFile, BlPxeReadFile

; 647  : 
; 648  :     return;
; 649  : }

  001fe	c9		 leave
  001ff	c3		 ret	 0
?BlPxeInitialize@@YIXXZ ENDP				; BlPxeInitialize
_TEXT	ENDS
END
