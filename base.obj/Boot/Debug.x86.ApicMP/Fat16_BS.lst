Microsoft (R) Macro Assembler Version 8.00.50727.762	    02/23/22 18:37:45
Fat16_BS.asm						     Page 1 - 1


				;; ----------------------------------------------------------------------------
				;;
				;;  Copyright (c) Microsoft Corporation.  All rights reserved.
				;;
				;; ----------------------------------------------------------------------------

				;;;;;;;;;;;;;;;;;;;;
				; Concerns
				;  1 - there is no error checking on the int13 calls
				;  2 - we assume that the disk is FAT16, and that the parameters in the BPB are correct.

				;;;;;;;;;;;;;;;;;;;;
				; Constants

 = 7C00				BootSecOrigin       EQU     07c00h      ; the BIOS always puts the boot sector here
 = FFF8				EndOfClusterMarker  EQU     0FFF8h      ; End of cluster is here or higher

				; a little trickery here:  Inside the Boot Sector data structure, there several bytes that we never use.
				; whether the real file system uses them or not, we don't need them, and we could use the space for locals.

 = OemName			FirstDataSector     EQU     OemName
 = OemName+2			RootDirSectors      EQU     OemName+2
 = OemName+4			RootDirStart        EQU     OemName+4
 = SerialNum			LBAStart            EQU     SerialNum

				;;;;;;;;;;;;;;;;;;;;
				; Directives

				.model tiny
				.686p

				;;;;;;;;;;;;;;;;;;;;
				; Begin Code segment

 0000				_TEXT SEGMENT use16 ; 16-bit code segment
 0000				.code
				ORG     0h                          ; BIOS puts us at 07c0h:0000

 0000				start:

				    ; standard boot loader proceedure is to jump over the BPB and BS data structures, then nop
 0000  EB 3C			    jmp short bootloader
 0002  90			    nop

				;;; Example BPB and BS for Singularity, assuming a 64MB disk.  Installers must NEVER copy these 59 bytes - use what the HD has...
 0003				BPB:
 0003 4953			    OemName         DW      'IS'    ; setting up the first 8 bytes like this lets us address them via the hack above
 0005  4E 47 55 4C 41 52	                    DB      'NGULAR'
 000B 0200			    BytesPerSector  DW      512
 000D 04			    SecsPerClust    DB      4
 000E 0001			    ReservedSecs    DW      1
 0010 02			    NumFats         DB      2
 0011 0200			    RootDirEntries  DW      512
 0013 0000			    TotalSectors    DW      0
 0015 F8			    MediaByte       DB      0F8H
 0016 0080			    NumFatSecs      DW      128
 0018 0011			    SecPerTrack     DW      011h
 001A 0008			    NumHeads        DW      08h
 001C 00000011			    HiddenSecs      DD      011h
 0020 0001FF87			    BigTotalSecs    DD      1ff87h
 0024 80			    BootDrv         DB      80h
 0025 00			    BSReserved1     DB      0h
 0026 29			    ExtBootSig      DB      41
 0027 00000000			    SerialNum       DD      0
 002B 53 49 4E 47 55 4C		    VolumeLabel     DB      'SINGULARITY'
       41 52 49 54 59
 0036 46 41 54 31 36 20		    FatId           DB      'FAT16   '
       20 20

 003E				bootloader:

 003E  EA			    db      0eah                    ; jmp far
 003F  0043 R			    dw      OFFSET Step1            ; offset
 0041  07C0			    dw      007c0h                  ; segment
				        
 0043				Step1:    ; set CS,DS,SS,ES segments to 07c0h, set stack to 07c0h:0400h
 0043  8C C9			    mov     cx, cs
 0045  8E D1			    mov     ss, cx
 0047  BC 0400			    mov     sp, 0400h
 004A  8E C1			    mov     es, cx
 004C  8E D9			    mov     ds, cx
 004E  8B EC			    mov     bp, sp

 0050				Step2:    ; Clear the Screen
 0050  B8 0002			    mov     ax, 02h
 0053  CD 10			    int     010h

 0055				Step3:    ; Save the boot drive
 0055  88 16 0024 R		    mov     [BootDrv], dl

 0059				Step4:    ; Ensure Int13X is supported.  (It's the only way we'll access the HD)
 0059  B8 4100			    mov     ax, 4100h
 005C  BB 55AA			    mov     bx, 055aah              ; required parameter
				   
 005F  CD 13			    int     13h                     ; check availability of extended int 13 (dl holds BootDrv)

 0061  0F 82 0167		    jc      HWUnsupportedError      ; CF is set on error
 0065  81 FB AA55		    cmp     bx,0aa55h
 0069  0F 85 015F		    jne     HWUnsupportedError      ; BX != 0xaa55 on error
 006D  F6 C1 01			    test    cl,1
 0070  0F 84 0158		    jz      HWUnsupportedError      ; bit 0 off on error

 0074				Step5:    ; Find the first FAT16 partition in the MBR and store the starting LBA offset.
 0074  66| 33 C0		    xor     eax, eax
 0077  BB 4000			    mov     bx, 4000h
 007A  8E C3			    mov     es, bx
 007C  B9 0001			    mov     cx, 1
 007F  E8 0125			    call    ReadDisk                ; load the MBR to 4000:0000

 0082  B9 0004			    mov     cx, 4                   ; check up to 4 entries in the partition table
 0085  BF 01BE			    mov     di, 446                 ; the offset of the table within the MBR

 0088  66| B8 0000000E		    mov     eax, 00eh               ; 00eh is the signature for a Fat16 LBA-accessible partition
 008E				FindFat16Partition:
 008E  26: 3A 45 04		    cmp     al, es:[di+4]
 0092  74 0A			    je      FoundFat16Partition
 0094  83 C7 10			    add     di, 16
 0097  49			    dec     cx
 0098  0F 84 0128		    jz      PartitionNotFoundError
 009C  EB F0			    jmp     FindFat16Partition

 009E				FoundFat16Partition:
 009E  66| 26: 8B 45 08		    mov     eax, es:[di+8]
 00A3  66| A3 0027 R		    mov     [LBAStart], eax         ; save the starting lba

 00A7				Step6:    ; Compute the First Data Sector of the FAT
 00A7  66| 0F B7 06 0011 R    movzx   eax, [RootDirEntries]
 00AD  66| C1 E0 05		    shl     eax, 5                  ; (assume no overflow)
 00B1  66| 0F B7 0E 000B R	    movzx   ecx, [BytesPerSector]
 00B7  66| 03 C1		    add     eax, ecx
 00BA  66| 48			    dec     eax
 00BC  66| F7 F1		    div     ecx                     ; (discard remainder)
 00BF  A3 0005 R		    mov     [RootDirSectors], ax    ; RootDirSectors = ((RootDirEntries * 32) + (BytesPerSector - 1)) / BytesPerSector

 00C2  66| 0F B6 06 000D R	    movzx   eax, [SecsPerClust]
 00C8  66| F7 E1		    mul     ecx
 00CB  66| C1 E8 04		    shr     eax, 4
 00CF  50			    push    ax                      ; save the cluster size on the stack

 00D0  66| 0F B6 06 0010 R	    movzx   eax, [NumFats]
 00D6  F7 26 0016 R		    mul     [NumFatSecs]            ; (assume no overflow)
 00DA  03 06 000E R		    add     ax, [ReservedSecs]
 00DE  A3 0007 R		    mov     [RootDirStart], ax      ; RootDirStart = ReservedSecs + (NumFats * NumFatSecs)

 00E1  03 06 0005 R		    add     ax, [RootDirSectors]
 00E5  A3 0003 R		    mov     [FirstDataSector], ax   ; FirstDataSector = RootDirStart + RootDirSectors

 00E8				Step7:    ; Search the Root Directory for 'SINGLDR ', find its starting cluster

 00E8  8B 16 0005 R		    mov     dx, [RootDirSectors]    ; set counter for # sectors in root dir

 00EC  B8 4000			    mov     ax, 4000h
 00EF  8E C0			    mov     es, ax                  ; set up ES for a disk transfer

 00F1  66| 0F B7 06 0007 R	    movzx   eax, [RootDirStart]
 00F7  66| 03 06 0027 R		    add     eax, [LBAStart]         ; compute true first sector of root dir

 00FC				LoadNextSector:
 00FC  66| B9 00000001		    mov     ecx, 1
 0102  E8 00A2			    call    ReadDisk                ; read 1 sector (eax has sector #) to es:0000h

 0105  8B 1E 000B R		    mov     bx, [BytesPerSector]    ; set a counter for how many directory entries we will check (32 bytes per entry)
 0109  33 FF			    xor     di, di                  ; prep for comparison between [ds:si] (search string) and [es:di] (sector data)

 010B				CompareDirEntries:
 010B  BE 01ED R		    mov     si, OFFSET Stage2File   ; [ds:si] points to the string we are looking for...
 010E  B9 000B			    mov     cx, 11                  ; we are matching an 11-character file name
 0111  F3/ A6			    repe    cmpsb
 0113  74 14			    je      FoundMatch
 0115  03 F9			    add     di, cx
 0117  83 C7 15			    add     di, 21                  ; move to next dir entry, but first make sure we aren't at the last entry!
 011A  83 EB 20			    sub     bx,32
 011D  75 EC			    jnz     CompareDirEntries

 011F  66| 40			    inc     eax                     ; prep to read next entry
 0121  66| 4A			    dec     edx
 0123  0F 84 00A1		    jz      FileNotFoundError
 0127  EB D3			    jmp     LoadNextSector

 0129				FoundMatch:
				                                    ; es:[di] points to 12th byte of the 32-byte 
				                                    ; directory entry for the 2nd stage boot loader file
 0129  26: 8B 45 0F		    mov     ax, es:[di+15]          ; read the cluster at offset 26

 012D				Step8:    ; Load the file whose first cluster is ax to 57c0:0000

 012D  B9 57C0			    mov     cx, 057c0h
 0130  8E C1			    mov     es, cx

 0132				DoRead:
 0132  E8 004E			    call    ReadCluster
 0135  06			    push    es
				    
 0136  B9 4000			    mov     cx, 04000h              ; use different segment to find next cluster
 0139  8E C1			    mov     es, cx
 013B  E8 0022			    call    CalcNextCluster
 013E  59			    pop     cx
 013F  03 4E FE			    add     cx, [bp-2]
 0142  8E C1			    mov     es, cx
 0144  83 F8 F8			    cmp     ax, EndOfClusterMarker
 0147  72 E9			    jb      DoRead

 0149				Step9:    ; Transfer Control to the boot loader file, which we stored at 5000:7c00

 0149  66| 0F B6 16 0024 R	    movzx   edx, [BootDrv]
 014F  66| 52			    push    edx                     ; SINGLDR will need to know the boot drive #
 0151  66| 68 00004806		    pushd   04806h                  ; H6 boot signature = HD, Fat16
				        
 0157  9A			    db      09Ah                    ; emit a long call to 5000:7c00
 0158  50007C00			    dd      50007c00h
				        
 015C  B0 2A			    mov     al, "*"
 015E  EB 6E			    jmp     PrintError
				        
				;;;;;;;;;;;;;;;;;;;;
				; CalcNextCluster
				;
				; Inputs:       ax      = current cluster
				;               es      = target segment for disk read (es:00)
				; Operation:    Read the FAT, lookup the value for the cluster in ax, and return it as ax

 0160				CalcNextCluster PROC NEAR
 0160  66| 25 0000FFFF		    and     eax, 0FFFFh             ; clear top half of eax
 0166  D1 E0			    shl     ax, 1
 0168  33 D2			    xor     dx, dx                  ; clear top half of dividend
 016A  F7 36 000B R		    div     [BytesPerSector]
 016E  52			    push    dx                      ; save remainder for later - it is the offset
 016F  03 06 000E R		    add     ax, [ReservedSecs]
 0173  66| 03 06 0027 R		    add     eax, [LBAStart]         ; eax has the sector to read

				    ; Call ReadDisk for 1 sector to es:0000
 0178  B9 0001			    mov     cx, 1
 017B  E8 0029			    call    ReadDisk

				    ; read cluster# at the offset
 017E  5B			    pop     bx                      ; pop the offset
 017F  26: 8B 07		    mov     ax, es:[bx]             ; get the value, put it in ax
 0182  C3			    ret
 0183				CalcNextCluster ENDP

				;;;;;;;;;;;;;;;;;;;;
				; ReadCluster
				;
				; Inputs:       ax      = cluster number to read
				;               es      = segment into which we will read (at es:0000)
				; Operation:    Read a cluster from the HD, using ReadDisk as a subroutine

 0183				ReadCluster PROC NEAR
 0183  66| 60			    pushad

				    ; compute the sector that starts the cluster
 0185  66| 25 0000FFFF		    and     eax, 0FFFFh             ; clear top half of eax for safety.
 018B  66| 83 E8 02		    sub     eax, 2
 018F  66| 0F B6 0E 000D R	    movzx   ecx, [SecsPerClust]     ; cx = sectors to load (this always read full clusters)
 0195  66| F7 E1		    mul     ecx
 0198  03 06 0003 R		    add     ax, [FirstDataSector]
 019C  66| 03 06 0027 R		    add     eax, [LBAStart]         ; eax holds the sector to read
 01A1  E8 0003			    call    ReadDisk

 01A4  66| 61			    popad
 01A6  C3			    ret
 01A7				ReadCluster ENDP

				;;;;;;;;;;;;;;;;;;;;
				; ReadDisk
				;
				; Inputs:       eax     = LBA sector to read
				;               cx      = number of sectors to read (limit to 64 or less)
				;               es:bx   = destination address (always read to offset 0)
				; Assumptions:  1 - assumes request will not cause overflow of es (limit on # sectors)
				;               2 - assumes int13 extensions available
				;               3 - LBA is limited to 32-bit values.  If the disk is > 2 TB, we have a problem

 01A7				ReadDisk PROC NEAR
 01A7  66| 60			    pushad
 01A9  8A 16 0024 R		    mov     dl, [BootDrv]           ; set the drive
				                
 01AD  66| 6A 00		    pushd   00
 01B0  66| 50			    push    eax                     ; push 64-bit sector address (top half always null)

 01B2  06			    push    es
 01B3  6A 00			    pushw   00                      ; push transfer address

 01B5  51			    push    cx                      ; # sectors
 01B6  6A 10			    pushw   0010h                   ; this request packet is 16 bytes
 01B8  B4 42			    mov     ah,42h                  ; extended read
 01BA  8B F4			    mov     si,sp                   ; ds:si = address of params
 01BC  CD 13			    int     13h                     ; perform the read

 01BE  83 C4 10			    add     sp, 10h                 ; clean the stack and return
 01C1  66| 61			    popad
 01C3  C3			    ret
 01C4				ReadDisk ENDP

				;;;;;;;;;;;;;;;;;;;;
				; Error Routines (these are jump points that never return)

 01C4				PartitionNotFoundError:
 01C4  B0 50			    mov     al, "P"        
 01C6  EB 06			    jmp     PrintError
 01C8				FileNotFoundError:
 01C8  B0 46			    mov     al, "F"
 01CA  EB 02			    jmp     PrintError
 01CC				HWUnsupportedError:
 01CC  B0 48			    mov     al, "H"
 01CE				PrintError:
 01CE  BB 0007			    mov     bx, 07h                 ; normal attribute
 01D1  B4 0E			    mov     ah, 0eh                 ; default print 1 char
 01D3  B9 0006			    mov     cx, 6
 01D6  BE 01E6 R		    mov     si, offset ErrorMsg
 01D9  CD 10			    int     10h
 01DB				printnext:
 01DB  AC			    lodsb
 01DC  0A C0			    or      al, al
 01DE  74 04			    jz      infloop
 01E0  CD 10			    int     10h
 01E2  EB F7			    jmp     printnext
 01E4				infloop:
 01E4  EB FE			    jmp     infloop

				;;;;;;;;;;;;;;;;;;;;
				; String Constants

 01E6 20 45 72 72 6F 72		    ErrorMsg    DB  " Error "
       20
 01ED 53 49 4E 47 4C 44		    Stage2File  DB  "SINGLDR    "   ; spaces are important for FAT file name determination.  Compare all 11 bytes!
       52 20 20 20 20
 01F8  00			    DB  0
				        
				;;;;;;;;;;;;;;;;;;;;
				; Boot Sector Signature

				    ORG     510
 01FE  AA55			    DW      0AA55h
				    
				end start
Microsoft (R) Macro Assembler Version 8.00.50727.762	    02/23/22 18:37:45
Fat16_BS.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_TEXT  . . . . . . . . . . . . .	16 Bit	 0200	  Word	  Public  'CODE'	
_DATA  . . . . . . . . . . . . .	16 Bit	 0000	  Word	  Public  'DATA'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalcNextCluster  . . . . . . . .	P Near	 0160	  _TEXT	Length= 0023 Public
ReadCluster  . . . . . . . . . .	P Near	 0183	  _TEXT	Length= 0024 Public
ReadDisk . . . . . . . . . . . .	P Near	 01A7	  _TEXT	Length= 001D Public


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0001h	 
@code  . . . . . . . . . . . . .	Text   	 DGROUP
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
BPB  . . . . . . . . . . . . . .	L Near	 0003	  _TEXT	
BSReserved1  . . . . . . . . . .	Byte	 0025	  _TEXT	
BigTotalSecs . . . . . . . . . .	DWord	 0020	  _TEXT	
BootDrv  . . . . . . . . . . . .	Byte	 0024	  _TEXT	
BootSecOrigin  . . . . . . . . .	Number	 7C00h	 
BytesPerSector . . . . . . . . .	Word	 000B	  _TEXT	
CompareDirEntries  . . . . . . .	L Near	 010B	  _TEXT	
DoRead . . . . . . . . . . . . .	L Near	 0132	  _TEXT	
EndOfClusterMarker . . . . . . .	Number	 FFF8h	 
ErrorMsg . . . . . . . . . . . .	Byte	 01E6	  _TEXT	
ExtBootSig . . . . . . . . . . .	Byte	 0026	  _TEXT	
FatId  . . . . . . . . . . . . .	Byte	 0036	  _TEXT	
FileNotFoundError  . . . . . . .	L Near	 01C8	  _TEXT	
FindFat16Partition . . . . . . .	L Near	 008E	  _TEXT	
FirstDataSector  . . . . . . . .	Text   	 OemName
FoundFat16Partition  . . . . . .	L Near	 009E	  _TEXT	
FoundMatch . . . . . . . . . . .	L Near	 0129	  _TEXT	
HWUnsupportedError . . . . . . .	L Near	 01CC	  _TEXT	
HiddenSecs . . . . . . . . . . .	DWord	 001C	  _TEXT	
LBAStart . . . . . . . . . . . .	Text   	 SerialNum
LoadNextSector . . . . . . . . .	L Near	 00FC	  _TEXT	
MediaByte  . . . . . . . . . . .	Byte	 0015	  _TEXT	
NumFatSecs . . . . . . . . . . .	Word	 0016	  _TEXT	
NumFats  . . . . . . . . . . . .	Byte	 0010	  _TEXT	
NumHeads . . . . . . . . . . . .	Word	 001A	  _TEXT	
OemName  . . . . . . . . . . . .	Word	 0003	  _TEXT	
PartitionNotFoundError . . . . .	L Near	 01C4	  _TEXT	
PrintError . . . . . . . . . . .	L Near	 01CE	  _TEXT	
ReservedSecs . . . . . . . . . .	Word	 000E	  _TEXT	
RootDirEntries . . . . . . . . .	Word	 0011	  _TEXT	
RootDirSectors . . . . . . . . .	Text   	 OemName+2
RootDirStart . . . . . . . . . .	Text   	 OemName+4
SecPerTrack  . . . . . . . . . .	Word	 0018	  _TEXT	
SecsPerClust . . . . . . . . . .	Byte	 000D	  _TEXT	
SerialNum  . . . . . . . . . . .	DWord	 0027	  _TEXT	
Stage2File . . . . . . . . . . .	Byte	 01ED	  _TEXT	
Step1  . . . . . . . . . . . . .	L Near	 0043	  _TEXT	
Step2  . . . . . . . . . . . . .	L Near	 0050	  _TEXT	
Step3  . . . . . . . . . . . . .	L Near	 0055	  _TEXT	
Step4  . . . . . . . . . . . . .	L Near	 0059	  _TEXT	
Step5  . . . . . . . . . . . . .	L Near	 0074	  _TEXT	
Step6  . . . . . . . . . . . . .	L Near	 00A7	  _TEXT	
Step7  . . . . . . . . . . . . .	L Near	 00E8	  _TEXT	
Step8  . . . . . . . . . . . . .	L Near	 012D	  _TEXT	
Step9  . . . . . . . . . . . . .	L Near	 0149	  _TEXT	
TotalSectors . . . . . . . . . .	Word	 0013	  _TEXT	
VolumeLabel  . . . . . . . . . .	Byte	 002B	  _TEXT	
bootloader . . . . . . . . . . .	L Near	 003E	  _TEXT	
infloop  . . . . . . . . . . . .	L Near	 01E4	  _TEXT	
printnext  . . . . . . . . . . .	L Near	 01DB	  _TEXT	
start  . . . . . . . . . . . . .	L Near	 0000	  _TEXT	

	   0 Warnings
	   0 Errors
