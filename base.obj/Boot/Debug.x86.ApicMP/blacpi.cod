; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	C:\Users\cc\source\repos\Singularity-OS\base\Boot\SingLdrPc\blacpi.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?BlAcpiRsdp@@3PAU_ACPI_RSDP@@A			; BlAcpiRsdp
PUBLIC	?BlAcpiRsdpAddress@@3PAXA			; BlAcpiRsdpAddress
PUBLIC	?BlAcpiMadt@@3PAU_ACPI_MADT@@A			; BlAcpiMadt
PUBLIC	?BlAcpiFadt@@3PAU_ACPI_FADT@@A			; BlAcpiFadt
PUBLIC	?BlAcpiSrat@@3PAU_ACPI_SRAT@@A			; BlAcpiSrat
PUBLIC	?BlAcpiRsdt@@3PAU_ACPI_RSDT@@A			; BlAcpiRsdt
PUBLIC	?BlAcpiNumberOfProcessors@@3KA			; BlAcpiNumberOfProcessors
_BSS	SEGMENT
?BlAcpiRsdp@@3PAU_ACPI_RSDP@@A DD 01H DUP (?)		; BlAcpiRsdp
?BlAcpiRsdpAddress@@3PAXA DD 01H DUP (?)		; BlAcpiRsdpAddress
?BlAcpiMadt@@3PAU_ACPI_MADT@@A DD 01H DUP (?)		; BlAcpiMadt
?BlAcpiFadt@@3PAU_ACPI_FADT@@A DD 01H DUP (?)		; BlAcpiFadt
?BlAcpiSrat@@3PAU_ACPI_SRAT@@A DD 01H DUP (?)		; BlAcpiSrat
?BlAcpiRsdt@@3PAU_ACPI_RSDT@@A DD 01H DUP (?)		; BlAcpiRsdt
?BlAcpiNumberOfProcessors@@3KA DD 01H DUP (?)		; BlAcpiNumberOfProcessors
_BSS	ENDS
PUBLIC	?BlAcpiLocateRsdp@@YIPAU_ACPI_RSDP@@XZ		; BlAcpiLocateRsdp
EXTRN	?BlMmExtendedBiosDataArea@@3PAXA:DWORD		; BlMmExtendedBiosDataArea
EXTRN	?BlRtlComputeChecksum8@@YIEPBXK@Z:PROC		; BlRtlComputeChecksum8
; Function compile flags: /Odsp
; File c:\users\cc\source\repos\singularity-os\base\boot\singldrpc\blacpi.cpp
;	COMDAT ?BlAcpiLocateRsdp@@YIPAU_ACPI_RSDP@@XZ
_TEXT	SEGMENT
_Rsdp$ = -12						; size = 4
_End$ = -8						; size = 4
_Start$ = -4						; size = 4
?BlAcpiLocateRsdp@@YIPAU_ACPI_RSDP@@XZ PROC		; BlAcpiLocateRsdp, COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 236  :     ULONG_PTR End;
; 237  :     PACPI_RSDP Rsdp;
; 238  :     ULONG_PTR Start;
; 239  : 
; 240  :     Start = 0xE0000;

  00006	c7 45 fc 00 00
	0e 00		 mov	 DWORD PTR _Start$[ebp], 917504 ; 000e0000H

; 241  :     End = 0x100000;

  0000d	c7 45 f8 00 00
	10 00		 mov	 DWORD PTR _End$[ebp], 1048576 ; 00100000H
$LN6@BlAcpiLoca:

; 242  : 
; 243  :     while (Start < End) {

  00014	8b 45 fc	 mov	 eax, DWORD PTR _Start$[ebp]
  00017	3b 45 f8	 cmp	 eax, DWORD PTR _End$[ebp]
  0001a	0f 83 8d 00 00
	00		 jae	 $LN5@BlAcpiLoca

; 244  : 
; 245  :         Rsdp = (PACPI_RSDP) Start;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _Start$[ebp]
  00023	89 45 f4	 mov	 DWORD PTR _Rsdp$[ebp], eax

; 246  : 
; 247  :         if ((Rsdp->Signature[0] == 'R') &&
; 248  :             (Rsdp->Signature[1] == 'S') &&
; 249  :             (Rsdp->Signature[2] == 'D') &&
; 250  :             (Rsdp->Signature[3] == ' ') &&
; 251  :             (Rsdp->Signature[4] == 'P') &&
; 252  :             (Rsdp->Signature[5] == 'T') &&
; 253  :             (Rsdp->Signature[6] == 'R') &&
; 254  :             (Rsdp->Signature[7] == ' ') &&
; 255  :             (BlRtlComputeChecksum8(Rsdp, 20) == 0)
; 256  :             ) {

  00026	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  00029	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0002c	83 f8 52	 cmp	 eax, 82			; 00000052H
  0002f	75 6e		 jne	 SHORT $LN4@BlAcpiLoca
  00031	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  00034	0f be 40 01	 movsx	 eax, BYTE PTR [eax+1]
  00038	83 f8 53	 cmp	 eax, 83			; 00000053H
  0003b	75 62		 jne	 SHORT $LN4@BlAcpiLoca
  0003d	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  00040	0f be 40 02	 movsx	 eax, BYTE PTR [eax+2]
  00044	83 f8 44	 cmp	 eax, 68			; 00000044H
  00047	75 56		 jne	 SHORT $LN4@BlAcpiLoca
  00049	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  0004c	0f be 40 03	 movsx	 eax, BYTE PTR [eax+3]
  00050	83 f8 20	 cmp	 eax, 32			; 00000020H
  00053	75 4a		 jne	 SHORT $LN4@BlAcpiLoca
  00055	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  00058	0f be 40 04	 movsx	 eax, BYTE PTR [eax+4]
  0005c	83 f8 50	 cmp	 eax, 80			; 00000050H
  0005f	75 3e		 jne	 SHORT $LN4@BlAcpiLoca
  00061	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  00064	0f be 40 05	 movsx	 eax, BYTE PTR [eax+5]
  00068	83 f8 54	 cmp	 eax, 84			; 00000054H
  0006b	75 32		 jne	 SHORT $LN4@BlAcpiLoca
  0006d	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  00070	0f be 40 06	 movsx	 eax, BYTE PTR [eax+6]
  00074	83 f8 52	 cmp	 eax, 82			; 00000052H
  00077	75 26		 jne	 SHORT $LN4@BlAcpiLoca
  00079	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  0007c	0f be 40 07	 movsx	 eax, BYTE PTR [eax+7]
  00080	83 f8 20	 cmp	 eax, 32			; 00000020H
  00083	75 1a		 jne	 SHORT $LN4@BlAcpiLoca
  00085	6a 14		 push	 20			; 00000014H
  00087	5a		 pop	 edx
  00088	8b 4d f4	 mov	 ecx, DWORD PTR _Rsdp$[ebp]
  0008b	e8 00 00 00 00	 call	 ?BlRtlComputeChecksum8@@YIEPBXK@Z ; BlRtlComputeChecksum8
  00090	0f b6 c0	 movzx	 eax, al
  00093	85 c0		 test	 eax, eax
  00095	75 08		 jne	 SHORT $LN4@BlAcpiLoca

; 257  : 
; 258  :             return Rsdp;

  00097	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  0009a	e9 b9 00 00 00	 jmp	 $LN7@BlAcpiLoca
$LN4@BlAcpiLoca:

; 259  :         }
; 260  : 
; 261  :         Start += 0x10;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _Start$[ebp]
  000a2	83 c0 10	 add	 eax, 16			; 00000010H
  000a5	89 45 fc	 mov	 DWORD PTR _Start$[ebp], eax

; 262  :     }

  000a8	e9 67 ff ff ff	 jmp	 $LN6@BlAcpiLoca
$LN5@BlAcpiLoca:

; 263  : 
; 264  :     Start = (ULONG_PTR) BlMmExtendedBiosDataArea;

  000ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlMmExtendedBiosDataArea@@3PAXA ; BlMmExtendedBiosDataArea
  000b2	89 45 fc	 mov	 DWORD PTR _Start$[ebp], eax

; 265  :     End = Start + 0x10000;

  000b5	8b 45 fc	 mov	 eax, DWORD PTR _Start$[ebp]
  000b8	05 00 00 01 00	 add	 eax, 65536		; 00010000H
  000bd	89 45 f8	 mov	 DWORD PTR _End$[ebp], eax
$LN3@BlAcpiLoca:

; 266  : 
; 267  :     while (Start < End) {

  000c0	8b 45 fc	 mov	 eax, DWORD PTR _Start$[ebp]
  000c3	3b 45 f8	 cmp	 eax, DWORD PTR _End$[ebp]
  000c6	0f 83 8a 00 00
	00		 jae	 $LN2@BlAcpiLoca

; 268  : 
; 269  :         Rsdp = (PACPI_RSDP) Start;

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _Start$[ebp]
  000cf	89 45 f4	 mov	 DWORD PTR _Rsdp$[ebp], eax

; 270  : 
; 271  :         if ((Rsdp->Signature[0] == 'R') &&
; 272  :             (Rsdp->Signature[1] == 'S') &&
; 273  :             (Rsdp->Signature[2] == 'D') &&
; 274  :             (Rsdp->Signature[3] == ' ') &&
; 275  :             (Rsdp->Signature[4] == 'P') &&
; 276  :             (Rsdp->Signature[5] == 'T') &&
; 277  :             (Rsdp->Signature[6] == 'R') &&
; 278  :             (Rsdp->Signature[7] == ' ') &&
; 279  :             (BlRtlComputeChecksum8(Rsdp, 20) == 0)
; 280  :             ) {

  000d2	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  000d5	0f be 00	 movsx	 eax, BYTE PTR [eax]
  000d8	83 f8 52	 cmp	 eax, 82			; 00000052H
  000db	75 6b		 jne	 SHORT $LN1@BlAcpiLoca
  000dd	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  000e0	0f be 40 01	 movsx	 eax, BYTE PTR [eax+1]
  000e4	83 f8 53	 cmp	 eax, 83			; 00000053H
  000e7	75 5f		 jne	 SHORT $LN1@BlAcpiLoca
  000e9	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  000ec	0f be 40 02	 movsx	 eax, BYTE PTR [eax+2]
  000f0	83 f8 44	 cmp	 eax, 68			; 00000044H
  000f3	75 53		 jne	 SHORT $LN1@BlAcpiLoca
  000f5	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  000f8	0f be 40 03	 movsx	 eax, BYTE PTR [eax+3]
  000fc	83 f8 20	 cmp	 eax, 32			; 00000020H
  000ff	75 47		 jne	 SHORT $LN1@BlAcpiLoca
  00101	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  00104	0f be 40 04	 movsx	 eax, BYTE PTR [eax+4]
  00108	83 f8 50	 cmp	 eax, 80			; 00000050H
  0010b	75 3b		 jne	 SHORT $LN1@BlAcpiLoca
  0010d	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  00110	0f be 40 05	 movsx	 eax, BYTE PTR [eax+5]
  00114	83 f8 54	 cmp	 eax, 84			; 00000054H
  00117	75 2f		 jne	 SHORT $LN1@BlAcpiLoca
  00119	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  0011c	0f be 40 06	 movsx	 eax, BYTE PTR [eax+6]
  00120	83 f8 52	 cmp	 eax, 82			; 00000052H
  00123	75 23		 jne	 SHORT $LN1@BlAcpiLoca
  00125	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  00128	0f be 40 07	 movsx	 eax, BYTE PTR [eax+7]
  0012c	83 f8 20	 cmp	 eax, 32			; 00000020H
  0012f	75 17		 jne	 SHORT $LN1@BlAcpiLoca
  00131	6a 14		 push	 20			; 00000014H
  00133	5a		 pop	 edx
  00134	8b 4d f4	 mov	 ecx, DWORD PTR _Rsdp$[ebp]
  00137	e8 00 00 00 00	 call	 ?BlRtlComputeChecksum8@@YIEPBXK@Z ; BlRtlComputeChecksum8
  0013c	0f b6 c0	 movzx	 eax, al
  0013f	85 c0		 test	 eax, eax
  00141	75 05		 jne	 SHORT $LN1@BlAcpiLoca

; 281  : 
; 282  :             return Rsdp;

  00143	8b 45 f4	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  00146	eb 10		 jmp	 SHORT $LN7@BlAcpiLoca
$LN1@BlAcpiLoca:

; 283  :         }
; 284  : 
; 285  :         Start += 0x10;

  00148	8b 45 fc	 mov	 eax, DWORD PTR _Start$[ebp]
  0014b	83 c0 10	 add	 eax, 16			; 00000010H
  0014e	89 45 fc	 mov	 DWORD PTR _Start$[ebp], eax

; 286  :     }

  00151	e9 6a ff ff ff	 jmp	 $LN3@BlAcpiLoca
$LN2@BlAcpiLoca:

; 287  : 
; 288  :     return NULL;

  00156	33 c0		 xor	 eax, eax
$LN7@BlAcpiLoca:

; 289  : }

  00158	c9		 leave
  00159	c3		 ret	 0
?BlAcpiLocateRsdp@@YIPAU_ACPI_RSDP@@XZ ENDP		; BlAcpiLocateRsdp
_TEXT	ENDS
PUBLIC	?BlAcpiLocateRsdt@@YIPAU_ACPI_RSDT@@PAU_ACPI_RSDP@@@Z ; BlAcpiLocateRsdt
; Function compile flags: /Odsp
;	COMDAT ?BlAcpiLocateRsdt@@YIPAU_ACPI_RSDT@@PAU_ACPI_RSDP@@@Z
_TEXT	SEGMENT
_Rsdp$ = -8						; size = 4
_Rsdt$ = -4						; size = 4
?BlAcpiLocateRsdt@@YIPAU_ACPI_RSDT@@PAU_ACPI_RSDP@@@Z PROC ; BlAcpiLocateRsdt, COMDAT
; _Rsdp$ = ecx

; 313  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _Rsdp$[ebp], ecx

; 314  :     PACPI_RSDT Rsdt;
; 315  : 
; 316  :     Rsdt = (PACPI_RSDT) (ULONG_PTR) Rsdp->RsdtAddress;

  00008	8b 45 f8	 mov	 eax, DWORD PTR _Rsdp$[ebp]
  0000b	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0000e	89 45 fc	 mov	 DWORD PTR _Rsdt$[ebp], eax

; 317  : 
; 318  :     if (Rsdt == NULL) {

  00011	83 7d fc 00	 cmp	 DWORD PTR _Rsdt$[ebp], 0
  00015	75 04		 jne	 SHORT $LN2@BlAcpiLoca@2

; 319  : 
; 320  :         return NULL;

  00017	33 c0		 xor	 eax, eax
  00019	eb 54		 jmp	 SHORT $LN3@BlAcpiLoca@2
$LN2@BlAcpiLoca@2:

; 321  :     }
; 322  : 
; 323  :     if ((Rsdt->Signature[0] == 'R') &&
; 324  :         (Rsdt->Signature[1] == 'S') &&
; 325  :         (Rsdt->Signature[2] == 'D') &&
; 326  :         (Rsdt->Signature[3] == 'T') &&
; 327  :         (Rsdt->Length >= sizeof(ACPI_RSDT)) &&
; 328  :         (BlRtlComputeChecksum8(Rsdt, Rsdt->Length) == 0)) {

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _Rsdt$[ebp]
  0001e	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00021	83 f8 52	 cmp	 eax, 82			; 00000052H
  00024	75 47		 jne	 SHORT $LN1@BlAcpiLoca@2
  00026	8b 45 fc	 mov	 eax, DWORD PTR _Rsdt$[ebp]
  00029	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  0002d	83 f8 53	 cmp	 eax, 83			; 00000053H
  00030	75 3b		 jne	 SHORT $LN1@BlAcpiLoca@2
  00032	8b 45 fc	 mov	 eax, DWORD PTR _Rsdt$[ebp]
  00035	0f b6 40 02	 movzx	 eax, BYTE PTR [eax+2]
  00039	83 f8 44	 cmp	 eax, 68			; 00000044H
  0003c	75 2f		 jne	 SHORT $LN1@BlAcpiLoca@2
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _Rsdt$[ebp]
  00041	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  00045	83 f8 54	 cmp	 eax, 84			; 00000054H
  00048	75 23		 jne	 SHORT $LN1@BlAcpiLoca@2
  0004a	8b 45 fc	 mov	 eax, DWORD PTR _Rsdt$[ebp]
  0004d	83 78 04 24	 cmp	 DWORD PTR [eax+4], 36	; 00000024H
  00051	72 1a		 jb	 SHORT $LN1@BlAcpiLoca@2
  00053	8b 45 fc	 mov	 eax, DWORD PTR _Rsdt$[ebp]
  00056	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _Rsdt$[ebp]
  0005c	e8 00 00 00 00	 call	 ?BlRtlComputeChecksum8@@YIEPBXK@Z ; BlRtlComputeChecksum8
  00061	0f b6 c0	 movzx	 eax, al
  00064	85 c0		 test	 eax, eax
  00066	75 05		 jne	 SHORT $LN1@BlAcpiLoca@2

; 329  : 
; 330  :         return Rsdt;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _Rsdt$[ebp]
  0006b	eb 02		 jmp	 SHORT $LN3@BlAcpiLoca@2
$LN1@BlAcpiLoca@2:

; 331  :     }
; 332  : 
; 333  :     return NULL;

  0006d	33 c0		 xor	 eax, eax
$LN3@BlAcpiLoca@2:

; 334  : }

  0006f	c9		 leave
  00070	c3		 ret	 0
?BlAcpiLocateRsdt@@YIPAU_ACPI_RSDT@@PAU_ACPI_RSDP@@@Z ENDP ; BlAcpiLocateRsdt
_TEXT	ENDS
PUBLIC	?BlAcpiLocateMadt@@YIPAU_ACPI_MADT@@PAU_ACPI_RSDT@@@Z ; BlAcpiLocateMadt
; Function compile flags: /Odsp
;	COMDAT ?BlAcpiLocateMadt@@YIPAU_ACPI_MADT@@PAU_ACPI_RSDT@@@Z
_TEXT	SEGMENT
_Rsdt$ = -16						; size = 4
_NumberOfTables$ = -12					; size = 4
_Madt$ = -8						; size = 4
_Index$ = -4						; size = 4
?BlAcpiLocateMadt@@YIPAU_ACPI_MADT@@PAU_ACPI_RSDT@@@Z PROC ; BlAcpiLocateMadt, COMDAT
; _Rsdt$ = ecx

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _Rsdt$[ebp], ecx

; 359  :     UINT32 Index;
; 360  :     PACPI_MADT Madt;
; 361  :     UINT32 NumberOfTables;
; 362  : 
; 363  :     NumberOfTables = (Rsdt->Length - FIELD_OFFSET(ACPI_RSDT, Entry)) / sizeof(Rsdt->Entry[0]);

  00009	8b 45 f0	 mov	 eax, DWORD PTR _Rsdt$[ebp]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	83 e8 24	 sub	 eax, 36			; 00000024H
  00012	c1 e8 02	 shr	 eax, 2
  00015	89 45 f4	 mov	 DWORD PTR _NumberOfTables$[ebp], eax

; 364  : 
; 365  :     for (Index = 0; Index < NumberOfTables; Index += 1) {

  00018	83 65 fc 00	 and	 DWORD PTR _Index$[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN4@BlAcpiLoca@3
$LN3@BlAcpiLoca@3:
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  00021	40		 inc	 eax
  00022	89 45 fc	 mov	 DWORD PTR _Index$[ebp], eax
$LN4@BlAcpiLoca@3:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  00028	3b 45 f4	 cmp	 eax, DWORD PTR _NumberOfTables$[ebp]
  0002b	73 61		 jae	 SHORT $LN2@BlAcpiLoca@3

; 366  : 
; 367  :         Madt = (PACPI_MADT) (ULONG_PTR) Rsdt->Entry[Index];

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  00030	8b 4d f0	 mov	 ecx, DWORD PTR _Rsdt$[ebp]
  00033	8b 44 81 24	 mov	 eax, DWORD PTR [ecx+eax*4+36]
  00037	89 45 f8	 mov	 DWORD PTR _Madt$[ebp], eax

; 368  : 
; 369  :         if ((Madt->Signature[0] == 'A') &&
; 370  :             (Madt->Signature[1] == 'P') &&
; 371  :             (Madt->Signature[2] == 'I') &&
; 372  :             (Madt->Signature[3] == 'C') &&
; 373  :             (Madt->Length >= sizeof(ACPI_MADT)) &&
; 374  :             (BlRtlComputeChecksum8(Madt, Madt->Length) == 0)) {

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _Madt$[ebp]
  0003d	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00040	83 f8 41	 cmp	 eax, 65			; 00000041H
  00043	75 47		 jne	 SHORT $LN1@BlAcpiLoca@3
  00045	8b 45 f8	 mov	 eax, DWORD PTR _Madt$[ebp]
  00048	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  0004c	83 f8 50	 cmp	 eax, 80			; 00000050H
  0004f	75 3b		 jne	 SHORT $LN1@BlAcpiLoca@3
  00051	8b 45 f8	 mov	 eax, DWORD PTR _Madt$[ebp]
  00054	0f b6 40 02	 movzx	 eax, BYTE PTR [eax+2]
  00058	83 f8 49	 cmp	 eax, 73			; 00000049H
  0005b	75 2f		 jne	 SHORT $LN1@BlAcpiLoca@3
  0005d	8b 45 f8	 mov	 eax, DWORD PTR _Madt$[ebp]
  00060	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  00064	83 f8 43	 cmp	 eax, 67			; 00000043H
  00067	75 23		 jne	 SHORT $LN1@BlAcpiLoca@3
  00069	8b 45 f8	 mov	 eax, DWORD PTR _Madt$[ebp]
  0006c	83 78 04 2c	 cmp	 DWORD PTR [eax+4], 44	; 0000002cH
  00070	72 1a		 jb	 SHORT $LN1@BlAcpiLoca@3
  00072	8b 45 f8	 mov	 eax, DWORD PTR _Madt$[ebp]
  00075	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _Madt$[ebp]
  0007b	e8 00 00 00 00	 call	 ?BlRtlComputeChecksum8@@YIEPBXK@Z ; BlRtlComputeChecksum8
  00080	0f b6 c0	 movzx	 eax, al
  00083	85 c0		 test	 eax, eax
  00085	75 05		 jne	 SHORT $LN1@BlAcpiLoca@3

; 375  : 
; 376  :             return Madt;

  00087	8b 45 f8	 mov	 eax, DWORD PTR _Madt$[ebp]
  0008a	eb 04		 jmp	 SHORT $LN5@BlAcpiLoca@3
$LN1@BlAcpiLoca@3:

; 377  :         }
; 378  :     }

  0008c	eb 90		 jmp	 SHORT $LN3@BlAcpiLoca@3
$LN2@BlAcpiLoca@3:

; 379  : 
; 380  :     return NULL;

  0008e	33 c0		 xor	 eax, eax
$LN5@BlAcpiLoca@3:

; 381  : }

  00090	c9		 leave
  00091	c3		 ret	 0
?BlAcpiLocateMadt@@YIPAU_ACPI_MADT@@PAU_ACPI_RSDT@@@Z ENDP ; BlAcpiLocateMadt
_TEXT	ENDS
PUBLIC	?BlAcpiLocateSrat@@YIPAU_ACPI_SRAT@@PAU_ACPI_RSDT@@@Z ; BlAcpiLocateSrat
; Function compile flags: /Odsp
;	COMDAT ?BlAcpiLocateSrat@@YIPAU_ACPI_SRAT@@PAU_ACPI_RSDT@@@Z
_TEXT	SEGMENT
_Rsdt$ = -16						; size = 4
_Srat$ = -12						; size = 4
_NumberOfTables$ = -8					; size = 4
_Index$ = -4						; size = 4
?BlAcpiLocateSrat@@YIPAU_ACPI_SRAT@@PAU_ACPI_RSDT@@@Z PROC ; BlAcpiLocateSrat, COMDAT
; _Rsdt$ = ecx

; 405  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _Rsdt$[ebp], ecx

; 406  :     UINT32 Index;
; 407  :     PACPI_SRAT Srat;
; 408  :     UINT32 NumberOfTables;
; 409  : 
; 410  :     NumberOfTables = (Rsdt->Length - FIELD_OFFSET(ACPI_RSDT, Entry)) / sizeof(Rsdt->Entry[0]);

  00009	8b 45 f0	 mov	 eax, DWORD PTR _Rsdt$[ebp]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	83 e8 24	 sub	 eax, 36			; 00000024H
  00012	c1 e8 02	 shr	 eax, 2
  00015	89 45 f8	 mov	 DWORD PTR _NumberOfTables$[ebp], eax

; 411  : 
; 412  :     for (Index = 0; Index < NumberOfTables; Index += 1) {

  00018	83 65 fc 00	 and	 DWORD PTR _Index$[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN4@BlAcpiLoca@4
$LN3@BlAcpiLoca@4:
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  00021	40		 inc	 eax
  00022	89 45 fc	 mov	 DWORD PTR _Index$[ebp], eax
$LN4@BlAcpiLoca@4:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  00028	3b 45 f8	 cmp	 eax, DWORD PTR _NumberOfTables$[ebp]
  0002b	73 61		 jae	 SHORT $LN2@BlAcpiLoca@4

; 413  : 
; 414  :         Srat = (PACPI_SRAT) (ULONG_PTR) Rsdt->Entry[Index];

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  00030	8b 4d f0	 mov	 ecx, DWORD PTR _Rsdt$[ebp]
  00033	8b 44 81 24	 mov	 eax, DWORD PTR [ecx+eax*4+36]
  00037	89 45 f4	 mov	 DWORD PTR _Srat$[ebp], eax

; 415  : 
; 416  :         if ((Srat->Signature[0] == 'S') &&
; 417  :             (Srat->Signature[1] == 'R') &&
; 418  :             (Srat->Signature[2] == 'A') &&
; 419  :             (Srat->Signature[3] == 'T') &&
; 420  :             (Srat->Length >= sizeof(ACPI_SRAT)) &&
; 421  :             (BlRtlComputeChecksum8(Srat, Srat->Length) == 0)) {

  0003a	8b 45 f4	 mov	 eax, DWORD PTR _Srat$[ebp]
  0003d	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00040	83 f8 53	 cmp	 eax, 83			; 00000053H
  00043	75 47		 jne	 SHORT $LN1@BlAcpiLoca@4
  00045	8b 45 f4	 mov	 eax, DWORD PTR _Srat$[ebp]
  00048	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  0004c	83 f8 52	 cmp	 eax, 82			; 00000052H
  0004f	75 3b		 jne	 SHORT $LN1@BlAcpiLoca@4
  00051	8b 45 f4	 mov	 eax, DWORD PTR _Srat$[ebp]
  00054	0f b6 40 02	 movzx	 eax, BYTE PTR [eax+2]
  00058	83 f8 41	 cmp	 eax, 65			; 00000041H
  0005b	75 2f		 jne	 SHORT $LN1@BlAcpiLoca@4
  0005d	8b 45 f4	 mov	 eax, DWORD PTR _Srat$[ebp]
  00060	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  00064	83 f8 54	 cmp	 eax, 84			; 00000054H
  00067	75 23		 jne	 SHORT $LN1@BlAcpiLoca@4
  00069	8b 45 f4	 mov	 eax, DWORD PTR _Srat$[ebp]
  0006c	83 78 04 30	 cmp	 DWORD PTR [eax+4], 48	; 00000030H
  00070	72 1a		 jb	 SHORT $LN1@BlAcpiLoca@4
  00072	8b 45 f4	 mov	 eax, DWORD PTR _Srat$[ebp]
  00075	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00078	8b 4d f4	 mov	 ecx, DWORD PTR _Srat$[ebp]
  0007b	e8 00 00 00 00	 call	 ?BlRtlComputeChecksum8@@YIEPBXK@Z ; BlRtlComputeChecksum8
  00080	0f b6 c0	 movzx	 eax, al
  00083	85 c0		 test	 eax, eax
  00085	75 05		 jne	 SHORT $LN1@BlAcpiLoca@4

; 422  : #if ACPI_VERBOSE
; 423  :                 BlRtlPrintf("ACPI: Found SRAT Table\n");
; 424  : #endif
; 425  : 
; 426  :             return Srat;

  00087	8b 45 f4	 mov	 eax, DWORD PTR _Srat$[ebp]
  0008a	eb 04		 jmp	 SHORT $LN5@BlAcpiLoca@4
$LN1@BlAcpiLoca@4:

; 427  :         }
; 428  :     }

  0008c	eb 90		 jmp	 SHORT $LN3@BlAcpiLoca@4
$LN2@BlAcpiLoca@4:

; 429  : 
; 430  :     return NULL;

  0008e	33 c0		 xor	 eax, eax
$LN5@BlAcpiLoca@4:

; 431  : }

  00090	c9		 leave
  00091	c3		 ret	 0
?BlAcpiLocateSrat@@YIPAU_ACPI_SRAT@@PAU_ACPI_RSDT@@@Z ENDP ; BlAcpiLocateSrat
_TEXT	ENDS
PUBLIC	??_C@_0BB@JLDALMDP@ACPI?3?5No?5Srat?$DP?$DP?6?$AA@ ; `string'
PUBLIC	?BlAcpiDumpSratEntries@@YIXXZ			; BlAcpiDumpSratEntries
EXTRN	?BlRtlPrintf@@YAEPBDZZ:PROC			; BlRtlPrintf
;	COMDAT ??_C@_0BB@JLDALMDP@ACPI?3?5No?5Srat?$DP?$DP?6?$AA@
CONST	SEGMENT
??_C@_0BB@JLDALMDP@ACPI?3?5No?5Srat?$DP?$DP?6?$AA@ DB 'ACPI: No Srat??', 0aH
	DB	00H						; `string'
; Function compile flags: /Odsp
CONST	ENDS
;	COMDAT ?BlAcpiDumpSratEntries@@YIXXZ
_TEXT	SEGMENT
_ProcAffinityEntry$ = -28				; size = 4
_MemAffinityEntry$ = -24				; size = 4
_Next$ = -20						; size = 4
_hbits$ = -16						; size = 4
_Entry$ = -12						; size = 4
_Limit$ = -8						; size = 4
_totalbits$ = -4					; size = 4
?BlAcpiDumpSratEntries@@YIXXZ PROC			; BlAcpiDumpSratEntries, COMDAT

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 444  :     PACPI_SRAT_ENTRY Entry;
; 445  :     PCHAR Limit;
; 446  :     PACPI_SRAT_PROC_AFFINITY_ENTRY ProcAffinityEntry;
; 447  :     PACPI_SRAT_MEM_AFFINITY_ENTRY MemAffinityEntry;
; 448  :     PCHAR Next;
; 449  :     UINT32 hbits;
; 450  :     UINT32 totalbits;
; 451  : 
; 452  :     if (BlAcpiSrat == NULL) {

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlAcpiSrat@@3PAU_ACPI_SRAT@@A, 0 ; BlAcpiSrat
  0000d	75 10		 jne	 SHORT $LN6@BlAcpiDump

; 453  :         BlRtlPrintf("ACPI: No Srat??\n");

  0000f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@JLDALMDP@ACPI?3?5No?5Srat?$DP?$DP?6?$AA@
  00014	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00019	59		 pop	 ecx

; 454  :         return;

  0001a	e9 bc 00 00 00	 jmp	 $LN7@BlAcpiDump
$LN6@BlAcpiDump:

; 455  :     }
; 456  : #if ACPI_VERBOSE
; 457  :     BlRtlPrintf("SRAT:\n");
; 458  : #endif
; 459  : 
; 460  :     Next = (PCHAR) &BlAcpiSrat->SratStructures[0];

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiSrat@@3PAU_ACPI_SRAT@@A ; BlAcpiSrat
  00024	83 c0 30	 add	 eax, 48			; 00000030H
  00027	89 45 ec	 mov	 DWORD PTR _Next$[ebp], eax

; 461  :     Limit = ((PCHAR) BlAcpiSrat) + BlAcpiSrat->Length;

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiSrat@@3PAU_ACPI_SRAT@@A ; BlAcpiSrat
  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlAcpiSrat@@3PAU_ACPI_SRAT@@A ; BlAcpiSrat
  00035	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00038	89 4d f8	 mov	 DWORD PTR _Limit$[ebp], ecx
$LN5@BlAcpiDump:

; 462  : 
; 463  :     while (Next < Limit) {

  0003b	8b 45 ec	 mov	 eax, DWORD PTR _Next$[ebp]
  0003e	3b 45 f8	 cmp	 eax, DWORD PTR _Limit$[ebp]
  00041	0f 83 94 00 00
	00		 jae	 $LN7@BlAcpiDump

; 464  : 
; 465  :         Entry = (PACPI_SRAT_ENTRY) Next;

  00047	8b 45 ec	 mov	 eax, DWORD PTR _Next$[ebp]
  0004a	89 45 f4	 mov	 DWORD PTR _Entry$[ebp], eax

; 466  : 
; 467  :         if ((Entry->Type == ACPI_SRAT_TYPE_PROC_AFFINITY_ENTRY) &&
; 468  :             (Entry->Length >= sizeof(ACPI_SRAT_PROC_AFFINITY_ENTRY))) {

  0004d	8b 45 f4	 mov	 eax, DWORD PTR _Entry$[ebp]
  00050	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00053	85 c0		 test	 eax, eax
  00055	75 55		 jne	 SHORT $LN3@BlAcpiDump
  00057	8b 45 f4	 mov	 eax, DWORD PTR _Entry$[ebp]
  0005a	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  0005e	83 f8 10	 cmp	 eax, 16			; 00000010H
  00061	72 49		 jb	 SHORT $LN3@BlAcpiDump

; 469  : 
; 470  :             ProcAffinityEntry = (PACPI_SRAT_PROC_AFFINITY_ENTRY) Next;

  00063	8b 45 ec	 mov	 eax, DWORD PTR _Next$[ebp]
  00066	89 45 e4	 mov	 DWORD PTR _ProcAffinityEntry$[ebp], eax

; 471  : #if ACPI_VERBOSE
; 472  :             BlRtlPrintf(" Processor:\n");
; 473  : #endif
; 474  :             hbits = 0;

  00069	83 65 f0 00	 and	 DWORD PTR _hbits$[ebp], 0

; 475  :             hbits += ProcAffinityEntry->ProximityDomainHighTwentyFourBits[0] << 24;

  0006d	8b 45 e4	 mov	 eax, DWORD PTR _ProcAffinityEntry$[ebp]
  00070	0f b6 40 09	 movzx	 eax, BYTE PTR [eax+9]
  00074	c1 e0 18	 shl	 eax, 24			; 00000018H
  00077	03 45 f0	 add	 eax, DWORD PTR _hbits$[ebp]
  0007a	89 45 f0	 mov	 DWORD PTR _hbits$[ebp], eax

; 476  :             hbits += ProcAffinityEntry->ProximityDomainHighTwentyFourBits[1] << 16;

  0007d	8b 45 e4	 mov	 eax, DWORD PTR _ProcAffinityEntry$[ebp]
  00080	0f b6 40 0a	 movzx	 eax, BYTE PTR [eax+10]
  00084	c1 e0 10	 shl	 eax, 16			; 00000010H
  00087	03 45 f0	 add	 eax, DWORD PTR _hbits$[ebp]
  0008a	89 45 f0	 mov	 DWORD PTR _hbits$[ebp], eax

; 477  :             hbits += ProcAffinityEntry->ProximityDomainHighTwentyFourBits[2] << 8;

  0008d	8b 45 e4	 mov	 eax, DWORD PTR _ProcAffinityEntry$[ebp]
  00090	0f b6 40 0b	 movzx	 eax, BYTE PTR [eax+11]
  00094	c1 e0 08	 shl	 eax, 8
  00097	03 45 f0	 add	 eax, DWORD PTR _hbits$[ebp]
  0009a	89 45 f0	 mov	 DWORD PTR _hbits$[ebp], eax

; 478  :             totalbits = hbits | ProcAffinityEntry->ProximityDomainLowEightBits;

  0009d	8b 45 e4	 mov	 eax, DWORD PTR _ProcAffinityEntry$[ebp]
  000a0	0f b6 40 02	 movzx	 eax, BYTE PTR [eax+2]
  000a4	0b 45 f0	 or	 eax, DWORD PTR _hbits$[ebp]
  000a7	89 45 fc	 mov	 DWORD PTR _totalbits$[ebp], eax

; 479  : #if ACPI_VERBOSE
; 480  :             BlRtlPrintf("  HighDomain 0x%06x LowDomain 0x%02x totalbits 0x%08x\n",
; 481  :                         hbits, ProcAffinityEntry->ProximityDomainLowEightBits,
; 482  :                         totalbits);
; 483  :             BlRtlPrintf("  ApicID: %d flags 0x%08x\n", ProcAffinityEntry->ApicID,
; 484  :                         ProcAffinityEntry->Flags);
; 485  : #endif
; 486  :         }
; 487  :         else if ((Entry->Type == ACPI_SRAT_TYPE_MEM_AFFINITY_ENTRY) &&

  000aa	eb 1d		 jmp	 SHORT $LN2@BlAcpiDump
$LN3@BlAcpiDump:

; 488  :                    (Entry->Length >= sizeof(ACPI_SRAT_MEM_AFFINITY_ENTRY))) {

  000ac	8b 45 f4	 mov	 eax, DWORD PTR _Entry$[ebp]
  000af	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000b2	83 f8 01	 cmp	 eax, 1
  000b5	75 12		 jne	 SHORT $LN2@BlAcpiDump
  000b7	8b 45 f4	 mov	 eax, DWORD PTR _Entry$[ebp]
  000ba	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  000be	83 f8 28	 cmp	 eax, 40			; 00000028H
  000c1	72 06		 jb	 SHORT $LN2@BlAcpiDump

; 489  : 
; 490  :             MemAffinityEntry = (PACPI_SRAT_MEM_AFFINITY_ENTRY) Next;

  000c3	8b 45 ec	 mov	 eax, DWORD PTR _Next$[ebp]
  000c6	89 45 e8	 mov	 DWORD PTR _MemAffinityEntry$[ebp], eax
$LN2@BlAcpiDump:

; 491  : #if ACPI_VERBOSE
; 492  :             BlRtlPrintf(" Memory:\n");
; 493  :             BlRtlPrintf("  BaseAddress 0x%08x.%08x ..  0x%08x.%08x",
; 494  :                         MemAffinityEntry->BaseAddressHigh, MemAffinityEntry->BaseAddressLow,
; 495  :                         MemAffinityEntry->LengthHigh, MemAffinityEntry->LengthLow);
; 496  :             BlRtlPrintf("  Domain %d  Flags 0x%08x\n",
; 497  :                         MemAffinityEntry->ProximityDomain,
; 498  :                         MemAffinityEntry->Flags);
; 499  : #endif
; 500  :         }
; 501  : 
; 502  :         Next += Entry->Length;

  000c9	8b 45 f4	 mov	 eax, DWORD PTR _Entry$[ebp]
  000cc	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  000d0	03 45 ec	 add	 eax, DWORD PTR _Next$[ebp]
  000d3	89 45 ec	 mov	 DWORD PTR _Next$[ebp], eax

; 503  :     }

  000d6	e9 60 ff ff ff	 jmp	 $LN5@BlAcpiDump
$LN7@BlAcpiDump:

; 504  : }

  000db	c9		 leave
  000dc	c3		 ret	 0
?BlAcpiDumpSratEntries@@YIXXZ ENDP			; BlAcpiDumpSratEntries
_TEXT	ENDS
PUBLIC	?BlAcpiGetNumberOfProcessors@@YIKXZ		; BlAcpiGetNumberOfProcessors
; Function compile flags: /Odsp
;	COMDAT ?BlAcpiGetNumberOfProcessors@@YIKXZ
_TEXT	SEGMENT
_Next$ = -20						; size = 4
_LocalApic$ = -16					; size = 4
_Entry$ = -12						; size = 4
_NumberOfProcessors$ = -8				; size = 4
_Limit$ = -4						; size = 4
?BlAcpiGetNumberOfProcessors@@YIKXZ PROC		; BlAcpiGetNumberOfProcessors, COMDAT

; 522  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 523  :     PACPI_MADT_ENTRY Entry;
; 524  :     PCHAR Limit;
; 525  :     PACPI_PROCESSOR_LOCAL_APIC LocalApic;
; 526  :     PCHAR Next;
; 527  :     UINT32 NumberOfProcessors;
; 528  : 
; 529  :     if (BlAcpiMadt == NULL) {

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlAcpiMadt@@3PAU_ACPI_MADT@@A, 0 ; BlAcpiMadt
  0000d	75 05		 jne	 SHORT $LN5@BlAcpiGetN

; 530  : 
; 531  :         return 1;

  0000f	33 c0		 xor	 eax, eax
  00011	40		 inc	 eax
  00012	eb 6e		 jmp	 SHORT $LN6@BlAcpiGetN
$LN5@BlAcpiGetN:

; 532  :     }
; 533  : 
; 534  :     Next = (PCHAR) &BlAcpiMadt->ApicStructures[0];

  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiMadt@@3PAU_ACPI_MADT@@A ; BlAcpiMadt
  00019	83 c0 2c	 add	 eax, 44			; 0000002cH
  0001c	89 45 ec	 mov	 DWORD PTR _Next$[ebp], eax

; 535  :     Limit = ((PCHAR) BlAcpiMadt) + BlAcpiMadt->Length;

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiMadt@@3PAU_ACPI_MADT@@A ; BlAcpiMadt
  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlAcpiMadt@@3PAU_ACPI_MADT@@A ; BlAcpiMadt
  0002a	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0002d	89 4d fc	 mov	 DWORD PTR _Limit$[ebp], ecx

; 536  :     NumberOfProcessors = 0;

  00030	83 65 f8 00	 and	 DWORD PTR _NumberOfProcessors$[ebp], 0
$LN4@BlAcpiGetN:

; 537  : 
; 538  :     while (Next < Limit) {

  00034	8b 45 ec	 mov	 eax, DWORD PTR _Next$[ebp]
  00037	3b 45 fc	 cmp	 eax, DWORD PTR _Limit$[ebp]
  0003a	73 43		 jae	 SHORT $LN3@BlAcpiGetN

; 539  : 
; 540  :         Entry = (PACPI_MADT_ENTRY) Next;

  0003c	8b 45 ec	 mov	 eax, DWORD PTR _Next$[ebp]
  0003f	89 45 f4	 mov	 DWORD PTR _Entry$[ebp], eax

; 541  : 
; 542  :         if ((Entry->Type == ACPI_APIC_TYPE_PROCESSOR_LOCAL) &&
; 543  :             (Entry->Length >= sizeof(ACPI_PROCESSOR_LOCAL_APIC))) {

  00042	8b 45 f4	 mov	 eax, DWORD PTR _Entry$[ebp]
  00045	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00048	85 c0		 test	 eax, eax
  0004a	75 24		 jne	 SHORT $LN2@BlAcpiGetN
  0004c	8b 45 f4	 mov	 eax, DWORD PTR _Entry$[ebp]
  0004f	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  00053	83 f8 08	 cmp	 eax, 8
  00056	72 18		 jb	 SHORT $LN2@BlAcpiGetN

; 544  : 
; 545  :             LocalApic = (PACPI_PROCESSOR_LOCAL_APIC) Next;

  00058	8b 45 ec	 mov	 eax, DWORD PTR _Next$[ebp]
  0005b	89 45 f0	 mov	 DWORD PTR _LocalApic$[ebp], eax

; 546  : 
; 547  :             if (LocalApic->u1.s1.Enabled != FALSE) {

  0005e	8b 45 f0	 mov	 eax, DWORD PTR _LocalApic$[ebp]
  00061	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00064	83 e0 01	 and	 eax, 1
  00067	74 07		 je	 SHORT $LN2@BlAcpiGetN

; 548  : 
; 549  : #if ACPI_VERBOSE
; 550  : 
; 551  :                 BlRtlPrintf("ACPI: AcpiProcessorId=%u , LocalApicId=%u\n",
; 552  :                             LocalApic->AcpiProcessorId,
; 553  :                             LocalApic->ApicId);
; 554  : 
; 555  : #endif
; 556  : 
; 557  :                 NumberOfProcessors += 1;

  00069	8b 45 f8	 mov	 eax, DWORD PTR _NumberOfProcessors$[ebp]
  0006c	40		 inc	 eax
  0006d	89 45 f8	 mov	 DWORD PTR _NumberOfProcessors$[ebp], eax
$LN2@BlAcpiGetN:

; 558  :             }
; 559  :         }
; 560  : 
; 561  :         Next += Entry->Length;

  00070	8b 45 f4	 mov	 eax, DWORD PTR _Entry$[ebp]
  00073	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  00077	03 45 ec	 add	 eax, DWORD PTR _Next$[ebp]
  0007a	89 45 ec	 mov	 DWORD PTR _Next$[ebp], eax

; 562  :     }

  0007d	eb b5		 jmp	 SHORT $LN4@BlAcpiGetN
$LN3@BlAcpiGetN:

; 563  : 
; 564  :     return NumberOfProcessors;

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _NumberOfProcessors$[ebp]
$LN6@BlAcpiGetN:

; 565  : }

  00082	c9		 leave
  00083	c3		 ret	 0
?BlAcpiGetNumberOfProcessors@@YIKXZ ENDP		; BlAcpiGetNumberOfProcessors
_TEXT	ENDS
PUBLIC	?BlAcpiLocateFadt@@YIPAU_ACPI_FADT@@PAU_ACPI_RSDT@@@Z ; BlAcpiLocateFadt
; Function compile flags: /Odsp
;	COMDAT ?BlAcpiLocateFadt@@YIPAU_ACPI_FADT@@PAU_ACPI_RSDT@@@Z
_TEXT	SEGMENT
_Rsdt$ = -16						; size = 4
_Fadt$ = -12						; size = 4
_NumberOfTables$ = -8					; size = 4
_Index$ = -4						; size = 4
?BlAcpiLocateFadt@@YIPAU_ACPI_FADT@@PAU_ACPI_RSDT@@@Z PROC ; BlAcpiLocateFadt, COMDAT
; _Rsdt$ = ecx

; 589  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _Rsdt$[ebp], ecx

; 590  :     PACPI_FADT Fadt;
; 591  :     UINT32 Index;
; 592  :     UINT32 NumberOfTables;
; 593  : 
; 594  :     NumberOfTables = (Rsdt->Length - FIELD_OFFSET(ACPI_RSDT, Entry)) / sizeof(Rsdt->Entry[0]);

  00009	8b 45 f0	 mov	 eax, DWORD PTR _Rsdt$[ebp]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	83 e8 24	 sub	 eax, 36			; 00000024H
  00012	c1 e8 02	 shr	 eax, 2
  00015	89 45 f8	 mov	 DWORD PTR _NumberOfTables$[ebp], eax

; 595  : 
; 596  :     for (Index = 0; Index < NumberOfTables; Index += 1) {

  00018	83 65 fc 00	 and	 DWORD PTR _Index$[ebp], 0
  0001c	eb 07		 jmp	 SHORT $LN4@BlAcpiLoca@5
$LN3@BlAcpiLoca@5:
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  00021	40		 inc	 eax
  00022	89 45 fc	 mov	 DWORD PTR _Index$[ebp], eax
$LN4@BlAcpiLoca@5:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  00028	3b 45 f8	 cmp	 eax, DWORD PTR _NumberOfTables$[ebp]
  0002b	73 58		 jae	 SHORT $LN2@BlAcpiLoca@5

; 597  : 
; 598  :         Fadt = (PACPI_FADT) (ULONG_PTR) Rsdt->Entry[Index];

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  00030	8b 4d f0	 mov	 ecx, DWORD PTR _Rsdt$[ebp]
  00033	8b 44 81 24	 mov	 eax, DWORD PTR [ecx+eax*4+36]
  00037	89 45 f4	 mov	 DWORD PTR _Fadt$[ebp], eax

; 599  : 
; 600  :         if ((Fadt->Signature[0] == 'F') &&
; 601  :             (Fadt->Signature[1] == 'A') &&
; 602  :             (Fadt->Signature[2] == 'C') &&
; 603  :             (Fadt->Signature[3] == 'P') &&
; 604  :             (BlRtlComputeChecksum8(Fadt, Fadt->Length) == 0)) {

  0003a	8b 45 f4	 mov	 eax, DWORD PTR _Fadt$[ebp]
  0003d	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00040	83 f8 46	 cmp	 eax, 70			; 00000046H
  00043	75 3e		 jne	 SHORT $LN1@BlAcpiLoca@5
  00045	8b 45 f4	 mov	 eax, DWORD PTR _Fadt$[ebp]
  00048	0f b6 40 01	 movzx	 eax, BYTE PTR [eax+1]
  0004c	83 f8 41	 cmp	 eax, 65			; 00000041H
  0004f	75 32		 jne	 SHORT $LN1@BlAcpiLoca@5
  00051	8b 45 f4	 mov	 eax, DWORD PTR _Fadt$[ebp]
  00054	0f b6 40 02	 movzx	 eax, BYTE PTR [eax+2]
  00058	83 f8 43	 cmp	 eax, 67			; 00000043H
  0005b	75 26		 jne	 SHORT $LN1@BlAcpiLoca@5
  0005d	8b 45 f4	 mov	 eax, DWORD PTR _Fadt$[ebp]
  00060	0f b6 40 03	 movzx	 eax, BYTE PTR [eax+3]
  00064	83 f8 50	 cmp	 eax, 80			; 00000050H
  00067	75 1a		 jne	 SHORT $LN1@BlAcpiLoca@5
  00069	8b 45 f4	 mov	 eax, DWORD PTR _Fadt$[ebp]
  0006c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0006f	8b 4d f4	 mov	 ecx, DWORD PTR _Fadt$[ebp]
  00072	e8 00 00 00 00	 call	 ?BlRtlComputeChecksum8@@YIEPBXK@Z ; BlRtlComputeChecksum8
  00077	0f b6 c0	 movzx	 eax, al
  0007a	85 c0		 test	 eax, eax
  0007c	75 05		 jne	 SHORT $LN1@BlAcpiLoca@5

; 605  : 
; 606  :             return Fadt;

  0007e	8b 45 f4	 mov	 eax, DWORD PTR _Fadt$[ebp]
  00081	eb 04		 jmp	 SHORT $LN5@BlAcpiLoca@5
$LN1@BlAcpiLoca@5:

; 607  :         }
; 608  :     }

  00083	eb 99		 jmp	 SHORT $LN3@BlAcpiLoca@5
$LN2@BlAcpiLoca@5:

; 609  : 
; 610  :     return NULL;

  00085	33 c0		 xor	 eax, eax
$LN5@BlAcpiLoca@5:

; 611  : }

  00087	c9		 leave
  00088	c3		 ret	 0
?BlAcpiLocateFadt@@YIPAU_ACPI_FADT@@PAU_ACPI_RSDT@@@Z ENDP ; BlAcpiLocateFadt
_TEXT	ENDS
PUBLIC	?BlAcpiResetSystem@@YIXXZ			; BlAcpiResetSystem
EXTRN	?BlRtlWritePort8@@YIXGE@Z:PROC			; BlRtlWritePort8
; Function compile flags: /Odsp
;	COMDAT ?BlAcpiResetSystem@@YIXXZ
_TEXT	SEGMENT
tv75 = -4						; size = 4
?BlAcpiResetSystem@@YIXXZ PROC				; BlAcpiResetSystem, COMDAT

; 626  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 627  :     if ((BlAcpiFadt->Revision < 2) ||
; 628  :         (BlAcpiFadt->Length < (FIELD_OFFSET(ACPI_FADT, ResetValue) + sizeof(UINT8))) ||
; 629  :         ((BlAcpiFadt->Flags & ACPI_FADT_FLAGS_RESET_SUPPORTED) == 0)
; 630  :         ) {

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiFadt@@3PAU_ACPI_FADT@@A ; BlAcpiFadt
  00009	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0000d	83 f8 02	 cmp	 eax, 2
  00010	7c 1d		 jl	 SHORT $LN4@BlAcpiRese
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiFadt@@3PAU_ACPI_FADT@@A ; BlAcpiFadt
  00017	81 78 04 81 00
	00 00		 cmp	 DWORD PTR [eax+4], 129	; 00000081H
  0001e	72 0f		 jb	 SHORT $LN4@BlAcpiRese
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiFadt@@3PAU_ACPI_FADT@@A ; BlAcpiFadt
  00025	8b 40 70	 mov	 eax, DWORD PTR [eax+112]
  00028	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  0002d	75 02		 jne	 SHORT $LN5@BlAcpiRese
$LN4@BlAcpiRese:

; 631  : 
; 632  : #if ACPI_VERBOSE
; 633  : 
; 634  :         BlRtlPrintf("ACPI: Reset register is not supported! [FADT v%u]\n", BlAcpiFadt->Revision);
; 635  : 
; 636  : #endif
; 637  : 
; 638  :         return;

  0002f	eb 2c		 jmp	 SHORT $LN6@BlAcpiRese
$LN5@BlAcpiRese:

; 639  :     }
; 640  : 
; 641  : #if ACPI_VERBOSE
; 642  : 
; 643  :     BlRtlPrintf("ACPI: Reset register type is %u.\n", BlAcpiFadt->ResetRegister.AddressSpaceId);
; 644  : 
; 645  : #endif
; 646  : 
; 647  :     switch (BlAcpiFadt->ResetRegister.AddressSpaceId) {

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiFadt@@3PAU_ACPI_FADT@@A ; BlAcpiFadt
  00036	8a 40 74	 mov	 al, BYTE PTR [eax+116]
  00039	88 45 fc	 mov	 BYTE PTR tv75[ebp], al
  0003c	80 7d fc 01	 cmp	 BYTE PTR tv75[ebp], 1
  00040	74 02		 je	 SHORT $LN1@BlAcpiRese
  00042	eb 19		 jmp	 SHORT $LN6@BlAcpiRese
$LN1@BlAcpiRese:

; 648  : 
; 649  :         case ACPI_GAS_IO: {
; 650  : 
; 651  :             BlRtlWritePort8((UINT16) BlAcpiFadt->ResetRegister.Address, BlAcpiFadt->ResetValue);

  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiFadt@@3PAU_ACPI_FADT@@A ; BlAcpiFadt
  00049	66 8b 48 78	 mov	 cx, WORD PTR [eax+120]
  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiFadt@@3PAU_ACPI_FADT@@A ; BlAcpiFadt
  00052	8a 90 80 00 00
	00		 mov	 dl, BYTE PTR [eax+128]
  00058	e8 00 00 00 00	 call	 ?BlRtlWritePort8@@YIXGE@Z ; BlRtlWritePort8
$LN6@BlAcpiRese:

; 652  : 
; 653  :             break;
; 654  :         }
; 655  :     }
; 656  : }

  0005d	c9		 leave
  0005e	c3		 ret	 0
?BlAcpiResetSystem@@YIXXZ ENDP				; BlAcpiResetSystem
_TEXT	ENDS
PUBLIC	??_C@_0BG@FCLKDBKH@ACPI?3?5No?5local?5APIC?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@BODJODDC@ACPI?3?5No?5FADT?$CB?6?$AA@	; `string'
PUBLIC	??_C@_0BA@MDLGPIHP@ACPI?3?5No?5RSDT?$CB?6?$AA@	; `string'
PUBLIC	??_C@_0L@KNFIOBDM@blacpi?4cpp?$AA@		; `string'
PUBLIC	??_C@_0BA@EMNEGPCI@ACPI?3?5No?5RSDP?$CB?6?$AA@	; `string'
PUBLIC	?BlAcpiInitialize@@YIXXZ			; BlAcpiInitialize
EXTRN	?BlMmMapVirtualRange@@YIXPAX0KEEE@Z:PROC	; BlMmMapVirtualRange
EXTRN	?BlRtlHaltInternal@@YIXPBDK@Z:PROC		; BlRtlHaltInternal
;	COMDAT ??_C@_0BG@FCLKDBKH@ACPI?3?5No?5local?5APIC?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BG@FCLKDBKH@ACPI?3?5No?5local?5APIC?$CB?6?$AA@ DB 'ACPI: No local '
	DB	'APIC!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BODJODDC@ACPI?3?5No?5FADT?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BA@BODJODDC@ACPI?3?5No?5FADT?$CB?6?$AA@ DB 'ACPI: No FADT!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDLGPIHP@ACPI?3?5No?5RSDT?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BA@MDLGPIHP@ACPI?3?5No?5RSDT?$CB?6?$AA@ DB 'ACPI: No RSDT!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KNFIOBDM@blacpi?4cpp?$AA@
CONST	SEGMENT
??_C@_0L@KNFIOBDM@blacpi?4cpp?$AA@ DB 'blacpi.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EMNEGPCI@ACPI?3?5No?5RSDP?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BA@EMNEGPCI@ACPI?3?5No?5RSDP?$CB?6?$AA@ DB 'ACPI: No RSDP!', 0aH, 00H ; `string'
; Function compile flags: /Odsp
CONST	ENDS
;	COMDAT ?BlAcpiInitialize@@YIXXZ
_TEXT	SEGMENT
?BlAcpiInitialize@@YIXXZ PROC				; BlAcpiInitialize, COMDAT

; 671  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 672  :     BlAcpiRsdp = BlAcpiLocateRsdp();

  00003	e8 00 00 00 00	 call	 ?BlAcpiLocateRsdp@@YIPAU_ACPI_RSDP@@XZ ; BlAcpiLocateRsdp
  00008	a3 00 00 00 00	 mov	 DWORD PTR ?BlAcpiRsdp@@3PAU_ACPI_RSDP@@A, eax ; BlAcpiRsdp

; 673  : 
; 674  :     if (BlAcpiRsdp == NULL) {

  0000d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlAcpiRsdp@@3PAU_ACPI_RSDP@@A, 0 ; BlAcpiRsdp
  00014	75 1a		 jne	 SHORT $LN8@BlAcpiInit

; 675  : 
; 676  :         BlRtlPrintf("ACPI: No RSDP!\n");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EMNEGPCI@ACPI?3?5No?5RSDP?$CB?6?$AA@
  0001b	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00020	59		 pop	 ecx

; 677  :         BlRtlHalt();

  00021	ba a5 02 00 00	 mov	 edx, 677		; 000002a5H
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0L@KNFIOBDM@blacpi?4cpp?$AA@
  0002b	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN8@BlAcpiInit:

; 678  :     }
; 679  : 
; 680  :     BlAcpiRsdpAddress = (PVOID) BlAcpiRsdp;

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiRsdp@@3PAU_ACPI_RSDP@@A ; BlAcpiRsdp
  00035	a3 00 00 00 00	 mov	 DWORD PTR ?BlAcpiRsdpAddress@@3PAXA, eax ; BlAcpiRsdpAddress

; 681  : 
; 682  :     BlAcpiRsdt = BlAcpiLocateRsdt(BlAcpiRsdp);

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlAcpiRsdp@@3PAU_ACPI_RSDP@@A ; BlAcpiRsdp
  00040	e8 00 00 00 00	 call	 ?BlAcpiLocateRsdt@@YIPAU_ACPI_RSDT@@PAU_ACPI_RSDP@@@Z ; BlAcpiLocateRsdt
  00045	a3 00 00 00 00	 mov	 DWORD PTR ?BlAcpiRsdt@@3PAU_ACPI_RSDT@@A, eax ; BlAcpiRsdt

; 683  : 
; 684  :     if (BlAcpiRsdt == NULL) {

  0004a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlAcpiRsdt@@3PAU_ACPI_RSDT@@A, 0 ; BlAcpiRsdt
  00051	75 1a		 jne	 SHORT $LN7@BlAcpiInit

; 685  : 
; 686  :         BlRtlPrintf("ACPI: No RSDT!\n");

  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@MDLGPIHP@ACPI?3?5No?5RSDT?$CB?6?$AA@
  00058	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0005d	59		 pop	 ecx

; 687  :         BlRtlHalt();

  0005e	ba af 02 00 00	 mov	 edx, 687		; 000002afH
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0L@KNFIOBDM@blacpi?4cpp?$AA@
  00068	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN7@BlAcpiInit:

; 688  :     }
; 689  : 
; 690  :     BlAcpiFadt = BlAcpiLocateFadt(BlAcpiRsdt);

  0006d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlAcpiRsdt@@3PAU_ACPI_RSDT@@A ; BlAcpiRsdt
  00073	e8 00 00 00 00	 call	 ?BlAcpiLocateFadt@@YIPAU_ACPI_FADT@@PAU_ACPI_RSDT@@@Z ; BlAcpiLocateFadt
  00078	a3 00 00 00 00	 mov	 DWORD PTR ?BlAcpiFadt@@3PAU_ACPI_FADT@@A, eax ; BlAcpiFadt

; 691  : 
; 692  :     if (BlAcpiFadt == NULL) {

  0007d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlAcpiFadt@@3PAU_ACPI_FADT@@A, 0 ; BlAcpiFadt
  00084	75 1a		 jne	 SHORT $LN6@BlAcpiInit

; 693  : 
; 694  :         BlRtlPrintf("ACPI: No FADT!\n");

  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BODJODDC@ACPI?3?5No?5FADT?$CB?6?$AA@
  0008b	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00090	59		 pop	 ecx

; 695  :         BlRtlHalt();

  00091	ba b7 02 00 00	 mov	 edx, 695		; 000002b7H
  00096	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0L@KNFIOBDM@blacpi?4cpp?$AA@
  0009b	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN6@BlAcpiInit:

; 696  :     }
; 697  : 
; 698  :     BlAcpiMadt = BlAcpiLocateMadt(BlAcpiRsdt);

  000a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlAcpiRsdt@@3PAU_ACPI_RSDT@@A ; BlAcpiRsdt
  000a6	e8 00 00 00 00	 call	 ?BlAcpiLocateMadt@@YIPAU_ACPI_MADT@@PAU_ACPI_RSDT@@@Z ; BlAcpiLocateMadt
  000ab	a3 00 00 00 00	 mov	 DWORD PTR ?BlAcpiMadt@@3PAU_ACPI_MADT@@A, eax ; BlAcpiMadt

; 699  : 
; 700  :     if (BlAcpiMadt == NULL) {

  000b0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlAcpiMadt@@3PAU_ACPI_MADT@@A, 0 ; BlAcpiMadt
  000b7	75 0c		 jne	 SHORT $LN5@BlAcpiInit

; 701  : 
; 702  :         BlAcpiNumberOfProcessors = 1;

  000b9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?BlAcpiNumberOfProcessors@@3KA, 1 ; BlAcpiNumberOfProcessors

; 703  : 
; 704  :     } else {

  000c3	eb 0a		 jmp	 SHORT $LN4@BlAcpiInit
$LN5@BlAcpiInit:

; 705  : 
; 706  :         BlAcpiNumberOfProcessors = BlAcpiGetNumberOfProcessors();

  000c5	e8 00 00 00 00	 call	 ?BlAcpiGetNumberOfProcessors@@YIKXZ ; BlAcpiGetNumberOfProcessors
  000ca	a3 00 00 00 00	 mov	 DWORD PTR ?BlAcpiNumberOfProcessors@@3KA, eax ; BlAcpiNumberOfProcessors
$LN4@BlAcpiInit:

; 707  :     }
; 708  : 
; 709  :     if (BlAcpiNumberOfProcessors == 0) {

  000cf	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlAcpiNumberOfProcessors@@3KA, 0 ; BlAcpiNumberOfProcessors
  000d6	75 1a		 jne	 SHORT $LN3@BlAcpiInit

; 710  : 
; 711  :         BlRtlPrintf("ACPI: No local APIC!\n");

  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FCLKDBKH@ACPI?3?5No?5local?5APIC?$CB?6?$AA@
  000dd	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  000e2	59		 pop	 ecx

; 712  :         BlRtlHalt();

  000e3	ba c8 02 00 00	 mov	 edx, 712		; 000002c8H
  000e8	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0L@KNFIOBDM@blacpi?4cpp?$AA@
  000ed	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN3@BlAcpiInit:

; 713  :     }
; 714  : 
; 715  :     BlAcpiSrat = BlAcpiLocateSrat(BlAcpiRsdt);

  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlAcpiRsdt@@3PAU_ACPI_RSDT@@A ; BlAcpiRsdt
  000f8	e8 00 00 00 00	 call	 ?BlAcpiLocateSrat@@YIPAU_ACPI_SRAT@@PAU_ACPI_RSDT@@@Z ; BlAcpiLocateSrat
  000fd	a3 00 00 00 00	 mov	 DWORD PTR ?BlAcpiSrat@@3PAU_ACPI_SRAT@@A, eax ; BlAcpiSrat

; 716  :     if (BlAcpiSrat != NULL) {

  00102	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlAcpiSrat@@3PAU_ACPI_SRAT@@A, 0 ; BlAcpiSrat
  00109	74 05		 je	 SHORT $LN2@BlAcpiInit

; 717  :         BlAcpiDumpSratEntries();

  0010b	e8 00 00 00 00	 call	 ?BlAcpiDumpSratEntries@@YIXXZ ; BlAcpiDumpSratEntries
$LN2@BlAcpiInit:

; 718  :     }
; 719  : 
; 720  : 
; 721  : #if ACPI_VERBOSE
; 722  : 
; 723  :     BlRtlPrintf("ACPI: RSDP @ %p\n"
; 724  :                 "ACPI: RSDT @ %p\n"
; 725  :                 "ACPI: FADT @ %p [Revision=%u , Length=%u]\n"
; 726  :                 "ACPI: MADT @ %p\n"
; 727  :                 "ACPI: %u processor(s)\n",
; 728  :                 BlAcpiRsdp,
; 729  :                 BlAcpiRsdt,
; 730  :                 BlAcpiFadt,
; 731  :                 BlAcpiFadt->Revision,
; 732  :                 BlAcpiFadt->Length,
; 733  :                 BlAcpiMadt,
; 734  :                 BlAcpiNumberOfProcessors);
; 735  : 
; 736  : #endif
; 737  : 
; 738  :     //
; 739  :     // Map APIC page uncached.
; 740  :     //
; 741  : 
; 742  :     if ((BlAcpiMadt != NULL) && (BlAcpiMadt->LocalApicAddress != 0)) {

  00110	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlAcpiMadt@@3PAU_ACPI_MADT@@A, 0 ; BlAcpiMadt
  00117	74 2b		 je	 SHORT $LN9@BlAcpiInit
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiMadt@@3PAU_ACPI_MADT@@A ; BlAcpiMadt
  0011e	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00122	74 20		 je	 SHORT $LN9@BlAcpiInit

; 743  : 
; 744  : #if ACPI_VERBOSE
; 745  : 
; 746  :         BlRtlPrintf("ACPI: APIC mapped @ %p.\n", BlAcpiMadt->LocalApicAddress);
; 747  : 
; 748  : #endif
; 749  : 
; 750  :         BlMmMapVirtualRange((PVOID) (ULONG_PTR) BlAcpiMadt->LocalApicAddress,
; 751  :                             (PVOID) (ULONG_PTR) BlAcpiMadt->LocalApicAddress,
; 752  :                             PAGE_SIZE,
; 753  :                             TRUE,
; 754  :                             FALSE,
; 755  :                             FALSE);

  00124	6a 00		 push	 0
  00126	6a 00		 push	 0
  00128	6a 01		 push	 1
  0012a	68 00 10 00 00	 push	 4096			; 00001000H
  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiMadt@@3PAU_ACPI_MADT@@A ; BlAcpiMadt
  00134	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00137	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiMadt@@3PAU_ACPI_MADT@@A ; BlAcpiMadt
  0013c	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0013f	e8 00 00 00 00	 call	 ?BlMmMapVirtualRange@@YIXPAX0KEEE@Z ; BlMmMapVirtualRange
$LN9@BlAcpiInit:

; 756  :     }
; 757  : }

  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
?BlAcpiInitialize@@YIXXZ ENDP				; BlAcpiInitialize
_TEXT	ENDS
END
