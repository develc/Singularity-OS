; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	C:\Users\cc\source\repos\Singularity-OS\base\Boot\SingLdrPc\blsingularity.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
PUBLIC	?BlSingularityFileImageTableSize@@3KA		; BlSingularityFileImageTableSize
PUBLIC	?BlKernelBase@@3PAXA				; BlKernelBase
PUBLIC	?BlSingularityProcessorToStart@@3KA		; BlSingularityProcessorToStart
PUBLIC	?BlProcessorCount@@3KA				; BlProcessorCount
PUBLIC	?BlCommandLine@@3PA_WA				; BlCommandLine
PUBLIC	?BlKernelSize@@3KA				; BlKernelSize
PUBLIC	?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A		; BlKernelFile
PUBLIC	?BlSingularitySmap@@3PAU_BL_SMAP@@A		; BlSingularitySmap
PUBLIC	?BlProcessor@@3PAU_BL_PROCESSOR@@A		; BlProcessor
PUBLIC	?BlDistro@@3U_BL_DISTRO@@A			; BlDistro
PUBLIC	?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA ; BlKernelEntryPoint
PUBLIC	?BlCpuArray@@3PAUClass_Microsoft_Singularity_Hal_Cpu@@A ; BlCpuArray
PUBLIC	?BlSingularityOhci1394Buffer@@3PAEA		; BlSingularityOhci1394Buffer
PUBLIC	?BlSingularityFileImageTable@@3PAUStruct_Microsoft_Singularity_Io_FileImage@@A ; BlSingularityFileImageTable
_BSS	SEGMENT
?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A DD 01H DUP (?) ; BlPlatform
?BlSingularityFileImageTableSize@@3KA DD 01H DUP (?)	; BlSingularityFileImageTableSize
?BlKernelBase@@3PAXA DD 01H DUP (?)			; BlKernelBase
?BlSingularityProcessorToStart@@3KA DD 01H DUP (?)	; BlSingularityProcessorToStart
?BlProcessorCount@@3KA DD 01H DUP (?)			; BlProcessorCount
?BlCommandLine@@3PA_WA DD 01H DUP (?)			; BlCommandLine
?BlKernelSize@@3KA DD 01H DUP (?)			; BlKernelSize
?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A DD 01H DUP (?)	; BlKernelFile
?BlSingularitySmap@@3PAU_BL_SMAP@@A DD 01H DUP (?)	; BlSingularitySmap
?BlProcessor@@3PAU_BL_PROCESSOR@@A DD 01H DUP (?)	; BlProcessor
?BlDistro@@3U_BL_DISTRO@@A DB 014H DUP (?)		; BlDistro
?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA DD 01H DUP (?) ; BlKernelEntryPoint
?BlCpuArray@@3PAUClass_Microsoft_Singularity_Hal_Cpu@@A DD 01H DUP (?) ; BlCpuArray
?BlSingularityOhci1394Buffer@@3PAEA DB 03000H DUP (?)	; BlSingularityOhci1394Buffer
?BlSingularityFileImageTable@@3PAUStruct_Microsoft_Singularity_Io_FileImage@@A DD 01H DUP (?) ; BlSingularityFileImageTable
_BSS	ENDS
PUBLIC	??_C@_05JDDINMFO@end?4?3?$AA@			; `string'
PUBLIC	?BlGetBeb@@YIPAU_BEB@@XZ			; BlGetBeb
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0CM@LMNFPKBE@?$ANReading?5distro?5files?5?4?4?4?5?$CFu?5?1?5?$CF@ ; `string'
PUBLIC	??_C@_0BI@KAGFGJKE@?6BL?3?5Error?5reading?5?$CFs?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_0BH@LCBGKGKK@DISTRO?3?5?$CFs?5?$FL?$CFu?5bytes?$FN?6?$AA@ ; `string'
PUBLIC	??_C@_0CP@BKIKLPP@DISTRO?3?5Reading?5distro?5?$CI?$CFu?5files@ ; `string'
PUBLIC	??_C@_05COJAONLL@Path?$DN?$AA@			; `string'
PUBLIC	??_C@_0CE@EKFFGIL@BL?3?5Error?5parsing?5distro?5INI?5fil@ ; `string'
PUBLIC	??_C@_05HAHDDALE@Size?$DN?$AA@			; `string'
PUBLIC	??_C@_0BO@DCCFEHEG@BL?3?5Unable?5to?5read?5INI?5file?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@	; `string'
PUBLIC	??_C@_0BN@PAFAHLDE@BL?3?5Unable?5to?5get?5INI?5file?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DGINCILF@singularity?1singboot?4ini?$AA@ ; `string'
PUBLIC	?BlSingularityLoadDistro@@YIXXZ			; BlSingularityLoadDistro
EXTRN	?BlMmMapVirtualRange@@YIXPAX0KEEE@Z:PROC	; BlMmMapVirtualRange
EXTRN	?BlVideoPrintf@@YAEPBDZZ:PROC			; BlVideoPrintf
EXTRN	?BlKdPrintf@@YAEPBDZZ:PROC			; BlKdPrintf
EXTRN	?BlMmAllocatePhysicalRegion@@YI_KKK@Z:PROC	; BlMmAllocatePhysicalRegion
EXTRN	?BlRtlInsertTailList@@YIXPAU_LIST_ENTRY@@0@Z:PROC ; BlRtlInsertTailList
EXTRN	?BlRtlCopyMemory@@YIXPAXPBXK@Z:PROC		; BlRtlCopyMemory
EXTRN	?BlRtlAssertFailed@@YIXPBDK@Z:PROC		; BlRtlAssertFailed
EXTRN	?BlRtlParsePositiveDecimal@@YIEPBDPAK1@Z:PROC	; BlRtlParsePositiveDecimal
EXTRN	?BlRtlFindSubstring@@YIPBDPBD0@Z:PROC		; BlRtlFindSubstring
EXTRN	?BlFsReadFile@@3P6IEPBDPAXK@ZA:DWORD		; BlFsReadFile
EXTRN	?BlPoolAllocateBlock@@YIPAXK@Z:PROC		; BlPoolAllocateBlock
EXTRN	?BlRtlHaltInternal@@YIXPBDK@Z:PROC		; BlRtlHaltInternal
EXTRN	?BlRtlPrintf@@YAEPBDZZ:PROC			; BlRtlPrintf
EXTRN	?BlFsGetFileSize@@3P6IEPBDPAK@ZA:DWORD		; BlFsGetFileSize
EXTRN	?BlRtlInitializeListHead@@YIXPAU_LIST_ENTRY@@@Z:PROC ; BlRtlInitializeListHead
;	COMDAT ??_C@_05JDDINMFO@end?4?3?$AA@
; File c:\users\cc\source\repos\singularity-os\base\boot\singldrpc\blsingularity.cpp
CONST	SEGMENT
??_C@_05JDDINMFO@end?4?3?$AA@ DB 'end.:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LMNFPKBE@?$ANReading?5distro?5files?5?4?4?4?5?$CFu?5?1?5?$CF@
CONST	SEGMENT
??_C@_0CM@LMNFPKBE@?$ANReading?5distro?5files?5?4?4?4?5?$CFu?5?1?5?$CF@ DB 0dH
	DB	'Reading distro files ... %u / %u [%u / %u]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KAGFGJKE@?6BL?3?5Error?5reading?5?$CFs?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BI@KAGFGJKE@?6BL?3?5Error?5reading?5?$CFs?$CB?6?$AA@ DB 0aH, 'BL: '
	DB	'Error reading %s!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LCBGKGKK@DISTRO?3?5?$CFs?5?$FL?$CFu?5bytes?$FN?6?$AA@
CONST	SEGMENT
??_C@_0BH@LCBGKGKK@DISTRO?3?5?$CFs?5?$FL?$CFu?5bytes?$FN?6?$AA@ DB 'DISTR'
	DB	'O: %s [%u bytes]', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BKIKLPP@DISTRO?3?5Reading?5distro?5?$CI?$CFu?5files@
CONST	SEGMENT
??_C@_0CP@BKIKLPP@DISTRO?3?5Reading?5distro?5?$CI?$CFu?5files@ DB 'DISTRO'
	DB	': Reading distro (%u files , %u bytes).', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05COJAONLL@Path?$DN?$AA@
CONST	SEGMENT
??_C@_05COJAONLL@Path?$DN?$AA@ DB 'Path=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EKFFGIL@BL?3?5Error?5parsing?5distro?5INI?5fil@
CONST	SEGMENT
??_C@_0CE@EKFFGIL@BL?3?5Error?5parsing?5distro?5INI?5fil@ DB 'BL: Error p'
	DB	'arsing distro INI file!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HAHDDALE@Size?$DN?$AA@
CONST	SEGMENT
??_C@_05HAHDDALE@Size?$DN?$AA@ DB 'Size=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DCCFEHEG@BL?3?5Unable?5to?5read?5INI?5file?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BO@DCCFEHEG@BL?3?5Unable?5to?5read?5INI?5file?$CB?6?$AA@ DB 'BL: U'
	DB	'nable to read INI file!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
CONST	SEGMENT
??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@ DB 'blsingularity.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PAFAHLDE@BL?3?5Unable?5to?5get?5INI?5file?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BN@PAFAHLDE@BL?3?5Unable?5to?5get?5INI?5file?$CB?6?$AA@ DB 'BL: Un'
	DB	'able to get INI file!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DGINCILF@singularity?1singboot?4ini?$AA@
CONST	SEGMENT
??_C@_0BJ@DGINCILF@singularity?1singboot?4ini?$AA@ DB 'singularity/singbo'
	DB	'ot.ini', 00H				; `string'
; Function compile flags: /Odsp
CONST	ENDS
;	COMDAT ?BlSingularityLoadDistro@@YIXXZ
_TEXT	SEGMENT
_CharactersConsumed$ = -52				; size = 4
_Next$ = -48						; size = 4
_DummySize$ = -44					; size = 4
_BytesRead$ = -40					; size = 4
_DistroFile$ = -36					; size = 4
_Temp$ = -32						; size = 4
_Entry$ = -28						; size = 4
_Head$ = -24						; size = 4
_NewLine$ = -20						; size = 4
_BlIniFileData$ = -16					; size = 4
_Size$ = -12						; size = 4
_FilesRead$ = -8					; size = 4
_BlIniFileSize$ = -4					; size = 4
?BlSingularityLoadDistro@@YIXXZ PROC			; BlSingularityLoadDistro, COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 114  :     UINT32 BytesRead;
; 115  :     UINT32 CharactersConsumed;
; 116  :     PBL_DISTRO_FILE DistroFile;
; 117  :     UINT32 DummySize;
; 118  :     PLIST_ENTRY Entry;
; 119  :     UINT32 FilesRead;
; 120  :     PLIST_ENTRY Head;
; 121  :     PCHAR NewLine;
; 122  :     PCHAR Next;
; 123  :     UINT32 Size;
; 124  :     PCHAR Temp;
; 125  :     PVOID BlIniFileData;
; 126  :     UINT32 BlIniFileSize;
; 127  : 
; 128  :     BlDistro.NumberOfFiles = 0;

  00006	83 25 00 00 00
	00 00		 and	 DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A, 0

; 129  :     BlRtlInitializeListHead(&BlDistro.FileList);

  0000d	b9 08 00 00 00	 mov	 ecx, OFFSET ?BlDistro@@3U_BL_DISTRO@@A+8
  00012	e8 00 00 00 00	 call	 ?BlRtlInitializeListHead@@YIXPAU_LIST_ENTRY@@@Z ; BlRtlInitializeListHead

; 130  : 
; 131  :     //
; 132  :     // Read the distro INI file.
; 133  :     //
; 134  : 
; 135  :     if (BlFsGetFileSize(SINGULARITY_DISTRO_INI_PATH, &BlIniFileSize) == FALSE) {

  00017	8d 55 fc	 lea	 edx, DWORD PTR _BlIniFileSize$[ebp]
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BJ@DGINCILF@singularity?1singboot?4ini?$AA@
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR ?BlFsGetFileSize@@3P6IEPBDPAK@ZA ; BlFsGetFileSize
  00025	0f b6 c0	 movzx	 eax, al
  00028	85 c0		 test	 eax, eax
  0002a	75 1a		 jne	 SHORT $LN28@BlSingular

; 136  : 
; 137  :         BlRtlPrintf("BL: Unable to get INI file!\n");

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PAFAHLDE@BL?3?5Unable?5to?5get?5INI?5file?$CB?6?$AA@
  00031	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00036	59		 pop	 ecx

; 138  :         BlRtlHalt();

  00037	ba 8a 00 00 00	 mov	 edx, 138		; 0000008aH
  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00041	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN28@BlSingular:

; 139  :     }
; 140  : 
; 141  :     BlIniFileData = BlPoolAllocateBlock(BlIniFileSize + 1);

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _BlIniFileSize$[ebp]
  00049	41		 inc	 ecx
  0004a	e8 00 00 00 00	 call	 ?BlPoolAllocateBlock@@YIPAXK@Z ; BlPoolAllocateBlock
  0004f	89 45 f0	 mov	 DWORD PTR _BlIniFileData$[ebp], eax

; 142  : 
; 143  :     if (BlFsReadFile(SINGULARITY_DISTRO_INI_PATH, BlIniFileData, BlIniFileSize) == FALSE) {

  00052	ff 75 fc	 push	 DWORD PTR _BlIniFileSize$[ebp]
  00055	8b 55 f0	 mov	 edx, DWORD PTR _BlIniFileData$[ebp]
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BJ@DGINCILF@singularity?1singboot?4ini?$AA@
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR ?BlFsReadFile@@3P6IEPBDPAXK@ZA ; BlFsReadFile
  00063	0f b6 c0	 movzx	 eax, al
  00066	85 c0		 test	 eax, eax
  00068	75 1a		 jne	 SHORT $LN27@BlSingular

; 144  : 
; 145  :         BlRtlPrintf("BL: Unable to read INI file!\n");

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DCCFEHEG@BL?3?5Unable?5to?5read?5INI?5file?$CB?6?$AA@
  0006f	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00074	59		 pop	 ecx

; 146  :         BlRtlHalt();

  00075	ba 92 00 00 00	 mov	 edx, 146		; 00000092H
  0007a	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  0007f	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN27@BlSingular:

; 147  :     }
; 148  : 
; 149  :     //
; 150  :     // Parse INI file and build distro file list.
; 151  :     //
; 152  : 
; 153  :     NewLine = (PCHAR) BlIniFileData;

  00084	8b 45 f0	 mov	 eax, DWORD PTR _BlIniFileData$[ebp]
  00087	89 45 ec	 mov	 DWORD PTR _NewLine$[ebp], eax
$LN26@BlSingular:

; 154  : 
; 155  :     for (;;) {
; 156  : 
; 157  :         Next = NewLine;

  0008a	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  0008d	89 45 d0	 mov	 DWORD PTR _Next$[ebp], eax

; 158  :         NewLine = Next + 1;

  00090	8b 45 d0	 mov	 eax, DWORD PTR _Next$[ebp]
  00093	40		 inc	 eax
  00094	89 45 ec	 mov	 DWORD PTR _NewLine$[ebp], eax
$LN24@BlSingular:

; 159  : 
; 160  :         while ((*NewLine != 0) && (*NewLine != '\r') && (*NewLine != '\n')) {

  00097	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  0009a	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0009d	85 c0		 test	 eax, eax
  0009f	74 1f		 je	 SHORT $LN23@BlSingular
  000a1	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  000a4	0f be 00	 movsx	 eax, BYTE PTR [eax]
  000a7	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  000aa	74 14		 je	 SHORT $LN23@BlSingular
  000ac	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  000af	0f be 00	 movsx	 eax, BYTE PTR [eax]
  000b2	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000b5	74 09		 je	 SHORT $LN23@BlSingular

; 161  : 
; 162  :             NewLine += 1;

  000b7	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  000ba	40		 inc	 eax
  000bb	89 45 ec	 mov	 DWORD PTR _NewLine$[ebp], eax

; 163  :         }

  000be	eb d7		 jmp	 SHORT $LN24@BlSingular
$LN23@BlSingular:

; 164  : 
; 165  :         if (*NewLine == 0) {

  000c0	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  000c3	0f be 00	 movsx	 eax, BYTE PTR [eax]
  000c6	85 c0		 test	 eax, eax
  000c8	75 05		 jne	 SHORT $LN21@BlSingular

; 166  : 
; 167  :             break;

  000ca	e9 4b 01 00 00	 jmp	 $LN25@BlSingular
$LN21@BlSingular:

; 168  :         }
; 169  : 
; 170  :         while ((*NewLine == '\r') || (*NewLine == '\n')) {

  000cf	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  000d2	0f be 00	 movsx	 eax, BYTE PTR [eax]
  000d5	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  000d8	74 0b		 je	 SHORT $LN19@BlSingular
  000da	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  000dd	0f be 00	 movsx	 eax, BYTE PTR [eax]
  000e0	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000e3	75 0f		 jne	 SHORT $LN20@BlSingular
$LN19@BlSingular:

; 171  : 
; 172  :             *NewLine = 0;

  000e5	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  000e8	c6 00 00	 mov	 BYTE PTR [eax], 0

; 173  :             NewLine += 1;

  000eb	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  000ee	40		 inc	 eax
  000ef	89 45 ec	 mov	 DWORD PTR _NewLine$[ebp], eax

; 174  :         }

  000f2	eb db		 jmp	 SHORT $LN21@BlSingular
$LN20@BlSingular:

; 175  : 
; 176  :         Next = (PCHAR)BlRtlFindSubstring(Next, "Size=");

  000f4	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_05HAHDDALE@Size?$DN?$AA@
  000f9	8b 4d d0	 mov	 ecx, DWORD PTR _Next$[ebp]
  000fc	e8 00 00 00 00	 call	 ?BlRtlFindSubstring@@YIPBDPBD0@Z ; BlRtlFindSubstring
  00101	89 45 d0	 mov	 DWORD PTR _Next$[ebp], eax

; 177  : 
; 178  :         if (Next == NULL) {

  00104	83 7d d0 00	 cmp	 DWORD PTR _Next$[ebp], 0
  00108	75 05		 jne	 SHORT $LN18@BlSingular

; 179  : 
; 180  :             continue;

  0010a	e9 7b ff ff ff	 jmp	 $LN26@BlSingular
$LN18@BlSingular:

; 181  :         }
; 182  : 
; 183  :         Next += 5;

  0010f	8b 45 d0	 mov	 eax, DWORD PTR _Next$[ebp]
  00112	83 c0 05	 add	 eax, 5
  00115	89 45 d0	 mov	 DWORD PTR _Next$[ebp], eax

; 184  : 
; 185  :         if (BlRtlParsePositiveDecimal(Next,
; 186  :                                       &Size,
; 187  :                                       &CharactersConsumed) == FALSE) {

  00118	8d 45 cc	 lea	 eax, DWORD PTR _CharactersConsumed$[ebp]
  0011b	50		 push	 eax
  0011c	8d 55 f4	 lea	 edx, DWORD PTR _Size$[ebp]
  0011f	8b 4d d0	 mov	 ecx, DWORD PTR _Next$[ebp]
  00122	e8 00 00 00 00	 call	 ?BlRtlParsePositiveDecimal@@YIEPBDPAK1@Z ; BlRtlParsePositiveDecimal
  00127	0f b6 c0	 movzx	 eax, al
  0012a	85 c0		 test	 eax, eax
  0012c	75 1a		 jne	 SHORT $LN17@BlSingular
$ParseFailure$8288:

; 188  : 
; 189  :           ParseFailure:
; 190  :             BlRtlPrintf("BL: Error parsing distro INI file!\n");

  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@EKFFGIL@BL?3?5Error?5parsing?5distro?5INI?5fil@
  00133	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00138	59		 pop	 ecx

; 191  :             BlRtlHalt();

  00139	ba bf 00 00 00	 mov	 edx, 191		; 000000bfH
  0013e	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00143	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN17@BlSingular:

; 192  :         }
; 193  : 
; 194  :         Next = (PCHAR)BlRtlFindSubstring(Next, "Path=");

  00148	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_05COJAONLL@Path?$DN?$AA@
  0014d	8b 4d d0	 mov	 ecx, DWORD PTR _Next$[ebp]
  00150	e8 00 00 00 00	 call	 ?BlRtlFindSubstring@@YIPBDPBD0@Z ; BlRtlFindSubstring
  00155	89 45 d0	 mov	 DWORD PTR _Next$[ebp], eax

; 195  : 
; 196  :         if (Next == NULL) {

  00158	83 7d d0 00	 cmp	 DWORD PTR _Next$[ebp], 0
  0015c	75 02		 jne	 SHORT $LN16@BlSingular

; 197  : 
; 198  :             goto ParseFailure;

  0015e	eb ce		 jmp	 SHORT $ParseFailure$8288
$LN16@BlSingular:

; 199  :         }
; 200  : 
; 201  :         Next += 5;

  00160	8b 45 d0	 mov	 eax, DWORD PTR _Next$[ebp]
  00163	83 c0 05	 add	 eax, 5
  00166	89 45 d0	 mov	 DWORD PTR _Next$[ebp], eax

; 202  : 
; 203  :         if (*Next == 0) {

  00169	8b 45 d0	 mov	 eax, DWORD PTR _Next$[ebp]
  0016c	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0016f	85 c0		 test	 eax, eax
  00171	75 02		 jne	 SHORT $LN15@BlSingular

; 204  : 
; 205  :             goto ParseFailure;

  00173	eb b9		 jmp	 SHORT $ParseFailure$8288
$LN15@BlSingular:

; 206  :         }
; 207  : 
; 208  :         DistroFile = (PBL_DISTRO_FILE) BlPoolAllocateBlock(sizeof(BL_DISTRO_FILE));

  00175	b9 10 04 00 00	 mov	 ecx, 1040		; 00000410H
  0017a	e8 00 00 00 00	 call	 ?BlPoolAllocateBlock@@YIPAXK@Z ; BlPoolAllocateBlock
  0017f	89 45 dc	 mov	 DWORD PTR _DistroFile$[ebp], eax

; 209  : 
; 210  :         BLASSERT((NewLine - Next) < sizeof(DistroFile->Path));

  00182	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  00185	2b 45 d0	 sub	 eax, DWORD PTR _Next$[ebp]
  00188	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0018d	72 0f		 jb	 SHORT $LN14@BlSingular
  0018f	ba d2 00 00 00	 mov	 edx, 210		; 000000d2H
  00194	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00199	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN14@BlSingular:

; 211  : 
; 212  :         Temp = (PCHAR)Next;

  0019e	8b 45 d0	 mov	 eax, DWORD PTR _Next$[ebp]
  001a1	89 45 e0	 mov	 DWORD PTR _Temp$[ebp], eax
$LN13@BlSingular:

; 213  : 
; 214  :         while (Temp != NewLine) {

  001a4	8b 45 e0	 mov	 eax, DWORD PTR _Temp$[ebp]
  001a7	3b 45 ec	 cmp	 eax, DWORD PTR _NewLine$[ebp]
  001aa	74 1a		 je	 SHORT $LN12@BlSingular

; 215  : 
; 216  :             if (*Temp == '\\') {

  001ac	8b 45 e0	 mov	 eax, DWORD PTR _Temp$[ebp]
  001af	0f be 00	 movsx	 eax, BYTE PTR [eax]
  001b2	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  001b5	75 06		 jne	 SHORT $LN11@BlSingular

; 217  : 
; 218  :                 *Temp = '/';

  001b7	8b 45 e0	 mov	 eax, DWORD PTR _Temp$[ebp]
  001ba	c6 00 2f	 mov	 BYTE PTR [eax], 47	; 0000002fH
$LN11@BlSingular:

; 219  :             }
; 220  : 
; 221  :             Temp += 1;

  001bd	8b 45 e0	 mov	 eax, DWORD PTR _Temp$[ebp]
  001c0	40		 inc	 eax
  001c1	89 45 e0	 mov	 DWORD PTR _Temp$[ebp], eax

; 222  :         }

  001c4	eb de		 jmp	 SHORT $LN13@BlSingular
$LN12@BlSingular:

; 223  : 
; 224  :         BlRtlCopyMemory(DistroFile->Path, Next, NewLine - Next);

  001c6	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  001c9	2b 45 d0	 sub	 eax, DWORD PTR _Next$[ebp]
  001cc	50		 push	 eax
  001cd	8b 4d dc	 mov	 ecx, DWORD PTR _DistroFile$[ebp]
  001d0	83 c1 0c	 add	 ecx, 12			; 0000000cH
  001d3	8b 55 d0	 mov	 edx, DWORD PTR _Next$[ebp]
  001d6	e8 00 00 00 00	 call	 ?BlRtlCopyMemory@@YIXPAXPBXK@Z ; BlRtlCopyMemory

; 225  : 
; 226  :         //
; 227  :         // By convention with DistroBuiderl, the first file with a size of zero is
; 228  :         // really the INI file, so we need to set its size.
; 229  :         //
; 230  :         if (Size == 0) {

  001db	83 7d f4 00	 cmp	 DWORD PTR _Size$[ebp], 0
  001df	75 06		 jne	 SHORT $LN10@BlSingular

; 231  :             Size = BlIniFileSize;

  001e1	8b 45 fc	 mov	 eax, DWORD PTR _BlIniFileSize$[ebp]
  001e4	89 45 f4	 mov	 DWORD PTR _Size$[ebp], eax
$LN10@BlSingular:

; 232  :         }
; 233  : 
; 234  :         DistroFile->Size = Size;

  001e7	8b 45 dc	 mov	 eax, DWORD PTR _DistroFile$[ebp]
  001ea	8b 4d f4	 mov	 ecx, DWORD PTR _Size$[ebp]
  001ed	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 235  : 
; 236  :         BlDistro.NumberOfFiles += 1;

  001f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A
  001f5	40		 inc	 eax
  001f6	a3 00 00 00 00	 mov	 DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A, eax

; 237  :         BlDistro.TotalSize += Size;

  001fb	a1 04 00 00 00	 mov	 eax, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+4
  00200	03 45 f4	 add	 eax, DWORD PTR _Size$[ebp]
  00203	a3 04 00 00 00	 mov	 DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+4, eax

; 238  : 
; 239  :         BlRtlInsertTailList(&BlDistro.FileList, &DistroFile->Entry);

  00208	8b 55 dc	 mov	 edx, DWORD PTR _DistroFile$[ebp]
  0020b	b9 08 00 00 00	 mov	 ecx, OFFSET ?BlDistro@@3U_BL_DISTRO@@A+8
  00210	e8 00 00 00 00	 call	 ?BlRtlInsertTailList@@YIXPAU_LIST_ENTRY@@0@Z ; BlRtlInsertTailList

; 240  :     }

  00215	e9 70 fe ff ff	 jmp	 $LN26@BlSingular
$LN25@BlSingular:

; 241  : 
; 242  :     //
; 243  :     // Read distro files.
; 244  :     //
; 245  : 
; 246  :     BlDistro.Data = (PVOID) BlMmAllocatePhysicalRegion(ROUND_UP_TO_PAGES(BlDistro.TotalSize), BL_MM_PHYSICAL_REGION_DISTRO);

  0021a	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+4
  00220	81 c1 ff 0f 00
	00		 add	 ecx, 4095		; 00000fffH
  00226	81 e1 00 f0 ff
	ff		 and	 ecx, -4096		; fffff000H
  0022c	6a 05		 push	 5
  0022e	5a		 pop	 edx
  0022f	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  00234	a3 10 00 00 00	 mov	 DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+16, eax

; 247  : 
; 248  : #if DISTRO_VERBOSE
; 249  : 
; 250  :     BlKdPrintf("DISTRO: Reading distro (%u files , %u bytes).\n",
; 251  :                BlDistro.NumberOfFiles,
; 252  :                BlDistro.TotalSize);

  00239	ff 35 04 00 00
	00		 push	 DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+4
  0023f	ff 35 00 00 00
	00		 push	 DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A
  00245	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@BKIKLPP@DISTRO?3?5Reading?5distro?5?$CI?$CFu?5files@
  0024a	e8 00 00 00 00	 call	 ?BlKdPrintf@@YAEPBDZZ	; BlKdPrintf
  0024f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 253  : 
; 254  : #endif
; 255  : 
; 256  :     FilesRead = 0;

  00252	83 65 f8 00	 and	 DWORD PTR _FilesRead$[ebp], 0

; 257  :     BytesRead = 0;

  00256	83 65 d8 00	 and	 DWORD PTR _BytesRead$[ebp], 0

; 258  : 
; 259  :     Next = (PCHAR) BlDistro.Data;

  0025a	a1 10 00 00 00	 mov	 eax, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+16
  0025f	89 45 d0	 mov	 DWORD PTR _Next$[ebp], eax

; 260  :     Head = &BlDistro.FileList;

  00262	c7 45 e8 08 00
	00 00		 mov	 DWORD PTR _Head$[ebp], OFFSET ?BlDistro@@3U_BL_DISTRO@@A+8

; 261  : 
; 262  :     for (Entry = Head->Flink; Entry != Head; Entry = Entry->Flink) {

  00269	8b 45 e8	 mov	 eax, DWORD PTR _Head$[ebp]
  0026c	8b 00		 mov	 eax, DWORD PTR [eax]
  0026e	89 45 e4	 mov	 DWORD PTR _Entry$[ebp], eax
  00271	eb 08		 jmp	 SHORT $LN9@BlSingular
$LN8@BlSingular:
  00273	8b 45 e4	 mov	 eax, DWORD PTR _Entry$[ebp]
  00276	8b 00		 mov	 eax, DWORD PTR [eax]
  00278	89 45 e4	 mov	 DWORD PTR _Entry$[ebp], eax
$LN9@BlSingular:
  0027b	8b 45 e4	 mov	 eax, DWORD PTR _Entry$[ebp]
  0027e	3b 45 e8	 cmp	 eax, DWORD PTR _Head$[ebp]
  00281	0f 84 ce 00 00
	00		 je	 $LN7@BlSingular

; 263  : 
; 264  :         DistroFile = CONTAINING_RECORD(Entry, BL_DISTRO_FILE, Entry);

  00287	8b 45 e4	 mov	 eax, DWORD PTR _Entry$[ebp]
  0028a	89 45 dc	 mov	 DWORD PTR _DistroFile$[ebp], eax

; 265  : 
; 266  :         DistroFile->Data = Next;

  0028d	8b 45 dc	 mov	 eax, DWORD PTR _DistroFile$[ebp]
  00290	8b 4d d0	 mov	 ecx, DWORD PTR _Next$[ebp]
  00293	89 88 0c 04 00
	00		 mov	 DWORD PTR [eax+1036], ecx

; 267  : 
; 268  :         BLASSERT(DistroFile->Path[0] == '/');

  00299	8b 45 dc	 mov	 eax, DWORD PTR _DistroFile$[ebp]
  0029c	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  002a0	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  002a3	74 0f		 je	 SHORT $LN6@BlSingular
  002a5	ba 0c 01 00 00	 mov	 edx, 268		; 0000010cH
  002aa	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  002af	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN6@BlSingular:

; 269  : 
; 270  : #if DISTRO_VERBOSE
; 271  : 
; 272  :         BlKdPrintf("DISTRO: %s [%u bytes]\n",
; 273  :                    DistroFile->Path,
; 274  :                    DistroFile->Size);

  002b4	8b 45 dc	 mov	 eax, DWORD PTR _DistroFile$[ebp]
  002b7	ff 70 08	 push	 DWORD PTR [eax+8]
  002ba	8b 45 dc	 mov	 eax, DWORD PTR _DistroFile$[ebp]
  002bd	83 c0 0c	 add	 eax, 12			; 0000000cH
  002c0	50		 push	 eax
  002c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LCBGKGKK@DISTRO?3?5?$CFs?5?$FL?$CFu?5bytes?$FN?6?$AA@
  002c6	e8 00 00 00 00	 call	 ?BlKdPrintf@@YAEPBDZZ	; BlKdPrintf
  002cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 275  : 
; 276  : #endif
; 277  : 
; 278  :         if (BlFsReadFile(&DistroFile->Path[1], DistroFile->Data, DistroFile->Size) == FALSE) {

  002ce	8b 45 dc	 mov	 eax, DWORD PTR _DistroFile$[ebp]
  002d1	ff 70 08	 push	 DWORD PTR [eax+8]
  002d4	8b 4d dc	 mov	 ecx, DWORD PTR _DistroFile$[ebp]
  002d7	83 c1 0d	 add	 ecx, 13			; 0000000dH
  002da	8b 45 dc	 mov	 eax, DWORD PTR _DistroFile$[ebp]
  002dd	8b 90 0c 04 00
	00		 mov	 edx, DWORD PTR [eax+1036]
  002e3	ff 15 00 00 00
	00		 call	 DWORD PTR ?BlFsReadFile@@3P6IEPBDPAXK@ZA ; BlFsReadFile
  002e9	0f b6 c0	 movzx	 eax, al
  002ec	85 c0		 test	 eax, eax
  002ee	75 22		 jne	 SHORT $LN5@BlSingular

; 279  : 
; 280  :             BlRtlPrintf("\n"
; 281  :                         "BL: Error reading %s!\n",
; 282  :                         DistroFile->Path);

  002f0	8b 45 dc	 mov	 eax, DWORD PTR _DistroFile$[ebp]
  002f3	83 c0 0c	 add	 eax, 12			; 0000000cH
  002f6	50		 push	 eax
  002f7	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@KAGFGJKE@?6BL?3?5Error?5reading?5?$CFs?$CB?6?$AA@
  002fc	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00301	59		 pop	 ecx
  00302	59		 pop	 ecx

; 283  : 
; 284  :             BlRtlHalt();

  00303	ba 1c 01 00 00	 mov	 edx, 284		; 0000011cH
  00308	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  0030d	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN5@BlSingular:

; 285  :         }
; 286  : 
; 287  :         Next += DistroFile->Size;

  00312	8b 45 dc	 mov	 eax, DWORD PTR _DistroFile$[ebp]
  00315	8b 4d d0	 mov	 ecx, DWORD PTR _Next$[ebp]
  00318	03 48 08	 add	 ecx, DWORD PTR [eax+8]
  0031b	89 4d d0	 mov	 DWORD PTR _Next$[ebp], ecx

; 288  : 
; 289  :         FilesRead += 1;

  0031e	8b 45 f8	 mov	 eax, DWORD PTR _FilesRead$[ebp]
  00321	40		 inc	 eax
  00322	89 45 f8	 mov	 DWORD PTR _FilesRead$[ebp], eax

; 290  :         BytesRead += DistroFile->Size;

  00325	8b 45 dc	 mov	 eax, DWORD PTR _DistroFile$[ebp]
  00328	8b 4d d8	 mov	 ecx, DWORD PTR _BytesRead$[ebp]
  0032b	03 48 08	 add	 ecx, DWORD PTR [eax+8]
  0032e	89 4d d8	 mov	 DWORD PTR _BytesRead$[ebp], ecx

; 291  : 
; 292  :         BlVideoPrintf("\rReading distro files ... %u / %u [%u / %u]",
; 293  :                       FilesRead,
; 294  :                       BlDistro.NumberOfFiles,
; 295  :                       BytesRead,
; 296  :                       BlDistro.TotalSize);

  00331	ff 35 04 00 00
	00		 push	 DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+4
  00337	ff 75 d8	 push	 DWORD PTR _BytesRead$[ebp]
  0033a	ff 35 00 00 00
	00		 push	 DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A
  00340	ff 75 f8	 push	 DWORD PTR _FilesRead$[ebp]
  00343	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@LMNFPKBE@?$ANReading?5distro?5files?5?4?4?4?5?$CFu?5?1?5?$CF@
  00348	e8 00 00 00 00	 call	 ?BlVideoPrintf@@YAEPBDZZ ; BlVideoPrintf
  0034d	83 c4 14	 add	 esp, 20			; 00000014H

; 297  : 
; 298  :     }

  00350	e9 1e ff ff ff	 jmp	 $LN8@BlSingular
$LN7@BlSingular:

; 299  : 
; 300  :     BlVideoPrintf("\n");

  00355	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  0035a	e8 00 00 00 00	 call	 ?BlVideoPrintf@@YAEPBDZZ ; BlVideoPrintf
  0035f	59		 pop	 ecx

; 301  : 
; 302  :     //
; 303  :     // If this is a network boot, then signal the PXE server to exit.
; 304  :     // This is the only mechanism to notify the server that the boot succeeded.
; 305  :     //
; 306  : 
; 307  :     if (BlGetBeb()->BootType == BL_PXE_BOOT) {

  00360	e8 00 00 00 00	 call	 ?BlGetBeb@@YIPAU_BEB@@XZ ; BlGetBeb
  00365	83 38 04	 cmp	 DWORD PTR [eax], 4
  00368	75 0e		 jne	 SHORT $LN4@BlSingular

; 308  : 
; 309  :         BlFsGetFileSize("end.:", &DummySize);

  0036a	8d 55 d4	 lea	 edx, DWORD PTR _DummySize$[ebp]
  0036d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_05JDDINMFO@end?4?3?$AA@
  00372	ff 15 00 00 00
	00		 call	 DWORD PTR ?BlFsGetFileSize@@3P6IEPBDPAK@ZA ; BlFsGetFileSize
$LN4@BlSingular:

; 310  :     }
; 311  : 
; 312  :     //
; 313  :     // Switch distro range to read-only.
; 314  :     //
; 315  : 
; 316  :     BlMmMapVirtualRange(BlDistro.Data,
; 317  :                         BlDistro.Data,
; 318  :                         BlDistro.TotalSize,
; 319  :                         FALSE,
; 320  :                         TRUE,
; 321  :                         FALSE);

  00378	6a 00		 push	 0
  0037a	6a 01		 push	 1
  0037c	6a 00		 push	 0
  0037e	ff 35 04 00 00
	00		 push	 DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+4
  00384	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+16
  0038a	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+16
  00390	e8 00 00 00 00	 call	 ?BlMmMapVirtualRange@@YIXPAX0KEEE@Z ; BlMmMapVirtualRange

; 322  : 
; 323  :     //
; 324  :     // Build file image table.
; 325  :     //
; 326  : 
; 327  :     BlSingularityFileImageTable = (Struct_Microsoft_Singularity_Io_FileImage *) BlPoolAllocateBlock(BlDistro.NumberOfFiles * sizeof(Struct_Microsoft_Singularity_Io_FileImage));

  00395	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A
  0039b	c1 e1 03	 shl	 ecx, 3
  0039e	e8 00 00 00 00	 call	 ?BlPoolAllocateBlock@@YIPAXK@Z ; BlPoolAllocateBlock
  003a3	a3 00 00 00 00	 mov	 DWORD PTR ?BlSingularityFileImageTable@@3PAUStruct_Microsoft_Singularity_Io_FileImage@@A, eax ; BlSingularityFileImageTable

; 328  : 
; 329  :     for (Entry = Head->Flink; Entry != Head; Entry = Entry->Flink) {

  003a8	8b 45 e8	 mov	 eax, DWORD PTR _Head$[ebp]
  003ab	8b 00		 mov	 eax, DWORD PTR [eax]
  003ad	89 45 e4	 mov	 DWORD PTR _Entry$[ebp], eax
  003b0	eb 08		 jmp	 SHORT $LN3@BlSingular
$LN2@BlSingular:
  003b2	8b 45 e4	 mov	 eax, DWORD PTR _Entry$[ebp]
  003b5	8b 00		 mov	 eax, DWORD PTR [eax]
  003b7	89 45 e4	 mov	 DWORD PTR _Entry$[ebp], eax
$LN3@BlSingular:
  003ba	8b 45 e4	 mov	 eax, DWORD PTR _Entry$[ebp]
  003bd	3b 45 e8	 cmp	 eax, DWORD PTR _Head$[ebp]
  003c0	74 3f		 je	 SHORT $LN29@BlSingular

; 330  : 
; 331  :         DistroFile = CONTAINING_RECORD(Entry, BL_DISTRO_FILE, Entry);

  003c2	8b 45 e4	 mov	 eax, DWORD PTR _Entry$[ebp]
  003c5	89 45 dc	 mov	 DWORD PTR _DistroFile$[ebp], eax

; 332  : 
; 333  :         BlSingularityFileImageTable[BlSingularityFileImageTableSize].Address = (ULONG_PTR) DistroFile->Data;

  003c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularityFileImageTableSize@@3KA ; BlSingularityFileImageTableSize
  003cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularityFileImageTable@@3PAUStruct_Microsoft_Singularity_Io_FileImage@@A ; BlSingularityFileImageTable
  003d3	8b 55 dc	 mov	 edx, DWORD PTR _DistroFile$[ebp]
  003d6	8b 92 0c 04 00
	00		 mov	 edx, DWORD PTR [edx+1036]
  003dc	89 14 c1	 mov	 DWORD PTR [ecx+eax*8], edx

; 334  :         BlSingularityFileImageTable[BlSingularityFileImageTableSize].Size = DistroFile->Size;

  003df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularityFileImageTableSize@@3KA ; BlSingularityFileImageTableSize
  003e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularityFileImageTable@@3PAUStruct_Microsoft_Singularity_Io_FileImage@@A ; BlSingularityFileImageTable
  003ea	8b 55 dc	 mov	 edx, DWORD PTR _DistroFile$[ebp]
  003ed	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  003f0	89 54 c1 04	 mov	 DWORD PTR [ecx+eax*8+4], edx

; 335  :         BlSingularityFileImageTableSize += 1;

  003f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularityFileImageTableSize@@3KA ; BlSingularityFileImageTableSize
  003f9	40		 inc	 eax
  003fa	a3 00 00 00 00	 mov	 DWORD PTR ?BlSingularityFileImageTableSize@@3KA, eax ; BlSingularityFileImageTableSize

; 336  :     }

  003ff	eb b1		 jmp	 SHORT $LN2@BlSingular
$LN29@BlSingular:

; 337  : 
; 338  :     return;
; 339  : }

  00401	c9		 leave
  00402	c3		 ret	 0
?BlSingularityLoadDistro@@YIXXZ ENDP			; BlSingularityLoadDistro
; Function compile flags: /Odsp
; File c:\users\cc\source\repos\singularity-os\base\boot\singldrpc\bl.h
_TEXT	ENDS
;	COMDAT ?BlGetBeb@@YIPAU_BEB@@XZ
_TEXT	SEGMENT
?BlGetBeb@@YIPAU_BEB@@XZ PROC				; BlGetBeb, COMDAT

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 356  :     return ((PBEB) BEB_BASE);

  00003	b8 00 f0 02 00	 mov	 eax, 192512		; 0002f000H

; 357  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?BlGetBeb@@YIPAU_BEB@@XZ ENDP				; BlGetBeb
_TEXT	ENDS
PUBLIC	?BlSingularityLoadKernelImage@@YIXXZ		; BlSingularityLoadKernelImage
EXTRN	?BlPeLoadImage@@YIXPAX0PAPAX@Z:PROC		; BlPeLoadImage
EXTRN	?BlMmDumpPhysicalRegionList@@YIXXZ:PROC		; BlMmDumpPhysicalRegionList
EXTRN	?BlMmAllocateSpecificPhysicalRegion@@YIE_K0K@Z:PROC ; BlMmAllocateSpecificPhysicalRegion
EXTRN	?BlPeGetVirtualRange@@YIXPAXPAPAXPAK@Z:PROC	; BlPeGetVirtualRange
EXTRN	?BlRtlIsListEmpty@@YIEPAU_LIST_ENTRY@@@Z:PROC	; BlRtlIsListEmpty
EXTRN	__aullrem:PROC
; Function compile flags: /Odsp
; File c:\users\cc\source\repos\singularity-os\base\boot\singldrpc\blsingularity.cpp
;	COMDAT ?BlSingularityLoadKernelImage@@YIXXZ
_TEXT	SEGMENT
tv149 = -8						; size = 8
?BlSingularityLoadKernelImage@@YIXXZ PROC		; BlSingularityLoadKernelImage, COMDAT

; 354  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 355  :     BLASSERT(BlRtlIsListEmpty(&BlDistro.FileList) == FALSE);

  00005	b9 08 00 00 00	 mov	 ecx, OFFSET ?BlDistro@@3U_BL_DISTRO@@A+8
  0000a	e8 00 00 00 00	 call	 ?BlRtlIsListEmpty@@YIEPAU_LIST_ENTRY@@@Z ; BlRtlIsListEmpty
  0000f	0f b6 c0	 movzx	 eax, al
  00012	85 c0		 test	 eax, eax
  00014	74 0f		 je	 SHORT $LN4@BlSingular@2
  00016	ba 63 01 00 00	 mov	 edx, 355		; 00000163H
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00020	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN4@BlSingular@2:

; 356  : 
; 357  :     //
; 358  :     // Kernel is the first entry in the distro file list.
; 359  :     //
; 360  : 
; 361  :     BlKernelFile = CONTAINING_RECORD(BlDistro.FileList.Flink,
; 362  :                                      BL_DISTRO_FILE,
; 363  :                                      Entry);

  00025	a1 08 00 00 00	 mov	 eax, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+8
  0002a	a3 00 00 00 00	 mov	 DWORD PTR ?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A, eax ; BlKernelFile

; 364  : 
; 365  :     //
; 366  :     // Get the virtual range for the kernel image.
; 367  :     //
; 368  : 
; 369  :     BlPeGetVirtualRange(BlKernelFile->Data, &BlKernelBase, &BlKernelSize);

  0002f	68 00 00 00 00	 push	 OFFSET ?BlKernelSize@@3KA ; BlKernelSize
  00034	ba 00 00 00 00	 mov	 edx, OFFSET ?BlKernelBase@@3PAXA ; BlKernelBase
  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A ; BlKernelFile
  0003e	8b 88 0c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1036]
  00044	e8 00 00 00 00	 call	 ?BlPeGetVirtualRange@@YIXPAXPAPAXPAK@Z ; BlPeGetVirtualRange

; 370  : 
; 371  :     BLASSERT(((UINT64) BlKernelBase % PAGE_SIZE) == 0);

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  0004e	99		 cdq
  0004f	6a 00		 push	 0
  00051	68 00 10 00 00	 push	 4096			; 00001000H
  00056	52		 push	 edx
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 __aullrem
  0005d	89 45 f8	 mov	 DWORD PTR tv149[ebp], eax
  00060	89 55 fc	 mov	 DWORD PTR tv149[ebp+4], edx
  00063	8b 45 f8	 mov	 eax, DWORD PTR tv149[ebp]
  00066	0b 45 fc	 or	 eax, DWORD PTR tv149[ebp+4]
  00069	74 0f		 je	 SHORT $LN3@BlSingular@2
  0006b	ba 73 01 00 00	 mov	 edx, 371		; 00000173H
  00070	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00075	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN3@BlSingular@2:

; 372  : 
; 373  :     BLASSERT((BlKernelSize % PAGE_SIZE) == 0);

  0007a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelSize@@3KA ; BlKernelSize
  0007f	33 d2		 xor	 edx, edx
  00081	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00086	f7 f1		 div	 ecx
  00088	85 d2		 test	 edx, edx
  0008a	74 0f		 je	 SHORT $LN2@BlSingular@2
  0008c	ba 75 01 00 00	 mov	 edx, 373		; 00000175H
  00091	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00096	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN2@BlSingular@2:

; 374  : 
; 375  :     //
; 376  :     // Allocate a physical region for the kernel image, since pages are identity mapped at boot.
; 377  :     //
; 378  :     // AIFIX: This needs to be be made dynamic!
; 379  :     //
; 380  : 
; 381  :     if (BlMmAllocateSpecificPhysicalRegion((UINT64) BlKernelBase,
; 382  :                                            BlKernelSize,
; 383  :                                            BL_MM_PHYSICAL_REGION_KERNEL_IMAGE) == FALSE) {

  0009b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelSize@@3KA ; BlKernelSize
  000a0	33 c9		 xor	 ecx, ecx
  000a2	51		 push	 ecx
  000a3	50		 push	 eax
  000a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  000a9	99		 cdq
  000aa	52		 push	 edx
  000ab	50		 push	 eax
  000ac	6a 06		 push	 6
  000ae	59		 pop	 ecx
  000af	e8 00 00 00 00	 call	 ?BlMmAllocateSpecificPhysicalRegion@@YIE_K0K@Z ; BlMmAllocateSpecificPhysicalRegion
  000b4	0f b6 c0	 movzx	 eax, al
  000b7	85 c0		 test	 eax, eax
  000b9	75 14		 jne	 SHORT $LN1@BlSingular@2

; 384  : 
; 385  :         BlMmDumpPhysicalRegionList();

  000bb	e8 00 00 00 00	 call	 ?BlMmDumpPhysicalRegionList@@YIXXZ ; BlMmDumpPhysicalRegionList

; 386  : 
; 387  :         BlRtlHalt();

  000c0	ba 83 01 00 00	 mov	 edx, 387		; 00000183H
  000c5	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  000ca	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN1@BlSingular@2:

; 388  :     }
; 389  : 
; 390  : #if SINGULARITY_VERBOSE
; 391  : 
; 392  :     BlRtlPrintf("BL: Loading kernel ... [%p ... %p]\n",
; 393  :                 BlKernelBase,
; 394  :                 (ULONG_PTR) BlKernelBase + BlKernelSize - 1);
; 395  : 
; 396  : #endif
; 397  : 
; 398  :     BlPeLoadImage(BlKernelBase, BlKernelFile->Data, (PVOID *) &BlKernelEntryPoint);

  000cf	68 00 00 00 00	 push	 OFFSET ?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA ; BlKernelEntryPoint
  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A ; BlKernelFile
  000d9	8b 90 0c 04 00
	00		 mov	 edx, DWORD PTR [eax+1036]
  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  000e5	e8 00 00 00 00	 call	 ?BlPeLoadImage@@YIXPAX0PAPAX@Z ; BlPeLoadImage

; 399  : 
; 400  : }

  000ea	c9		 leave
  000eb	c3		 ret	 0
?BlSingularityLoadKernelImage@@YIXXZ ENDP		; BlSingularityLoadKernelImage
_TEXT	ENDS
PUBLIC	?BlSingularityInitializeProcessor@@YIXK@Z	; BlSingularityInitializeProcessor
EXTRN	?BlMmInitializeSystemSegment@@YIXPAU_SYSTEM_SEGMENT@@KKK@Z:PROC ; BlMmInitializeSystemSegment
EXTRN	?BlMmInitializeDataSegment@@YIXPAU_DATA_SEGMENT@@KK@Z:PROC ; BlMmInitializeDataSegment
EXTRN	?BlMmInitialGdtr@@3U_GDTR@@A:TBYTE		; BlMmInitialGdtr
EXTRN	?BlRtlZeroMemory@@YIXPAXK@Z:PROC		; BlRtlZeroMemory
; Function compile flags: /Odsp
;	COMDAT ?BlSingularityInitializeProcessor@@YIXK@Z
_TEXT	SEGMENT
_Index$ = -8						; size = 4
_Processor$ = -4					; size = 4
?BlSingularityInitializeProcessor@@YIXK@Z PROC		; BlSingularityInitializeProcessor, COMDAT
; _Index$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _Index$[ebp], ecx

; 447  :     Class_Microsoft_Singularity_Hal_Cpu *Processor;
; 448  : 
; 449  :     //
; 450  :     // Initialize native processor structure.
; 451  :     //
; 452  : 
; 453  :     Processor = BlProcessor[Index].Cpu;

  00008	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  0000b	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00014	8b 44 01 04	 mov	 eax, DWORD PTR [ecx+eax+4]
  00018	89 45 fc	 mov	 DWORD PTR _Processor$[ebp], eax

; 454  :     Processor->Size = sizeof(Class_Microsoft_Singularity_Hal_Cpu);

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _Processor$[ebp]
  0001e	c7 40 04 8d 00
	00 00		 mov	 DWORD PTR [eax+4], 141	; 0000008dH

; 455  :     Processor->Id = Index;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _Processor$[ebp]
  00028	8b 4d f8	 mov	 ecx, DWORD PTR _Index$[ebp]
  0002b	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 456  : #if 0
; 457  :     Processor->ApicId  = Index;
; 458  : #endif
; 459  :     Processor->KernelStackLimit = (ULONG_PTR) BlProcessor[Index].KernelStack;

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  00031	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0003d	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00041	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 460  :     //    Processor->KernelStackBegin = Processor->KernelStackLimit + SINGULARITY_KERNEL_STACK_SIZE;
; 461  :     Processor->KernelStackBegin = Processor->KernelStackLimit + BlProcessor[Index].KernelStackSize;

  00044	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  00047	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  0004d	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00050	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00056	03 4c 02 0c	 add	 ecx, DWORD PTR [edx+eax+12]
  0005a	8b 45 fc	 mov	 eax, DWORD PTR _Processor$[ebp]
  0005d	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 462  :     Processor->CpuRecordPage = (ULONG_PTR) BlProcessor[Index].BasePage;

  00060	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  00063	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  00069	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0006f	8b 44 02 14	 mov	 eax, DWORD PTR [edx+eax+20]
  00073	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 463  : 
; 464  :     //
; 465  :     // Initialize task structure.
; 466  :     //
; 467  : 
; 468  :     BlProcessor[Index].TaskPage->io_bitmap_offset = sizeof(BL_TASK_SEGMENT);

  00076	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  00079	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00082	8b 44 01 18	 mov	 eax, DWORD PTR [ecx+eax+24]
  00086	66 c7 40 66 68
	00		 mov	 WORD PTR [eax+102], 104	; 00000068H

; 469  : 
; 470  :     //
; 471  :     // Initialize segments.
; 472  :     //
; 473  : 
; 474  :     BlRtlZeroMemory(&Processor->segments, sizeof(Processor->segments));

  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  0008f	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00092	6a 70		 push	 112			; 00000070H
  00094	5a		 pop	 edx
  00095	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 475  : 
; 476  :     Processor->segments.gdtPtr.addr = (ULONG_PTR) &Processor->segments.gdt;

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _Processor$[ebp]
  0009d	83 c0 1c	 add	 eax, 28			; 0000001cH
  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  000a3	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax

; 477  :     Processor->segments.gdtPtr.limit = sizeof(Processor->segments.gdt) - 1;

  000a9	8b 45 fc	 mov	 eax, DWORD PTR _Processor$[ebp]
  000ac	66 c7 80 86 00
	00 00 67 00	 mov	 WORD PTR [eax+134], 103	; 00000067H

; 478  : 
; 479  :     BlRtlCopyMemory(&Processor->segments.gdt.pc,
; 480  :                     (PVOID) (BlMmInitialGdtr.Base + PM_CODE_SELECTOR),
; 481  :                     sizeof(CODE_SEGMENT));

  000b5	6a 08		 push	 8
  000b7	8b 15 02 00 00
	00		 mov	 edx, DWORD PTR ?BlMmInitialGdtr@@3U_GDTR@@A+2
  000bd	83 c2 20	 add	 edx, 32			; 00000020H
  000c0	a1 06 00 00 00	 mov	 eax, DWORD PTR ?BlMmInitialGdtr@@3U_GDTR@@A+6
  000c5	83 d0 00	 adc	 eax, 0
  000c8	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  000cb	83 c1 3c	 add	 ecx, 60			; 0000003cH
  000ce	e8 00 00 00 00	 call	 ?BlRtlCopyMemory@@YIXPAXPBXK@Z ; BlRtlCopyMemory

; 482  : 
; 483  :     BlRtlCopyMemory(&Processor->segments.gdt.pd,
; 484  :                     (PVOID) (BlMmInitialGdtr.Base + PM_DATA_SELECTOR),
; 485  :                     sizeof(CODE_SEGMENT));

  000d3	6a 08		 push	 8
  000d5	8b 15 02 00 00
	00		 mov	 edx, DWORD PTR ?BlMmInitialGdtr@@3U_GDTR@@A+2
  000db	83 c2 28	 add	 edx, 40			; 00000028H
  000de	a1 06 00 00 00	 mov	 eax, DWORD PTR ?BlMmInitialGdtr@@3U_GDTR@@A+6
  000e3	83 d0 00	 adc	 eax, 0
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  000e9	83 c1 44	 add	 ecx, 68			; 00000044H
  000ec	e8 00 00 00 00	 call	 ?BlRtlCopyMemory@@YIXPAXPBXK@Z ; BlRtlCopyMemory

; 486  : 
; 487  : #if defined(BOOT_X64)
; 488  :     BlRtlCopyMemory(&Processor->segments.gdt.lc,
; 489  :                     (PVOID) (BlMmInitialGdtr.Base + LM_CODE_SELECTOR),
; 490  :                     sizeof(CODE_SEGMENT));
; 491  : 
; 492  :     BlRtlCopyMemory(&Processor->segments.gdt.ld,
; 493  :                     (PVOID) (BlMmInitialGdtr.Base + LM_DATA_SELECTOR),
; 494  :                     sizeof(CODE_SEGMENT));
; 495  : #endif
; 496  : 
; 497  :     BlMmInitializeDataSegment((PDATA_SEGMENT) &Processor->segments.gdt.pp,
; 498  :                               (UINT32) (ULONG_PTR) BlProcessor[Index].ContextPage,
; 499  :                               PAGE_SIZE - 1);

  000f1	68 ff 0f 00 00	 push	 4095			; 00000fffH
  000f6	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  000f9	6b c0 1c	 imul	 eax, 28			; 0000001cH
  000fc	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  000ff	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00102	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00108	8b 54 02 10	 mov	 edx, DWORD PTR [edx+eax+16]
  0010c	e8 00 00 00 00	 call	 ?BlMmInitializeDataSegment@@YIXPAU_DATA_SEGMENT@@KK@Z ; BlMmInitializeDataSegment

; 500  : 
; 501  :     BlMmInitializeSystemSegment((PSYSTEM_SEGMENT) &Processor->segments.gdt.tss,
; 502  :                                 SSDT_AVAILABLE_TSS,
; 503  :                                 (ULONG_PTR) BlProcessor[Index].TaskPage,
; 504  :                                 sizeof(BL_TASK_SEGMENT) - 1);

  00111	6a 67		 push	 103			; 00000067H
  00113	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  00116	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00119	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0011f	ff 74 01 18	 push	 DWORD PTR [ecx+eax+24]
  00123	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  00126	83 c1 7c	 add	 ecx, 124		; 0000007cH
  00129	6a 09		 push	 9
  0012b	5a		 pop	 edx
  0012c	e8 00 00 00 00	 call	 ?BlMmInitializeSystemSegment@@YIXPAU_SYSTEM_SEGMENT@@KKK@Z ; BlMmInitializeSystemSegment

; 505  : 
; 506  :     return;
; 507  : }

  00131	c9		 leave
  00132	c3		 ret	 0
?BlSingularityInitializeProcessor@@YIXK@Z ENDP		; BlSingularityInitializeProcessor
_TEXT	ENDS
PUBLIC	??_C@_0BB@GPAFJBIF@BL?3?5?5?5entry?$DN?5?$CFp?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KCGLFDHD@BL?3?5?5kernel?$DN?$FL?$CFp?5?4?4?4?5?$CFp?$FN?6?$AA@ ; `string'
PUBLIC	?BlSingularityCallKernel@@YIKK@Z		; BlSingularityCallKernel
EXTRN	?BlVideoInitialize@@YIXXZ:PROC			; BlVideoInitialize
EXTRN	?BlMmSetCr3@@YIXK@Z:PROC			; BlMmSetCr3
EXTRN	?BlMmBootCr3@@3KA:DWORD				; BlMmBootCr3
EXTRN	?BlMmSetFs@@YIXG@Z:PROC				; BlMmSetFs
EXTRN	?BlMmSetGdtr@@YIXPAU_GDTR@@@Z:PROC		; BlMmSetGdtr
;	COMDAT ??_C@_0BB@GPAFJBIF@BL?3?5?5?5entry?$DN?5?$CFp?6?$AA@
CONST	SEGMENT
??_C@_0BB@GPAFJBIF@BL?3?5?5?5entry?$DN?5?$CFp?6?$AA@ DB 'BL:   entry= %p', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KCGLFDHD@BL?3?5?5kernel?$DN?$FL?$CFp?5?4?4?4?5?$CFp?$FN?6?$AA@
CONST	SEGMENT
??_C@_0BJ@KCGLFDHD@BL?3?5?5kernel?$DN?$FL?$CFp?5?4?4?4?5?$CFp?$FN?6?$AA@ DB 'B'
	DB	'L:  kernel=[%p ... %p]', 0aH, 00H		; `string'
; Function compile flags: /Odsp
CONST	ENDS
;	COMDAT ?BlSingularityCallKernel@@YIKK@Z
_TEXT	SEGMENT
_Index$ = -8						; size = 4
_ExitCode$ = -4						; size = 4
?BlSingularityCallKernel@@YIKK@Z PROC			; BlSingularityCallKernel, COMDAT
; _Index$ = ecx

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _Index$[ebp], ecx

; 533  :     UINT32 ExitCode;
; 534  : 
; 535  : #if SINGULARITY_VERBOSE
; 536  : 
; 537  : 
; 538  :     BlRtlPrintf("\fBL: Processor[%d]: Starting Singularity ...\n",
; 539  :                 Index
; 540  :                 );
; 541  : 
; 542  :     BlRtlPrintf("BL:   Cpu  = %p\n",
; 543  :                 BlProcessor[Index].Cpu
; 544  :                 );
; 545  : 
; 546  : 
; 547  :     BlRtlPrintf("BL:   GDT  =[%p...%p]\n",
; 548  :                 BlProcessor[Index].Cpu->segments.gdtPtr.addr,
; 549  :                 BlProcessor[Index].Cpu->segments.gdtPtr.addr + BlProcessor[Index].Cpu->segments.gdtPtr.limit
; 550  :                 );
; 551  : 
; 552  : 
; 553  :     BlRtlPrintf("BL:   stack=[%p...%p]\n",
; 554  :                 BlProcessor[Index].Cpu->KernelStackLimit,
; 555  :                 BlProcessor[Index].Cpu->KernelStackBegin
; 556  :                 );
; 557  : 
; 558  : #endif
; 559  : 
; 560  :     BlMmSetGdtr((PGDTR) &BlProcessor[Index].Cpu->segments.gdtPtr.limit);

  00008	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  0000b	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00014	8b 4c 01 04	 mov	 ecx, DWORD PTR [ecx+eax+4]
  00018	81 c1 86 00 00
	00		 add	 ecx, 134		; 00000086H
  0001e	e8 00 00 00 00	 call	 ?BlMmSetGdtr@@YIXPAU_GDTR@@@Z ; BlMmSetGdtr

; 561  : 
; 562  : #if defined(BOOT_X86)
; 563  : 
; 564  :     BlMmSetFs(PROCESSOR_SELECTOR);

  00023	66 b9 50 00	 mov	 cx, 80			; 00000050H
  00027	e8 00 00 00 00	 call	 ?BlMmSetFs@@YIXG@Z	; BlMmSetFs

; 565  : 
; 566  : #elif defined(BOOT_X64)
; 567  : 
; 568  :     BlMmSetGs(PROCESSOR_SELECTOR);
; 569  : 
; 570  : #endif
; 571  : 
; 572  :     BlMmSetCr3(BlMmBootCr3);

  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlMmBootCr3@@3KA ; BlMmBootCr3
  00032	e8 00 00 00 00	 call	 ?BlMmSetCr3@@YIXK@Z	; BlMmSetCr3

; 573  : 
; 574  :     BlRtlPrintf("BL:  kernel=[%p ... %p]\n",
; 575  :                 BlKernelBase, (ULONG_PTR) BlKernelBase + BlKernelSize - 1);

  00037	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelSize@@3KA ; BlKernelSize
  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  00042	8d 44 01 ff	 lea	 eax, DWORD PTR [ecx+eax-1]
  00046	50		 push	 eax
  00047	ff 35 00 00 00
	00		 push	 DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KCGLFDHD@BL?3?5?5kernel?$DN?$FL?$CFp?5?4?4?4?5?$CFp?$FN?6?$AA@
  00052	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 576  :     BlRtlPrintf("BL:   entry= %p\n", BlKernelEntryPoint);

  0005a	ff 35 00 00 00
	00		 push	 DWORD PTR ?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA ; BlKernelEntryPoint
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GPAFJBIF@BL?3?5?5?5entry?$DN?5?$CFp?6?$AA@
  00065	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0006a	59		 pop	 ecx
  0006b	59		 pop	 ecx

; 577  : 
; 578  : 
; 579  :     ExitCode = BlKernelEntryPoint(BlPlatform, BlProcessor[Index].Cpu);

  0006c	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  0006f	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00078	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR ?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA ; BlKernelEntryPoint
  00088	89 45 fc	 mov	 DWORD PTR _ExitCode$[ebp], eax

; 580  : 
; 581  :     BlMmSetGdtr(&BlMmInitialGdtr);

  0008b	b9 00 00 00 00	 mov	 ecx, OFFSET ?BlMmInitialGdtr@@3U_GDTR@@A ; BlMmInitialGdtr
  00090	e8 00 00 00 00	 call	 ?BlMmSetGdtr@@YIXPAU_GDTR@@@Z ; BlMmSetGdtr

; 582  : 
; 583  :     BlVideoInitialize();

  00095	e8 00 00 00 00	 call	 ?BlVideoInitialize@@YIXXZ ; BlVideoInitialize

; 584  : 
; 585  :     return ExitCode;

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _ExitCode$[ebp]

; 586  : }

  0009d	c9		 leave
  0009e	c3		 ret	 0
?BlSingularityCallKernel@@YIKK@Z ENDP			; BlSingularityCallKernel
_TEXT	ENDS
PUBLIC	??_C@_0CD@DEMCBMIL@BL?3?5AP?5returned?5from?5kernel?5call@ ; `string'
PUBLIC	?BlSingularityEnterKernel@@YIXXZ		; BlSingularityEnterKernel
;	COMDAT ??_C@_0CD@DEMCBMIL@BL?3?5AP?5returned?5from?5kernel?5call@
CONST	SEGMENT
??_C@_0CD@DEMCBMIL@BL?3?5AP?5returned?5from?5kernel?5call@ DB 'BL: AP ret'
	DB	'urned from kernel call!', 0aH, 00H		; `string'
; Function compile flags: /Odsp
CONST	ENDS
;	COMDAT ?BlSingularityEnterKernel@@YIXXZ
_TEXT	SEGMENT
_LocalVariable$ = -12					; size = 4
_ExitCode$ = -8						; size = 4
_Index$ = -4						; size = 4
?BlSingularityEnterKernel@@YIXXZ PROC			; BlSingularityEnterKernel, COMDAT

; 601  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 602  :     UINT32 ExitCode;
; 603  :     PVOID LocalVariable;
; 604  :     UINT32 Index;
; 605  : 
; 606  :     Index = BlSingularityProcessorToStart;

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularityProcessorToStart@@3KA ; BlSingularityProcessorToStart
  0000b	89 45 fc	 mov	 DWORD PTR _Index$[ebp], eax

; 607  : 
; 608  :     BLASSERT(((ULONG_PTR) &LocalVariable) >= BlProcessor[Index].Cpu->KernelStackLimit);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  00011	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0001a	8b 44 01 04	 mov	 eax, DWORD PTR [ecx+eax+4]
  0001e	8d 4d f4	 lea	 ecx, DWORD PTR _LocalVariable$[ebp]
  00021	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00024	73 0f		 jae	 SHORT $LN6@BlSingular@3
  00026	ba 60 02 00 00	 mov	 edx, 608		; 00000260H
  0002b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00030	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN6@BlSingular@3:

; 609  : 
; 610  :     BLASSERT(((ULONG_PTR) &LocalVariable) < BlProcessor[Index].Cpu->KernelStackBegin);

  00035	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  00038	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00041	8b 44 01 04	 mov	 eax, DWORD PTR [ecx+eax+4]
  00045	8d 4d f4	 lea	 ecx, DWORD PTR _LocalVariable$[ebp]
  00048	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0004b	72 0f		 jb	 SHORT $LN5@BlSingular@3
  0004d	ba 62 02 00 00	 mov	 edx, 610		; 00000262H
  00052	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00057	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN5@BlSingular@3:

; 611  : 
; 612  :     //
; 613  :     // The bootstrap processor runs in a loop calling kernel entry point and performing warm boot
; 614  :     // when the kernel returns. The application processors do not return from the kernel call and are
; 615  :     // reinitialized with SIPIs by the kernel after a warm boot.
; 616  :     //
; 617  : 
; 618  :     if (Index == 0) {

  0005c	83 7d fc 00	 cmp	 DWORD PTR _Index$[ebp], 0
  00060	75 52		 jne	 SHORT $LN4@BlSingular@3
$LN3@BlSingular@3:

; 619  : 
; 620  :         for (;;) {
; 621  :             BlMmDumpPhysicalRegionList();

  00062	e8 00 00 00 00	 call	 ?BlMmDumpPhysicalRegionList@@YIXXZ ; BlMmDumpPhysicalRegionList

; 622  :             ExitCode = BlSingularityCallKernel(Index);

  00067	8b 4d fc	 mov	 ecx, DWORD PTR _Index$[ebp]
  0006a	e8 00 00 00 00	 call	 ?BlSingularityCallKernel@@YIKK@Z ; BlSingularityCallKernel
  0006f	89 45 f8	 mov	 DWORD PTR _ExitCode$[ebp], eax

; 623  : 
; 624  : #if SINGULARITY_VERBOSE
; 625  : 
; 626  :             BlRtlPrintf("BL: Processor[%02x]: Kernel exited with 0x%08x.\n",
; 627  :                         Index,
; 628  :                         ExitCode);
; 629  : 
; 630  : #endif
; 631  : 
; 632  :             BlPlatform->BootCount += 1;

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00077	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0007a	40		 inc	 eax
  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00081	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 633  : 
; 634  :             BlRtlZeroMemory(BlKernelBase, BlKernelSize);

  00084	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlKernelSize@@3KA ; BlKernelSize
  0008a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  00090	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 635  : 
; 636  :             BlPeLoadImage(BlKernelBase, BlKernelFile->Data, (PVOID *) &BlKernelEntryPoint);

  00095	68 00 00 00 00	 push	 OFFSET ?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA ; BlKernelEntryPoint
  0009a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A ; BlKernelFile
  0009f	8b 90 0c 04 00
	00		 mov	 edx, DWORD PTR [eax+1036]
  000a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  000ab	e8 00 00 00 00	 call	 ?BlPeLoadImage@@YIXPAX0PAPAX@Z ; BlPeLoadImage

; 637  :         }

  000b0	eb b0		 jmp	 SHORT $LN3@BlSingular@3

; 638  : 
; 639  :     }
; 640  :     else {

  000b2	eb 25		 jmp	 SHORT $LN7@BlSingular@3
$LN4@BlSingular@3:

; 641  : 
; 642  :         ExitCode = BlSingularityCallKernel(Index);

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR _Index$[ebp]
  000b7	e8 00 00 00 00	 call	 ?BlSingularityCallKernel@@YIKK@Z ; BlSingularityCallKernel
  000bc	89 45 f8	 mov	 DWORD PTR _ExitCode$[ebp], eax

; 643  : 
; 644  :         BlRtlPrintf("BL: AP returned from kernel call!\n");

  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@DEMCBMIL@BL?3?5AP?5returned?5from?5kernel?5call@
  000c4	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  000c9	59		 pop	 ecx

; 645  : 
; 646  :         BlRtlHalt();

  000ca	ba 86 02 00 00	 mov	 edx, 646		; 00000286H
  000cf	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  000d4	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN7@BlSingular@3:

; 647  :     }
; 648  : 
; 649  :     return;
; 650  : }

  000d9	c9		 leave
  000da	c3		 ret	 0
?BlSingularityEnterKernel@@YIXXZ ENDP			; BlSingularityEnterKernel
_TEXT	ENDS
PUBLIC	??_C@_0CG@NEIOGAMI@BL?3?5Unrecognized?5kill?5action?50x?$CF@ ; `string'
PUBLIC	??_C@_0CA@FMEJNHIH@BL?3?5Kernel?5requested?5warmboot?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@LKIONBKI@BL?3?5Kernel?5requested?5halt?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BP@JGHOJCKN@BL?3?5Kernel?5requested?5restart?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@BLPEJGIE@BL?3?5Kernel?5requested?5shutdown?4?6?$AA@ ; `string'
PUBLIC	?BlSingularityExit@@YIXXZ			; BlSingularityExit
EXTRN	?BlMmSwitchStack@@YIXPAX0@Z:PROC		; BlMmSwitchStack
EXTRN	?BlRtlResetSystem@@YIXXZ:PROC			; BlRtlResetSystem
EXTRN	?BlRtlShutdownSystem@@YIXXZ:PROC		; BlRtlShutdownSystem
;	COMDAT ??_C@_0CG@NEIOGAMI@BL?3?5Unrecognized?5kill?5action?50x?$CF@
CONST	SEGMENT
??_C@_0CG@NEIOGAMI@BL?3?5Unrecognized?5kill?5action?50x?$CF@ DB 'BL: Unre'
	DB	'cognized kill action 0x%08x!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FMEJNHIH@BL?3?5Kernel?5requested?5warmboot?4?6?$AA@
CONST	SEGMENT
??_C@_0CA@FMEJNHIH@BL?3?5Kernel?5requested?5warmboot?4?6?$AA@ DB 'BL: Ker'
	DB	'nel requested warmboot.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LKIONBKI@BL?3?5Kernel?5requested?5halt?4?6?$AA@
CONST	SEGMENT
??_C@_0BM@LKIONBKI@BL?3?5Kernel?5requested?5halt?4?6?$AA@ DB 'BL: Kernel '
	DB	'requested halt.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JGHOJCKN@BL?3?5Kernel?5requested?5restart?4?6?$AA@
CONST	SEGMENT
??_C@_0BP@JGHOJCKN@BL?3?5Kernel?5requested?5restart?4?6?$AA@ DB 'BL: Kern'
	DB	'el requested restart.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BLPEJGIE@BL?3?5Kernel?5requested?5shutdown?4?6?$AA@
CONST	SEGMENT
??_C@_0CA@BLPEJGIE@BL?3?5Kernel?5requested?5shutdown?4?6?$AA@ DB 'BL: Ker'
	DB	'nel requested shutdown.', 0aH, 00H		; `string'
; Function compile flags: /Odsp
CONST	ENDS
;	COMDAT ?BlSingularityExit@@YIXXZ
_TEXT	SEGMENT
tv66 = -4						; size = 4
?BlSingularityExit@@YIXXZ PROC				; BlSingularityExit, COMDAT

; 665  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 666  :     BlMmSetGdtr(&BlMmInitialGdtr);

  00004	b9 00 00 00 00	 mov	 ecx, OFFSET ?BlMmInitialGdtr@@3U_GDTR@@A ; BlMmInitialGdtr
  00009	e8 00 00 00 00	 call	 ?BlMmSetGdtr@@YIXPAU_GDTR@@@Z ; BlMmSetGdtr

; 667  : 
; 668  :     BlVideoInitialize();

  0000e	e8 00 00 00 00	 call	 ?BlVideoInitialize@@YIXXZ ; BlVideoInitialize

; 669  : 
; 670  :     switch (BlPlatform->KillAction) {

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00018	8b 80 c4 00 00
	00		 mov	 eax, DWORD PTR [eax+196]
  0001e	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  00021	81 7d fc fc 1f
	00 00		 cmp	 DWORD PTR tv66[ebp], 8188 ; 00001ffcH
  00028	74 4a		 je	 SHORT $LN3@BlSingular@4
  0002a	81 7d fc fd 1f
	00 00		 cmp	 DWORD PTR tv66[ebp], 8189 ; 00001ffdH
  00031	74 60		 je	 SHORT $LN2@BlSingular@4
  00033	81 7d fc fe 1f
	00 00		 cmp	 DWORD PTR tv66[ebp], 8190 ; 00001ffeH
  0003a	74 0e		 je	 SHORT $LN5@BlSingular@4
  0003c	81 7d fc ff 1f
	00 00		 cmp	 DWORD PTR tv66[ebp], 8191 ; 00001fffH
  00043	74 1a		 je	 SHORT $LN4@BlSingular@4
  00045	e9 b0 00 00 00	 jmp	 $LN1@BlSingular@4
$LN5@BlSingular@4:

; 671  : 
; 672  :         case Class_Microsoft_Singularity_Hal_Platform_EXIT_AND_SHUTDOWN: {
; 673  : 
; 674  :             BlRtlPrintf("BL: Kernel requested shutdown.\n");

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@BLPEJGIE@BL?3?5Kernel?5requested?5shutdown?4?6?$AA@
  0004f	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00054	59		 pop	 ecx

; 675  : 
; 676  :             BlRtlShutdownSystem();

  00055	e8 00 00 00 00	 call	 ?BlRtlShutdownSystem@@YIXXZ ; BlRtlShutdownSystem

; 677  : 
; 678  :             break;

  0005a	e9 c1 00 00 00	 jmp	 $LN8@BlSingular@4
$LN4@BlSingular@4:

; 679  :         }
; 680  : 
; 681  :         case Class_Microsoft_Singularity_Hal_Platform_EXIT_AND_RESTART: {
; 682  : 
; 683  :             BlRtlPrintf("BL: Kernel requested restart.\n");

  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JGHOJCKN@BL?3?5Kernel?5requested?5restart?4?6?$AA@
  00064	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00069	59		 pop	 ecx

; 684  : 
; 685  :             BlRtlResetSystem();

  0006a	e8 00 00 00 00	 call	 ?BlRtlResetSystem@@YIXXZ ; BlRtlResetSystem

; 686  : 
; 687  :             break;

  0006f	e9 ac 00 00 00	 jmp	 $LN8@BlSingular@4
$LN3@BlSingular@4:

; 688  :         }
; 689  : 
; 690  :         case Class_Microsoft_Singularity_Hal_Platform_EXIT_AND_HALT: {
; 691  : 
; 692  :             BlRtlPrintf("BL: Kernel requested halt.\n");

  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LKIONBKI@BL?3?5Kernel?5requested?5halt?4?6?$AA@
  00079	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0007e	59		 pop	 ecx

; 693  : 
; 694  :             BlRtlHalt();

  0007f	ba b6 02 00 00	 mov	 edx, 694		; 000002b6H
  00084	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00089	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal

; 695  : 
; 696  :             break;

  0008e	e9 8d 00 00 00	 jmp	 $LN8@BlSingular@4
$LN2@BlSingular@4:

; 697  :         }
; 698  : 
; 699  :         case Class_Microsoft_Singularity_Hal_Platform_EXIT_AND_WARMBOOT: {
; 700  : 
; 701  :             BlRtlPrintf("BL: Kernel requested warmboot.\n");

  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FMEJNHIH@BL?3?5Kernel?5requested?5warmboot?4?6?$AA@
  00098	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0009d	59		 pop	 ecx

; 702  : 
; 703  :             BlPlatform->BootCount += 1;

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000a3	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  000a6	40		 inc	 eax
  000a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000ad	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 704  : 
; 705  :             BlRtlZeroMemory(BlKernelBase, BlKernelSize);

  000b0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlKernelSize@@3KA ; BlKernelSize
  000b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  000bc	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 706  : 
; 707  :             BlPeLoadImage(BlKernelBase, BlKernelFile->Data, (PVOID *) &BlKernelEntryPoint);

  000c1	68 00 00 00 00	 push	 OFFSET ?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA ; BlKernelEntryPoint
  000c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A ; BlKernelFile
  000cb	8b 90 0c 04 00
	00		 mov	 edx, DWORD PTR [eax+1036]
  000d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  000d7	e8 00 00 00 00	 call	 ?BlPeLoadImage@@YIXPAX0PAPAX@Z ; BlPeLoadImage

; 708  : 
; 709  :             BlSingularityProcessorToStart = 0;

  000dc	83 25 00 00 00
	00 00		 and	 DWORD PTR ?BlSingularityProcessorToStart@@3KA, 0 ; BlSingularityProcessorToStart

; 710  : 
; 711  :             BlMmSwitchStack((PVOID) BlProcessor[0].Cpu->KernelStackBegin, BlSingularityEnterKernel);

  000e3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  000e8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000eb	ba 00 00 00 00	 mov	 edx, OFFSET ?BlSingularityEnterKernel@@YIXXZ ; BlSingularityEnterKernel
  000f0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000f3	e8 00 00 00 00	 call	 ?BlMmSwitchStack@@YIXPAX0@Z ; BlMmSwitchStack

; 712  : 
; 713  :             break;

  000f8	eb 26		 jmp	 SHORT $LN8@BlSingular@4
$LN1@BlSingular@4:

; 714  :         }
; 715  : 
; 716  :         default: {
; 717  : 
; 718  :             BlRtlPrintf("BL: Unrecognized kill action 0x%08x!\n", BlPlatform->KillAction);

  000fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000ff	ff b0 c4 00 00
	00		 push	 DWORD PTR [eax+196]
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NEIOGAMI@BL?3?5Unrecognized?5kill?5action?50x?$CF@
  0010a	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0010f	59		 pop	 ecx
  00110	59		 pop	 ecx

; 719  : 
; 720  :             BlRtlHalt();

  00111	ba d0 02 00 00	 mov	 edx, 720		; 000002d0H
  00116	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  0011b	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN8@BlSingular@4:

; 721  :         }
; 722  :     }
; 723  : }

  00120	c9		 leave
  00121	c3		 ret	 0
?BlSingularityExit@@YIXXZ ENDP				; BlSingularityExit
_TEXT	ENDS
PUBLIC	?IsApicPresent@@YIIXZ				; IsApicPresent
EXTRN	?BlGetCpuidEdx@@YIKK@Z:PROC			; BlGetCpuidEdx
; Function compile flags: /Odsp
;	COMDAT ?IsApicPresent@@YIIXZ
_TEXT	SEGMENT
_reg_edx$ = -4						; size = 4
?IsApicPresent@@YIIXZ PROC				; IsApicPresent, COMDAT

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 728  :     unsigned int reg_edx = BlGetCpuidEdx(1);

  00004	33 c9		 xor	 ecx, ecx
  00006	41		 inc	 ecx
  00007	e8 00 00 00 00	 call	 ?BlGetCpuidEdx@@YIKK@Z	; BlGetCpuidEdx
  0000c	89 45 fc	 mov	 DWORD PTR _reg_edx$[ebp], eax

; 729  : 
; 730  :     return ((reg_edx >> 9) & 0x1);

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _reg_edx$[ebp]
  00012	c1 e8 09	 shr	 eax, 9
  00015	83 e0 01	 and	 eax, 1

; 731  : }

  00018	c9		 leave
  00019	c3		 ret	 0
?IsApicPresent@@YIIXZ ENDP				; IsApicPresent
_TEXT	ENDS
PUBLIC	?GetAPIC_ID@@YIEXZ				; GetAPIC_ID
EXTRN	?BlGetCpuidEbx@@YIKK@Z:PROC			; BlGetCpuidEbx
; Function compile flags: /Odsp
;	COMDAT ?GetAPIC_ID@@YIEXZ
_TEXT	SEGMENT
_reg_ebx$ = -4						; size = 4
?GetAPIC_ID@@YIEXZ PROC					; GetAPIC_ID, COMDAT

; 739  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 740  :     unsigned int reg_ebx = BlGetCpuidEbx(1);

  00004	33 c9		 xor	 ecx, ecx
  00006	41		 inc	 ecx
  00007	e8 00 00 00 00	 call	 ?BlGetCpuidEbx@@YIKK@Z	; BlGetCpuidEbx
  0000c	89 45 fc	 mov	 DWORD PTR _reg_ebx$[ebp], eax

; 741  : 
; 742  :     return (unsigned char) ((reg_ebx & INITIAL_APIC_ID_BITS) >> 24);

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _reg_ebx$[ebp]
  00012	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00017	c1 e8 18	 shr	 eax, 24			; 00000018H

; 743  : }

  0001a	c9		 leave
  0001b	c3		 ret	 0
?GetAPIC_ID@@YIEXZ ENDP					; GetAPIC_ID
_TEXT	ENDS
PUBLIC	??_C@_0BL@JBGMGGOL@UNKNOWN?5TYPE?5MEMORY?$DP?$DP?$DP?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@JMHGECHE@Allocated?5kernel?5stack?5at?50x?$CF016@ ; `string'
PUBLIC	??_C@_0CC@JLPBNPHN@Failed?5to?5allocate?5kernel?5stack?4@ ; `string'
PUBLIC	??_C@_0O@CLNMNDLH@Debugger?5OFF?6?$AA@		; `string'
PUBLIC	??_C@_0CB@DIKHLCCP@Got?51394?5debugger?5base?5address?$CB?6@ ; `string'
PUBLIC	?BlSingularityInitialize@@YIXKPAU_FAR_POINTER@@0@Z ; BlSingularityInitialize
EXTRN	?BlMmGetNextPhysicalRegion@@YIEPAPAXPA_K1PAK@Z:PROC ; BlMmGetNextPhysicalRegion
EXTRN	?BlMmFindFreePhysicalRegion@@YIEPA_K0@Z:PROC	; BlMmFindFreePhysicalRegion
EXTRN	?BlRtlConvertFarPointerToLinearPointer@@YIPAXPAU_FAR_POINTER@@@Z:PROC ; BlRtlConvertFarPointerToLinearPointer
EXTRN	?BlPciOhci1394BaseAddress@@3KA:DWORD		; BlPciOhci1394BaseAddress
EXTRN	?BlComBasePort@@3QBGB:TBYTE			; BlComBasePort
EXTRN	?BlKdComPort@@3EA:BYTE				; BlKdComPort
EXTRN	?BlAcpiRsdpAddress@@3PAXA:DWORD			; BlAcpiRsdpAddress
EXTRN	?BlVesaVideoBuffer@@3KA:DWORD			; BlVesaVideoBuffer
EXTRN	?BlPciInstallationCheck@@3U_PCI_INSTALLATION_CHECK@@A:BYTE ; BlPciInstallationCheck
EXTRN	?BlPnpIsaConfiguration@@3U_PNP_ISA_CONFIGURATION@@A:FWORD ; BlPnpIsaConfiguration
EXTRN	?BlPnpSystemDeviceNodeListSize@@3KA:DWORD	; BlPnpSystemDeviceNodeListSize
EXTRN	?BlPnpSystemDeviceNodeList@@3PAU_PNP_SYSTEM_DEVICE_NODE@@A:DWORD ; BlPnpSystemDeviceNodeList
EXTRN	?BlRtlStringLengthW@@YIKPB_W@Z:PROC		; BlRtlStringLengthW
EXTRN	?BlMpsFps@@3PAXA:DWORD				; BlMpsFps
EXTRN	?BlStartTime@@3U_BL_TIME@@A:BYTE		; BlStartTime
;	COMDAT ??_C@_0BL@JBGMGGOL@UNKNOWN?5TYPE?5MEMORY?$DP?$DP?$DP?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BL@JBGMGGOL@UNKNOWN?5TYPE?5MEMORY?$DP?$DP?$DP?5?$CFd?6?$AA@ DB 'UN'
	DB	'KNOWN TYPE MEMORY??? %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JMHGECHE@Allocated?5kernel?5stack?5at?50x?$CF016@
CONST	SEGMENT
??_C@_0CG@JMHGECHE@Allocated?5kernel?5stack?5at?50x?$CF016@ DB 'Allocated'
	DB	' kernel stack at 0x%016I64x', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JLPBNPHN@Failed?5to?5allocate?5kernel?5stack?4@
CONST	SEGMENT
??_C@_0CC@JLPBNPHN@Failed?5to?5allocate?5kernel?5stack?4@ DB 'Failed to a'
	DB	'llocate kernel stack.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CLNMNDLH@Debugger?5OFF?6?$AA@
CONST	SEGMENT
??_C@_0O@CLNMNDLH@Debugger?5OFF?6?$AA@ DB 'Debugger OFF', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DIKHLCCP@Got?51394?5debugger?5base?5address?$CB?6@
CONST	SEGMENT
??_C@_0CB@DIKHLCCP@Got?51394?5debugger?5base?5address?$CB?6@ DB 'Got 1394'
	DB	' debugger base address!', 0aH, 00H		; `string'
; Function compile flags: /Odsp
CONST	ENDS
;	COMDAT ?BlSingularityInitialize@@YIXKPAU_FAR_POINTER@@0@Z
_TEXT	SEGMENT
tv624 = -96						; size = 8
_ApEntry16$ = -88					; size = 4
_NumberOfProcessors$ = -84				; size = 4
_Type$ = -68						; size = 4
_Base$ = -56						; size = 8
_StackStart$ = -48					; size = 8
_Size$ = -40						; size = 8
_PhysicalRegionHandle$ = -16				; size = 4
_Index$ = -12						; size = 4
_ApStartupLock$ = 8					; size = 4
?BlSingularityInitialize@@YIXKPAU_FAR_POINTER@@0@Z PROC	; BlSingularityInitialize, COMDAT
; _NumberOfProcessors$ = ecx
; _ApEntry16$ = edx

; 770  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	89 55 a8	 mov	 DWORD PTR _ApEntry16$[ebp], edx
  00009	89 4d ac	 mov	 DWORD PTR _NumberOfProcessors$[ebp], ecx

; 771  :     UINT64 Base;
; 772  :     UINT32 Index;
; 773  :     PVOID PhysicalRegionHandle;
; 774  :     UINT64 Size;
; 775  :     UINT32 Type;
; 776  :     UINT8 id;
; 777  :     UINT64 HighAddress;
; 778  :     UINT64 TempAddress;
; 779  :     UINT64 StackStart;
; 780  :     UINT64 PlayStart;
; 781  :     int i;
; 782  :     char* p;
; 783  : 
; 784  :     //
; 785  :     // Allocate processor array and set processor count.
; 786  :     //
; 787  : 
; 788  :     BlProcessor = (PBL_PROCESSOR) BlPoolAllocateBlock(sizeof(BL_PROCESSOR) * NumberOfProcessors);

  0000c	8b 4d ac	 mov	 ecx, DWORD PTR _NumberOfProcessors$[ebp]
  0000f	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  00012	e8 00 00 00 00	 call	 ?BlPoolAllocateBlock@@YIPAXK@Z ; BlPoolAllocateBlock
  00017	a3 00 00 00 00	 mov	 DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A, eax ; BlProcessor

; 789  :     BlProcessorCount = NumberOfProcessors;

  0001c	8b 45 ac	 mov	 eax, DWORD PTR _NumberOfProcessors$[ebp]
  0001f	a3 00 00 00 00	 mov	 DWORD PTR ?BlProcessorCount@@3KA, eax ; BlProcessorCount

; 790  : 
; 791  :     //
; 792  :     // Load distro.
; 793  :     //
; 794  : 
; 795  :     BlSingularityLoadDistro();

  00024	e8 00 00 00 00	 call	 ?BlSingularityLoadDistro@@YIXXZ ; BlSingularityLoadDistro

; 796  : 
; 797  :     //
; 798  :     // Load kernel image.
; 799  :     //
; 800  : 
; 801  :     BlSingularityLoadKernelImage();

  00029	e8 00 00 00 00	 call	 ?BlSingularityLoadKernelImage@@YIXXZ ; BlSingularityLoadKernelImage

; 802  : 
; 803  :     //
; 804  :     // Allocate native platform structure.
; 805  :     //
; 806  : 
; 807  :     BlPlatform = (Class_Microsoft_Singularity_Hal_Platform *) BlMmAllocatePhysicalRegion(ROUND_UP_TO_PAGES(sizeof(Class_Microsoft_Singularity_Hal_Platform)), BL_MM_PHYSICAL_REGION_NATIVE_PLATFORM);

  0002e	6a 07		 push	 7
  00030	5a		 pop	 edx
  00031	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00036	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  0003b	a3 00 00 00 00	 mov	 DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A, eax ; BlPlatform

; 808  : 
; 809  :     BlPlatform->Size = sizeof(Class_Microsoft_Singularity_Hal_Platform);

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00045	c7 40 04 d8 01
	00 00		 mov	 DWORD PTR [eax+4], 472	; 000001d8H

; 810  : 
; 811  :     if (IsApicPresent()) {

  0004c	e8 00 00 00 00	 call	 ?IsApicPresent@@YIIXZ	; IsApicPresent
  00051	85 c0		 test	 eax, eax
  00053	74 0e		 je	 SHORT $LN26@BlSingular@5

; 812  :         BlPlatform->hasApic = 1;

  00055	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0005a	c7 40 60 01 00
	00 00		 mov	 DWORD PTR [eax+96], 1

; 813  :     }
; 814  :     else {

  00061	eb 09		 jmp	 SHORT $LN25@BlSingular@5
$LN26@BlSingular@5:

; 815  :         BlPlatform->hasApic = 0;

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00068	83 60 60 00	 and	 DWORD PTR [eax+96], 0
$LN25@BlSingular@5:

; 816  :     }
; 817  : 
; 818  :     //
; 819  :     // Set offsets for per-cpu and per-thread pointers.
; 820  :     //
; 821  : 
; 822  :     BlPlatform->CpuRecordPointerOffset = 0;

  0006c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00071	83 60 74 00	 and	 DWORD PTR [eax+116], 0

; 823  :     BlPlatform->ThreadRecordPointerOffset = sizeof(PTR_TYPE);

  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0007a	c7 40 78 04 00
	00 00		 mov	 DWORD PTR [eax+120], 4

; 824  : 
; 825  :     //
; 826  :     // Set boot time.
; 827  :     //
; 828  : 
; 829  :     if (BlStartTime.Year != 0) {

  00081	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlStartTime@@3U_BL_TIME@@A, 0
  00088	74 63		 je	 SHORT $LN24@BlSingular@5

; 830  :         BlPlatform->BootYear = 2000 + BlStartTime.Year;

  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlStartTime@@3U_BL_TIME@@A
  0008f	05 d0 07 00 00	 add	 eax, 2000		; 000007d0H
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0009a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 831  :         BlPlatform->BootMonth = BlStartTime.Month;

  0009d	0f b6 05 04 00
	00 00		 movzx	 eax, BYTE PTR ?BlStartTime@@3U_BL_TIME@@A+4
  000a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000aa	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 832  :         BlPlatform->BootDay = BlStartTime.Day;

  000ad	0f b6 05 05 00
	00 00		 movzx	 eax, BYTE PTR ?BlStartTime@@3U_BL_TIME@@A+5
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000ba	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 833  :         BlPlatform->BootHour = BlStartTime.Hour;

  000bd	0f b6 05 06 00
	00 00		 movzx	 eax, BYTE PTR ?BlStartTime@@3U_BL_TIME@@A+6
  000c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000ca	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 834  :         BlPlatform->BootMinute = BlStartTime.Minute;

  000cd	0f b6 05 07 00
	00 00		 movzx	 eax, BYTE PTR ?BlStartTime@@3U_BL_TIME@@A+7
  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000da	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 835  :         BlPlatform->BootSecond = BlStartTime.Second;

  000dd	0f b6 05 08 00
	00 00		 movzx	 eax, BYTE PTR ?BlStartTime@@3U_BL_TIME@@A+8
  000e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000ea	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
$LN24@BlSingular@5:

; 836  :     }
; 837  : 
; 838  :     //
; 839  :     // Set processor count.
; 840  :     //
; 841  : 
; 842  :     BlPlatform->CpuRealCount = NumberOfProcessors;

  000ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000f2	8b 4d ac	 mov	 ecx, DWORD PTR _NumberOfProcessors$[ebp]
  000f5	89 48 24	 mov	 DWORD PTR [eax+36], ecx

; 843  :     BlPlatform->CpuMaxCount = NumberOfProcessors;

  000f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000fd	8b 4d ac	 mov	 ecx, DWORD PTR _NumberOfProcessors$[ebp]
  00100	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 844  : 
; 845  :     //
; 846  :     // Set MPS floating pointer structure address.
; 847  :     //
; 848  : 
; 849  :     BlPlatform->MpFloat32 = (UINT32) (ULONG_PTR) BlMpsFps;

  00103	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00108	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlMpsFps@@3PAXA ; BlMpsFps
  0010e	89 88 84 01 00
	00		 mov	 DWORD PTR [eax+388], ecx

; 850  : 
; 851  :     //
; 852  :     // Set kernel range.
; 853  :     //
; 854  : 
; 855  :     BlPlatform->KernelDllBase = (ULONG_PTR) BlKernelBase;

  00114	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00119	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  0011f	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx

; 856  :     BlPlatform->KernelDllFirstPage = (ULONG_PTR) BlKernelBase;

  00125	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0012a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  00130	89 88 94 00 00
	00		 mov	 DWORD PTR [eax+148], ecx

; 857  :     BlPlatform->KernelDllSize = BlKernelSize;

  00136	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0013b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelSize@@3KA ; BlKernelSize
  00141	89 88 90 00 00
	00		 mov	 DWORD PTR [eax+144], ecx

; 858  : 
; 859  :     //
; 860  :     // Set command line.
; 861  :     //
; 862  : 
; 863  :     BlPlatform->CommandLine32 = (ULONG_PTR) BlCommandLine;

  00147	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0014c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlCommandLine@@3PA_WA ; BlCommandLine
  00152	89 48 6c	 mov	 DWORD PTR [eax+108], ecx

; 864  :     BlPlatform->CommandLineCount = BlRtlStringLengthW(BlCommandLine);

  00155	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlCommandLine@@3PA_WA ; BlCommandLine
  0015b	e8 00 00 00 00	 call	 ?BlRtlStringLengthW@@YIKPB_W@Z ; BlRtlStringLengthW
  00160	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00166	89 41 70	 mov	 DWORD PTR [ecx+112], eax

; 865  : 
; 866  :     //
; 867  :     // Set PNP node list address.
; 868  :     //
; 869  : 
; 870  :     BlPlatform->PnpNodesAddr32 = (ULONG_PTR) BlPnpSystemDeviceNodeList;

  00169	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPnpSystemDeviceNodeList@@3PAU_PNP_SYSTEM_DEVICE_NODE@@A ; BlPnpSystemDeviceNodeList
  0016e	33 c9		 xor	 ecx, ecx
  00170	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00176	89 82 5c 01 00
	00		 mov	 DWORD PTR [edx+348], eax
  0017c	89 8a 60 01 00
	00		 mov	 DWORD PTR [edx+352], ecx

; 871  :     BlPlatform->PnpNodesSize32 = BlPnpSystemDeviceNodeListSize;

  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00187	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPnpSystemDeviceNodeListSize@@3KA ; BlPnpSystemDeviceNodeListSize
  0018d	89 88 64 01 00
	00		 mov	 DWORD PTR [eax+356], ecx

; 872  : 
; 873  :     //
; 874  :     // Set ISA information.
; 875  :     //
; 876  : 
; 877  :     BlPlatform->IsaCsns = BlPnpIsaConfiguration.NumberOfCardSelectNumbers;

  00193	0f b6 05 01 00
	00 00		 movzx	 eax, BYTE PTR ?BlPnpIsaConfiguration@@3U_PNP_ISA_CONFIGURATION@@A+1
  0019a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  001a0	89 81 78 01 00
	00		 mov	 DWORD PTR [ecx+376], eax

; 878  :     BlPlatform->IsaReadPort = BlPnpIsaConfiguration.DataReadPort;

  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  001ab	66 8b 0d 02 00
	00 00		 mov	 cx, WORD PTR ?BlPnpIsaConfiguration@@3U_PNP_ISA_CONFIGURATION@@A+2
  001b2	66 89 88 7c 01
	00 00		 mov	 WORD PTR [eax+380], cx

; 879  : 
; 880  :     //
; 881  :     // Set PCI BIOS information.
; 882  :     //
; 883  : 
; 884  :     BlPlatform->PciBiosAX = BlPciInstallationCheck.Eax;

  001b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  001be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPciInstallationCheck@@3U_PCI_INSTALLATION_CHECK@@A
  001c4	89 88 44 01 00
	00		 mov	 DWORD PTR [eax+324], ecx

; 885  :     BlPlatform->PciBiosBX = BlPciInstallationCheck.Ebx;

  001ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  001cf	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?BlPciInstallationCheck@@3U_PCI_INSTALLATION_CHECK@@A+4
  001d5	89 88 48 01 00
	00		 mov	 DWORD PTR [eax+328], ecx

; 886  :     BlPlatform->PciBiosCX = BlPciInstallationCheck.Ecx;

  001db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  001e0	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?BlPciInstallationCheck@@3U_PCI_INSTALLATION_CHECK@@A+8
  001e6	89 88 4c 01 00
	00		 mov	 DWORD PTR [eax+332], ecx

; 887  :     BlPlatform->PciBiosEDX = BlPciInstallationCheck.Edx;

  001ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  001f1	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?BlPciInstallationCheck@@3U_PCI_INSTALLATION_CHECK@@A+12
  001f7	89 88 50 01 00
	00		 mov	 DWORD PTR [eax+336], ecx

; 888  : 
; 889  :     //
; 890  :     // Set VESA information.
; 891  :     //
; 892  : 
; 893  :     BlPlatform->VesaBuffer = BlVesaVideoBuffer;

  001fd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlVesaVideoBuffer@@3KA ; BlVesaVideoBuffer
  00202	33 c9		 xor	 ecx, ecx
  00204	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0020a	89 82 9c 01 00
	00		 mov	 DWORD PTR [edx+412], eax
  00210	89 8a a0 01 00
	00		 mov	 DWORD PTR [edx+416], ecx

; 894  : 
; 895  :     //
; 896  :     // Set ACPI information.
; 897  :     //
; 898  : 
; 899  :     BlPlatform->AcpiRoot32 = (ULONG_PTR) BlAcpiRsdpAddress;

  00216	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlAcpiRsdpAddress@@3PAXA ; BlAcpiRsdpAddress
  0021b	33 c9		 xor	 ecx, ecx
  0021d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00223	89 82 54 01 00
	00		 mov	 DWORD PTR [edx+340], eax
  00229	89 8a 58 01 00
	00		 mov	 DWORD PTR [edx+344], ecx

; 900  : 
; 901  :     //
; 902  :     // Set file image table.
; 903  :     //
; 904  : 
; 905  :     BlPlatform->FileImageTableBase32 = (ULONG_PTR) BlSingularityFileImageTable;

  0022f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularityFileImageTable@@3PAUStruct_Microsoft_Singularity_Io_FileImage@@A ; BlSingularityFileImageTable
  00234	33 c9		 xor	 ecx, ecx
  00236	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0023c	89 82 d0 00 00
	00		 mov	 DWORD PTR [edx+208], eax
  00242	89 8a d4 00 00
	00		 mov	 DWORD PTR [edx+212], ecx

; 906  :     BlPlatform->FileImageTableEntries = BlSingularityFileImageTableSize;

  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0024d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularityFileImageTableSize@@3KA ; BlSingularityFileImageTableSize
  00253	89 88 d8 00 00
	00		 mov	 DWORD PTR [eax+216], ecx

; 907  : 
; 908  :     //
; 909  :     // Allocate log record and text buffers.
; 910  :     //
; 911  : 
; 912  :     BlPlatform->LogRecordBuffer = (ULONG_PTR) BlMmAllocatePhysicalRegion(SINGULARITY_LOG_RECORD_SIZE, BL_MM_PHYSICAL_REGION_LOG_RECORD);

  00259	6a 09		 push	 9
  0025b	5a		 pop	 edx
  0025c	b9 00 00 02 00	 mov	 ecx, 131072		; 00020000H
  00261	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  00266	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0026c	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 913  :     BlPlatform->LogRecordSize = SINGULARITY_LOG_RECORD_SIZE;

  0026f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00274	c7 80 80 00 00
	00 00 00 02 00	 mov	 DWORD PTR [eax+128], 131072 ; 00020000H

; 914  : 
; 915  :     BlPlatform->LogTextBuffer = (ULONG_PTR) BlMmAllocatePhysicalRegion(SINGULARITY_LOG_TEXT_SIZE, BL_MM_PHYSICAL_REGION_LOG_TEXT);

  0027e	6a 0a		 push	 10			; 0000000aH
  00280	5a		 pop	 edx
  00281	b9 00 00 02 00	 mov	 ecx, 131072		; 00020000H
  00286	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  0028b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00291	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 916  :     BlPlatform->LogTextSize = SINGULARITY_LOG_TEXT_SIZE;

  00297	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0029c	c7 80 88 00 00
	00 00 00 02 00	 mov	 DWORD PTR [eax+136], 131072 ; 00020000H

; 917  : 
; 918  :     //
; 919  :     // Set debugger settings.
; 920  :     //
; 921  : 
; 922  :     if (BlKdComPort != 0) {

  002a6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?BlKdComPort@@3EA ; BlKdComPort
  002ad	85 c0		 test	 eax, eax
  002af	74 2d		 je	 SHORT $LN23@BlSingular@5

; 923  : 
; 924  :         BlPlatform->DebuggerType = Class_Microsoft_Singularity_Hal_Platform_DEBUGGER_SERIAL;

  002b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  002b6	c7 80 a0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+160], 1

; 925  :         BlPlatform->DebugBasePort = BlComBasePort[BlKdComPort];

  002c0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?BlKdComPort@@3EA ; BlKdComPort
  002c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  002cd	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR ?BlComBasePort@@3QBGB[eax*2]
  002d5	66 89 81 ac 00
	00 00		 mov	 WORD PTR [ecx+172], ax
  002dc	eb 7d		 jmp	 SHORT $LN22@BlSingular@5
$LN23@BlSingular@5:

; 926  : 
; 927  :     }
; 928  :     else if (BlPciOhci1394BaseAddress != 0) {

  002de	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlPciOhci1394BaseAddress@@3KA, 0 ; BlPciOhci1394BaseAddress
  002e5	74 5d		 je	 SHORT $LN21@BlSingular@5

; 929  : 
; 930  :         BlRtlPrintf("Got 1394 debugger base address!\n");

  002e7	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@DIKHLCCP@Got?51394?5debugger?5base?5address?$CB?6@
  002ec	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  002f1	59		 pop	 ecx

; 931  :         BlPlatform->DebuggerType = Class_Microsoft_Singularity_Hal_Platform_DEBUGGER_1394;

  002f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  002f7	c7 80 a0 00 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+160], 2

; 932  :         BlPlatform->Ohci1394Base = BlPciOhci1394BaseAddress;

  00301	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPciOhci1394BaseAddress@@3KA ; BlPciOhci1394BaseAddress
  00306	33 c9		 xor	 ecx, ecx
  00308	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0030e	89 82 88 01 00
	00		 mov	 DWORD PTR [edx+392], eax
  00314	89 8a 8c 01 00
	00		 mov	 DWORD PTR [edx+396], ecx

; 933  :         BlPlatform->Ohci1394BufferAddr32 = (ULONG_PTR) BlSingularityOhci1394Buffer;

  0031a	b8 00 00 00 00	 mov	 eax, OFFSET ?BlSingularityOhci1394Buffer@@3PAEA ; BlSingularityOhci1394Buffer
  0031f	33 c9		 xor	 ecx, ecx
  00321	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00327	89 82 90 01 00
	00		 mov	 DWORD PTR [edx+400], eax
  0032d	89 8a 94 01 00
	00		 mov	 DWORD PTR [edx+404], ecx

; 934  :         BlPlatform->Ohci1394BufferSize32 = sizeof(BlSingularityOhci1394Buffer);

  00333	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00338	c7 80 98 01 00
	00 00 30 00 00	 mov	 DWORD PTR [eax+408], 12288 ; 00003000H

; 935  : 
; 936  :     }
; 937  :     else {

  00342	eb 17		 jmp	 SHORT $LN22@BlSingular@5
$LN21@BlSingular@5:

; 938  : 
; 939  :         BlRtlPrintf("Debugger OFF\n");

  00344	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CLNMNDLH@Debugger?5OFF?6?$AA@
  00349	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0034e	59		 pop	 ecx

; 940  :         BlPlatform->DebuggerType = Class_Microsoft_Singularity_Hal_Platform_DEBUGGER_NONE;

  0034f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00354	83 a0 a0 00 00
	00 00		 and	 DWORD PTR [eax+160], 0
$LN22@BlSingular@5:

; 941  : 
; 942  :     }
; 943  : 
; 944  :     BlPlatform->TwiddleSpinBase = 0xb8000;

  0035b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00360	c7 80 b0 00 00
	00 00 80 0b 00	 mov	 DWORD PTR [eax+176], 753664 ; 000b8000H

; 945  : 
; 946  :     //
; 947  :     // Set exit routine.
; 948  :     //
; 949  : 
; 950  :     BlPlatform->Kill32 = (ULONG_PTR) BlSingularityExit;

  0036a	b8 00 00 00 00	 mov	 eax, OFFSET ?BlSingularityExit@@YIXXZ ; BlSingularityExit
  0036f	33 c9		 xor	 ecx, ecx
  00371	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00377	89 82 bc 00 00
	00		 mov	 DWORD PTR [edx+188], eax
  0037d	89 8a c0 00 00
	00		 mov	 DWORD PTR [edx+192], ecx

; 951  : 
; 952  :     //
; 953  :     // Set entry routine and startup lock address for application processors.
; 954  :     //
; 955  : 
; 956  :     BlPlatform->MpEnter32 = (ULONG_PTR) BlRtlConvertFarPointerToLinearPointer(ApEntry16);

  00383	8b 4d a8	 mov	 ecx, DWORD PTR _ApEntry16$[ebp]
  00386	e8 00 00 00 00	 call	 ?BlRtlConvertFarPointerToLinearPointer@@YIPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertFarPointerToLinearPointer
  0038b	33 c9		 xor	 ecx, ecx
  0038d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00393	89 82 a4 01 00
	00		 mov	 DWORD PTR [edx+420], eax
  00399	89 8a a8 01 00
	00		 mov	 DWORD PTR [edx+424], ecx

; 957  :     BlPlatform->MpStartupLock32 = (ULONG_PTR) BlRtlConvertFarPointerToLinearPointer(ApStartupLock);

  0039f	8b 4d 08	 mov	 ecx, DWORD PTR _ApStartupLock$[ebp]
  003a2	e8 00 00 00 00	 call	 ?BlRtlConvertFarPointerToLinearPointer@@YIPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertFarPointerToLinearPointer
  003a7	33 c9		 xor	 ecx, ecx
  003a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  003af	89 82 b4 01 00
	00		 mov	 DWORD PTR [edx+436], eax
  003b5	89 8a b8 01 00
	00		 mov	 DWORD PTR [edx+440], ecx

; 958  : 
; 959  :     //
; 960  :     // Allocate native processor structures.
; 961  :     //
; 962  : 
; 963  :     BlCpuArray =
; 964  :         (Class_Microsoft_Singularity_Hal_Cpu *) BlMmAllocatePhysicalRegion(ROUND_UP_TO_PAGES(sizeof(Class_Microsoft_Singularity_Hal_Cpu) * NumberOfProcessors), BL_MM_PHYSICAL_REGION_NATIVE_PROCESSOR);

  003bb	8b 4d ac	 mov	 ecx, DWORD PTR _NumberOfProcessors$[ebp]
  003be	69 c9 8d 00 00
	00		 imul	 ecx, 141		; 0000008dH
  003c4	81 c1 ff 0f 00
	00		 add	 ecx, 4095		; 00000fffH
  003ca	81 e1 00 f0 ff
	ff		 and	 ecx, -4096		; fffff000H
  003d0	6a 08		 push	 8
  003d2	5a		 pop	 edx
  003d3	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  003d8	a3 00 00 00 00	 mov	 DWORD PTR ?BlCpuArray@@3PAUClass_Microsoft_Singularity_Hal_Cpu@@A, eax ; BlCpuArray

; 965  : 
; 966  :     BlPlatform->Cpus = (ULONG_PTR) BlCpuArray;

  003dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlCpuArray@@3PAUClass_Microsoft_Singularity_Hal_Cpu@@A ; BlCpuArray
  003e2	33 c9		 xor	 ecx, ecx
  003e4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  003ea	89 82 f8 00 00
	00		 mov	 DWORD PTR [edx+248], eax
  003f0	89 8a fc 00 00
	00		 mov	 DWORD PTR [edx+252], ecx

; 967  : 
; 968  :     //
; 969  :     // Allocate per-processor resources upfront.
; 970  :     //
; 971  : 
; 972  :     for (Index = 0; Index < NumberOfProcessors; Index += 1) {

  003f6	83 65 f4 00	 and	 DWORD PTR _Index$[ebp], 0
  003fa	eb 07		 jmp	 SHORT $LN19@BlSingular@5
$LN18@BlSingular@5:
  003fc	8b 45 f4	 mov	 eax, DWORD PTR _Index$[ebp]
  003ff	40		 inc	 eax
  00400	89 45 f4	 mov	 DWORD PTR _Index$[ebp], eax
$LN19@BlSingular@5:
  00403	8b 45 f4	 mov	 eax, DWORD PTR _Index$[ebp]
  00406	3b 45 ac	 cmp	 eax, DWORD PTR _NumberOfProcessors$[ebp]
  00409	0f 83 95 00 00
	00		 jae	 $LN17@BlSingular@5

; 973  : 
; 974  :         BlProcessor[Index].Index = Index;

  0040f	8b 45 f4	 mov	 eax, DWORD PTR _Index$[ebp]
  00412	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00415	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0041b	8b 55 f4	 mov	 edx, DWORD PTR _Index$[ebp]
  0041e	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 975  :         BlProcessor[Index].Cpu = &BlCpuArray[Index];

  00421	8b 45 f4	 mov	 eax, DWORD PTR _Index$[ebp]
  00424	69 c0 8d 00 00
	00		 imul	 eax, 141		; 0000008dH
  0042a	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?BlCpuArray@@3PAUClass_Microsoft_Singularity_Hal_Cpu@@A ; BlCpuArray
  00430	8b 4d f4	 mov	 ecx, DWORD PTR _Index$[ebp]
  00433	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  00436	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0043c	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 976  :         BlProcessor[Index].ContextPage = (PVOID) BlMmAllocatePhysicalRegion(2 * PAGE_SIZE, BL_MM_PHYSICAL_REGION_CONTEXT);

  00440	6a 0c		 push	 12			; 0000000cH
  00442	5a		 pop	 edx
  00443	b9 00 20 00 00	 mov	 ecx, 8192		; 00002000H
  00448	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  0044d	8b 4d f4	 mov	 ecx, DWORD PTR _Index$[ebp]
  00450	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  00453	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00459	89 44 0a 10	 mov	 DWORD PTR [edx+ecx+16], eax

; 977  :         BlProcessor[Index].BasePage = (PVOID) ((ULONG_PTR) BlProcessor[Index].ContextPage + PAGE_SIZE);

  0045d	8b 45 f4	 mov	 eax, DWORD PTR _Index$[ebp]
  00460	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00463	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00469	8b 44 01 10	 mov	 eax, DWORD PTR [ecx+eax+16]
  0046d	05 00 10 00 00	 add	 eax, 4096		; 00001000H
  00472	8b 4d f4	 mov	 ecx, DWORD PTR _Index$[ebp]
  00475	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  00478	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0047e	89 44 0a 14	 mov	 DWORD PTR [edx+ecx+20], eax

; 978  :         BlProcessor[Index].TaskPage = (BL_TASK_SEGMENT *) BlMmAllocatePhysicalRegion(PAGE_SIZE, BL_MM_PHYSICAL_REGION_TASK);

  00482	6a 0d		 push	 13			; 0000000dH
  00484	5a		 pop	 edx
  00485	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0048a	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  0048f	8b 4d f4	 mov	 ecx, DWORD PTR _Index$[ebp]
  00492	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  00495	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0049b	89 44 0a 18	 mov	 DWORD PTR [edx+ecx+24], eax

; 979  :     }

  0049f	e9 58 ff ff ff	 jmp	 $LN18@BlSingular@5
$LN17@BlSingular@5:

; 980  : 
; 981  :     //
; 982  :     // Allocate kernel stack for the bootstrap processor.
; 983  :     //
; 984  : 
; 985  :     StackStart = BlMmAllocatePhysicalRegion(SINGULARITY_KERNEL_STACK_SIZE,
; 986  :                         BL_MM_PHYSICAL_REGION_KERNEL_STACK);

  004a4	6a 0b		 push	 11			; 0000000bH
  004a6	5a		 pop	 edx
  004a7	b9 00 00 0c 00	 mov	 ecx, 786432		; 000c0000H
  004ac	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  004b1	89 45 d0	 mov	 DWORD PTR _StackStart$[ebp], eax
  004b4	89 55 d4	 mov	 DWORD PTR _StackStart$[ebp+4], edx

; 987  :     if (0 == StackStart) {

  004b7	83 7d d0 00	 cmp	 DWORD PTR _StackStart$[ebp], 0
  004bb	75 28		 jne	 SHORT $LN16@BlSingular@5
  004bd	83 7d d4 00	 cmp	 DWORD PTR _StackStart$[ebp+4], 0
  004c1	75 22		 jne	 SHORT $LN16@BlSingular@5

; 988  :     BlRtlPrintf("Failed to allocate kernel stack.\n", StackStart);

  004c3	ff 75 d4	 push	 DWORD PTR _StackStart$[ebp+4]
  004c6	ff 75 d0	 push	 DWORD PTR _StackStart$[ebp]
  004c9	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@JLPBNPHN@Failed?5to?5allocate?5kernel?5stack?4@
  004ce	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  004d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 989  :     BlRtlHalt();

  004d6	ba dd 03 00 00	 mov	 edx, 989		; 000003ddH
  004db	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  004e0	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN16@BlSingular@5:

; 990  :     }
; 991  : 
; 992  :     BlRtlPrintf("Allocated kernel stack at 0x%016I64x\n", StackStart);

  004e5	ff 75 d4	 push	 DWORD PTR _StackStart$[ebp+4]
  004e8	ff 75 d0	 push	 DWORD PTR _StackStart$[ebp]
  004eb	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@JMHGECHE@Allocated?5kernel?5stack?5at?50x?$CF016@
  004f0	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  004f5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 993  : 
; 994  :     BlProcessor[0].KernelStack = (PVOID) (StackStart);

  004f8	8b 45 d0	 mov	 eax, DWORD PTR _StackStart$[ebp]
  004fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00501	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 995  :     BlProcessor[0].Cpu->DomainBsp = TRUE;

  00504	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00509	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0050c	c7 40 18 01 00
	00 00		 mov	 DWORD PTR [eax+24], 1

; 996  : 
; 997  :     BlPlatform->OutgoingMessage   = 0;

  00513	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00518	83 60 38 00	 and	 DWORD PTR [eax+56], 0

; 998  :     BlPlatform->OutgoingCount     = 0;

  0051c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00521	83 60 3c 00	 and	 DWORD PTR [eax+60], 0

; 999  :     BlPlatform->IncomingFree      = 0;

  00525	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0052a	83 60 40 00	 and	 DWORD PTR [eax+64], 0

; 1000 :     BlPlatform->IncomingFreeCount = 0;

  0052e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00533	83 60 44 00	 and	 DWORD PTR [eax+68], 0

; 1001 :     BlPlatform->IncomingMessage   = 0;

  00537	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0053c	83 60 48 00	 and	 DWORD PTR [eax+72], 0

; 1002 :     BlPlatform->IncomingCount     = 0;

  00540	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00545	83 60 4c 00	 and	 DWORD PTR [eax+76], 0

; 1003 :     BlPlatform->OutgoingFree      = 0;

  00549	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0054e	83 60 50 00	 and	 DWORD PTR [eax+80], 0

; 1004 :     BlPlatform->OutgoingFreeCount = 0;

  00552	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00557	83 60 54 00	 and	 DWORD PTR [eax+84], 0

; 1005 :     BlPlatform->MaxBufferLength   = 0;

  0055b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00560	83 60 58 00	 and	 DWORD PTR [eax+88], 0

; 1006 : 
; 1007 :     BlProcessor[0].KernelStackSize = SINGULARITY_KERNEL_STACK_SIZE;

  00564	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00569	c7 40 0c 00 00
	0c 00		 mov	 DWORD PTR [eax+12], 786432 ; 000c0000H

; 1008 : 
; 1009 :     //
; 1010 :     // Initialize the first processor structure.
; 1011 :     //
; 1012 : 
; 1013 :     BlSingularityInitializeProcessor(0);

  00570	33 c9		 xor	 ecx, ecx
  00572	e8 00 00 00 00	 call	 ?BlSingularityInitializeProcessor@@YIXK@Z ; BlSingularityInitializeProcessor

; 1014 : 
; 1015 :     //
; 1016 :     // Allocate memory map for Singularity.
; 1017 :     //
; 1018 : 
; 1019 :     BlSingularitySmap = (PBL_SMAP) BlMmAllocatePhysicalRegion(sizeof(BL_SMAP), BL_MM_PHYSICAL_REGION_SINGULARITY_SMAP);

  00577	6a 10		 push	 16			; 00000010H
  00579	5a		 pop	 edx
  0057a	b9 08 0c 00 00	 mov	 ecx, 3080		; 00000c08H
  0057f	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  00584	a3 00 00 00 00	 mov	 DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A, eax ; BlSingularitySmap
$LN15@BlSingular@5:

; 1020 : 
; 1021 :     //
; 1022 :     // Claim all remaining physical memory for Singularity.
; 1023 :     //
; 1024 : 
; 1025 :     while (BlMmFindFreePhysicalRegion(&Base, &Size) != FALSE) {

  00589	8d 55 d8	 lea	 edx, DWORD PTR _Size$[ebp]
  0058c	8d 4d c8	 lea	 ecx, DWORD PTR _Base$[ebp]
  0058f	e8 00 00 00 00	 call	 ?BlMmFindFreePhysicalRegion@@YIEPA_K0@Z ; BlMmFindFreePhysicalRegion
  00594	0f b6 c0	 movzx	 eax, al
  00597	85 c0		 test	 eax, eax
  00599	74 16		 je	 SHORT $LN14@BlSingular@5

; 1026 : 
; 1027 :         BlMmAllocateSpecificPhysicalRegion(Base, Size, BL_MM_PHYSICAL_REGION_SINGULARITY);

  0059b	ff 75 dc	 push	 DWORD PTR _Size$[ebp+4]
  0059e	ff 75 d8	 push	 DWORD PTR _Size$[ebp]
  005a1	ff 75 cc	 push	 DWORD PTR _Base$[ebp+4]
  005a4	ff 75 c8	 push	 DWORD PTR _Base$[ebp]
  005a7	6a 0e		 push	 14			; 0000000eH
  005a9	59		 pop	 ecx
  005aa	e8 00 00 00 00	 call	 ?BlMmAllocateSpecificPhysicalRegion@@YIE_K0K@Z ; BlMmAllocateSpecificPhysicalRegion

; 1028 :     }

  005af	eb d8		 jmp	 SHORT $LN15@BlSingular@5
$LN14@BlSingular@5:

; 1029 : 
; 1030 :     //
; 1031 :     // Generate memory map for Singularity.
; 1032 :     //
; 1033 : 
; 1034 :     BlRtlZeroMemory(BlSingularitySmap, sizeof(BL_SMAP));

  005b1	ba 08 0c 00 00	 mov	 edx, 3080		; 00000c08H
  005b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  005bc	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 1035 : 
; 1036 :     BlPlatform->PhysicalBase = (ULONG_PTR) -1;

  005c1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  005c6	83 48 34 ff	 or	 DWORD PTR [eax+52], -1

; 1037 : 
; 1038 :     PhysicalRegionHandle = NULL;

  005ca	83 65 f0 00	 and	 DWORD PTR _PhysicalRegionHandle$[ebp], 0
$LN13@BlSingular@5:

; 1039 : 
; 1040 :     while (BlMmGetNextPhysicalRegion(&PhysicalRegionHandle,
; 1041 :                                      &Base,
; 1042 :                                      &Size,
; 1043 :                                      &Type) != FALSE) {

  005ce	8d 45 bc	 lea	 eax, DWORD PTR _Type$[ebp]
  005d1	50		 push	 eax
  005d2	8d 45 d8	 lea	 eax, DWORD PTR _Size$[ebp]
  005d5	50		 push	 eax
  005d6	8d 55 c8	 lea	 edx, DWORD PTR _Base$[ebp]
  005d9	8d 4d f0	 lea	 ecx, DWORD PTR _PhysicalRegionHandle$[ebp]
  005dc	e8 00 00 00 00	 call	 ?BlMmGetNextPhysicalRegion@@YIEPAPAXPA_K1PAK@Z ; BlMmGetNextPhysicalRegion
  005e1	0f b6 c0	 movzx	 eax, al
  005e4	85 c0		 test	 eax, eax
  005e6	0f 84 39 02 00
	00		 je	 $LN12@BlSingular@5

; 1044 : 
; 1045 :         if ((Type == BL_MM_PHYSICAL_REGION_SINGULARITY) ||
; 1046 :             (Type == BL_MM_PHYSICAL_REGION_KERNEL_IMAGE) ||
; 1047 :             (Type == BL_MM_PHYSICAL_REGION_NATIVE_PLATFORM) ||
; 1048 :             (Type == BL_MM_PHYSICAL_REGION_NATIVE_PROCESSOR) ||
; 1049 :             (Type == BL_MM_PHYSICAL_REGION_KERNEL_STACK)
; 1050 :             ) {

  005ec	83 7d bc 0e	 cmp	 DWORD PTR _Type$[ebp], 14 ; 0000000eH
  005f0	74 1c		 je	 SHORT $LN10@BlSingular@5
  005f2	83 7d bc 06	 cmp	 DWORD PTR _Type$[ebp], 6
  005f6	74 16		 je	 SHORT $LN10@BlSingular@5
  005f8	83 7d bc 07	 cmp	 DWORD PTR _Type$[ebp], 7
  005fc	74 10		 je	 SHORT $LN10@BlSingular@5
  005fe	83 7d bc 08	 cmp	 DWORD PTR _Type$[ebp], 8
  00602	74 0a		 je	 SHORT $LN10@BlSingular@5
  00604	83 7d bc 0b	 cmp	 DWORD PTR _Type$[ebp], 11 ; 0000000bH
  00608	0f 85 9b 01 00
	00		 jne	 $LN11@BlSingular@5
$LN10@BlSingular@5:

; 1051 : 
; 1052 :             if (Type == BL_MM_PHYSICAL_REGION_SINGULARITY) {

  0060e	83 7d bc 0e	 cmp	 DWORD PTR _Type$[ebp], 14 ; 0000000eH
  00612	75 64		 jne	 SHORT $LN9@BlSingular@5

; 1053 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Base = Base;

  00614	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00619	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  0061f	6b c0 18	 imul	 eax, 24			; 00000018H
  00622	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00628	8b 55 c8	 mov	 edx, DWORD PTR _Base$[ebp]
  0062b	89 14 01	 mov	 DWORD PTR [ecx+eax], edx
  0062e	8b 55 cc	 mov	 edx, DWORD PTR _Base$[ebp+4]
  00631	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1054 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Size = Size;

  00635	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0063a	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  00640	6b c0 18	 imul	 eax, 24			; 00000018H
  00643	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00649	8b 55 d8	 mov	 edx, DWORD PTR _Size$[ebp]
  0064c	89 54 01 08	 mov	 DWORD PTR [ecx+eax+8], edx
  00650	8b 55 dc	 mov	 edx, DWORD PTR _Size$[ebp+4]
  00653	89 54 01 0c	 mov	 DWORD PTR [ecx+eax+12], edx

; 1055 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Type = BL_SMAP_AVAILABLE;

  00657	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0065c	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  00662	6b c0 18	 imul	 eax, 24			; 00000018H
  00665	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0066b	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 1056 :             }
; 1057 :             else if (Type == BL_MM_PHYSICAL_REGION_KERNEL_IMAGE ||

  00673	e9 e9 00 00 00	 jmp	 $LN8@BlSingular@5
$LN9@BlSingular@5:

; 1058 :                       (Type == BL_MM_PHYSICAL_REGION_NATIVE_PLATFORM) ||
; 1059 :                       (Type == BL_MM_PHYSICAL_REGION_NATIVE_PROCESSOR)) {

  00678	83 7d bc 06	 cmp	 DWORD PTR _Type$[ebp], 6
  0067c	74 0c		 je	 SHORT $LN6@BlSingular@5
  0067e	83 7d bc 07	 cmp	 DWORD PTR _Type$[ebp], 7
  00682	74 06		 je	 SHORT $LN6@BlSingular@5
  00684	83 7d bc 08	 cmp	 DWORD PTR _Type$[ebp], 8
  00688	75 61		 jne	 SHORT $LN7@BlSingular@5
$LN6@BlSingular@5:

; 1060 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Base = Base;

  0068a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0068f	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  00695	6b c0 18	 imul	 eax, 24			; 00000018H
  00698	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0069e	8b 55 c8	 mov	 edx, DWORD PTR _Base$[ebp]
  006a1	89 14 01	 mov	 DWORD PTR [ecx+eax], edx
  006a4	8b 55 cc	 mov	 edx, DWORD PTR _Base$[ebp+4]
  006a7	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1061 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Size = Size;

  006ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  006b0	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  006b6	6b c0 18	 imul	 eax, 24			; 00000018H
  006b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  006bf	8b 55 d8	 mov	 edx, DWORD PTR _Size$[ebp]
  006c2	89 54 01 08	 mov	 DWORD PTR [ecx+eax+8], edx
  006c6	8b 55 dc	 mov	 edx, DWORD PTR _Size$[ebp+4]
  006c9	89 54 01 0c	 mov	 DWORD PTR [ecx+eax+12], edx

; 1062 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Type = BL_SMAP_KERNEL_NONGC;

  006cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  006d2	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  006d8	6b c0 18	 imul	 eax, 24			; 00000018H
  006db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  006e1	c7 44 01 10 06
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 6
  006e9	eb 76		 jmp	 SHORT $LN8@BlSingular@5
$LN7@BlSingular@5:

; 1063 :             }
; 1064 :             else if (Type == BL_MM_PHYSICAL_REGION_KERNEL_STACK) {

  006eb	83 7d bc 0b	 cmp	 DWORD PTR _Type$[ebp], 11 ; 0000000bH
  006ef	75 61		 jne	 SHORT $LN4@BlSingular@5

; 1065 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Base = Base;

  006f1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  006f6	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  006fc	6b c0 18	 imul	 eax, 24			; 00000018H
  006ff	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00705	8b 55 c8	 mov	 edx, DWORD PTR _Base$[ebp]
  00708	89 14 01	 mov	 DWORD PTR [ecx+eax], edx
  0070b	8b 55 cc	 mov	 edx, DWORD PTR _Base$[ebp+4]
  0070e	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1066 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Size = Size;

  00712	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00717	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  0071d	6b c0 18	 imul	 eax, 24			; 00000018H
  00720	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00726	8b 55 d8	 mov	 edx, DWORD PTR _Size$[ebp]
  00729	89 54 01 08	 mov	 DWORD PTR [ecx+eax+8], edx
  0072d	8b 55 dc	 mov	 edx, DWORD PTR _Size$[ebp+4]
  00730	89 54 01 0c	 mov	 DWORD PTR [ecx+eax+12], edx

; 1067 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Type = BL_SMAP_KERNEL_STACK;

  00734	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00739	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  0073f	6b c0 18	 imul	 eax, 24			; 00000018H
  00742	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00748	c7 44 01 10 07
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 7

; 1068 :             }
; 1069 :             else {

  00750	eb 0f		 jmp	 SHORT $LN8@BlSingular@5
$LN4@BlSingular@5:

; 1070 :                 BlRtlPrintf("UNKNOWN TYPE MEMORY??? %d\n", Type);

  00752	ff 75 bc	 push	 DWORD PTR _Type$[ebp]
  00755	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JBGMGGOL@UNKNOWN?5TYPE?5MEMORY?$DP?$DP?$DP?5?$CFd?6?$AA@
  0075a	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0075f	59		 pop	 ecx
  00760	59		 pop	 ecx
$LN8@BlSingular@5:

; 1071 :             }
; 1072 :             if (Base < BlPlatform->PhysicalBase) {

  00761	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00766	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  00769	33 c9		 xor	 ecx, ecx
  0076b	89 45 a0	 mov	 DWORD PTR tv624[ebp], eax
  0076e	89 4d a4	 mov	 DWORD PTR tv624[ebp+4], ecx
  00771	8b 45 cc	 mov	 eax, DWORD PTR _Base$[ebp+4]
  00774	3b 45 a4	 cmp	 eax, DWORD PTR tv624[ebp+4]
  00777	77 16		 ja	 SHORT $LN2@BlSingular@5
  00779	72 08		 jb	 SHORT $LN29@BlSingular@5
  0077b	8b 45 c8	 mov	 eax, DWORD PTR _Base$[ebp]
  0077e	3b 45 a0	 cmp	 eax, DWORD PTR tv624[ebp]
  00781	73 0c		 jae	 SHORT $LN2@BlSingular@5
$LN29@BlSingular@5:

; 1073 :                 BlPlatform->PhysicalBase = (ULONG_PTR) Base;

  00783	8b 45 c8	 mov	 eax, DWORD PTR _Base$[ebp]
  00786	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0078c	89 41 34	 mov	 DWORD PTR [ecx+52], eax
$LN2@BlSingular@5:

; 1074 :             }
; 1075 :             BlSingularitySmap->EntryCount += 1;

  0078f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00794	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  0079a	40		 inc	 eax
  0079b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  007a1	89 81 00 0c 00
	00		 mov	 DWORD PTR [ecx+3072], eax

; 1076 :         }
; 1077 :         else {

  007a7	eb 77		 jmp	 SHORT $LN1@BlSingular@5
$LN11@BlSingular@5:

; 1078 : #if MM_VERBOSE
; 1079 :             BlRtlPrintf("Building SMAP marking type %s nongc\n", BlMmPhysicalRegionTypeString(Type));
; 1080 : #endif
; 1081 :             BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Base = Base;

  007a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  007ae	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  007b4	6b c0 18	 imul	 eax, 24			; 00000018H
  007b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  007bd	8b 55 c8	 mov	 edx, DWORD PTR _Base$[ebp]
  007c0	89 14 01	 mov	 DWORD PTR [ecx+eax], edx
  007c3	8b 55 cc	 mov	 edx, DWORD PTR _Base$[ebp+4]
  007c6	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1082 :             BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Size = Size;

  007ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  007cf	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  007d5	6b c0 18	 imul	 eax, 24			; 00000018H
  007d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  007de	8b 55 d8	 mov	 edx, DWORD PTR _Size$[ebp]
  007e1	89 54 01 08	 mov	 DWORD PTR [ecx+eax+8], edx
  007e5	8b 55 dc	 mov	 edx, DWORD PTR _Size$[ebp+4]
  007e8	89 54 01 0c	 mov	 DWORD PTR [ecx+eax+12], edx

; 1083 :             BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Type = BL_SMAP_KERNEL_NONGC;

  007ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  007f1	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  007f7	6b c0 18	 imul	 eax, 24			; 00000018H
  007fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00800	c7 44 01 10 06
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 6

; 1084 :             BlSingularitySmap->EntryCount += 1;

  00808	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0080d	8b 80 00 0c 00
	00		 mov	 eax, DWORD PTR [eax+3072]
  00813	40		 inc	 eax
  00814	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0081a	89 81 00 0c 00
	00		 mov	 DWORD PTR [ecx+3072], eax
$LN1@BlSingular@5:

; 1085 :         }
; 1086 :     }

  00820	e9 a9 fd ff ff	 jmp	 $LN13@BlSingular@5
$LN12@BlSingular@5:

; 1087 : 
; 1088 :     BlPlatform->Smap32 = (ULONG_PTR) (PVOID) BlSingularitySmap->Entry;

  00825	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0082a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00830	89 48 2c	 mov	 DWORD PTR [eax+44], ecx

; 1089 :     BlPlatform->SmapCount = BlSingularitySmap->EntryCount;

  00833	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00838	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0083e	8b 89 00 0c 00
	00		 mov	 ecx, DWORD PTR [ecx+3072]
  00844	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 1090 : 
; 1091 : #if MM_VERBOSE
; 1092 : 
; 1093 :     BlMmDumpPhysicalRegionList();
; 1094 : 
; 1095 : #endif
; 1096 : 
; 1097 :     //
; 1098 :     // Start processor 0.
; 1099 :     //
; 1100 : 
; 1101 :     BlSingularityProcessorToStart = 0;

  00847	83 25 00 00 00
	00 00		 and	 DWORD PTR ?BlSingularityProcessorToStart@@3KA, 0 ; BlSingularityProcessorToStart

; 1102 : 
; 1103 :     BlMmSwitchStack((PVOID) BlProcessor[0].Cpu->KernelStackBegin, BlSingularityEnterKernel);

  0084e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00853	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00856	ba 00 00 00 00	 mov	 edx, OFFSET ?BlSingularityEnterKernel@@YIXXZ ; BlSingularityEnterKernel
  0085b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0085e	e8 00 00 00 00	 call	 ?BlMmSwitchStack@@YIXPAX0@Z ; BlMmSwitchStack

; 1104 : 
; 1105 :     return;
; 1106 : }

  00863	c9		 leave
  00864	c2 04 00	 ret	 4
?BlSingularityInitialize@@YIXKPAU_FAR_POINTER@@0@Z ENDP	; BlSingularityInitialize
_TEXT	ENDS
PUBLIC	?BlSingularityApEntry@@YIXXZ			; BlSingularityApEntry
; Function compile flags: /Odsp
;	COMDAT ?BlSingularityApEntry@@YIXXZ
_TEXT	SEGMENT
_Index$ = -8						; size = 4
?BlSingularityApEntry@@YIXXZ PROC			; BlSingularityApEntry, COMDAT

; 1121 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 1122 :     UINT32 Index;
; 1123 : 
; 1124 :     UINT8 MyIdChar;
; 1125 :     UINT32 MyId;
; 1126 :     UINT32 MyStack;
; 1127 :     Class_Microsoft_Singularity_Hal_Cpu *Processor;
; 1128 :     //    BlRtlPrintf("In Ap Entry\n");
; 1129 : 
; 1130 :     //    BlRtlPrintf("Non AP processor booting\n");
; 1131 :     Index = BlPlatform->MpBootInfo.TargetCpu;

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0000b	8b 80 cc 01 00
	00		 mov	 eax, DWORD PTR [eax+460]
  00011	89 45 f8	 mov	 DWORD PTR _Index$[ebp], eax

; 1132 : 
; 1133 :     if (Index == 0) {

  00014	83 7d f8 00	 cmp	 DWORD PTR _Index$[ebp], 0
  00018	75 0f		 jne	 SHORT $LN1@BlSingular@6

; 1134 : 
; 1135 :         // BlRtlPrintf("BL: BSP entered AP code!\n");
; 1136 :         BlRtlHalt();

  0001a	ba 70 04 00 00	 mov	 edx, 1136		; 00000470H
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00024	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN1@BlSingular@6:

; 1137 :     }
; 1138 : 
; 1139 : #if SINGULARITY_VERBOSE
; 1140 : 
; 1141 :     BlRtlPrintf("BL: Initializing processor %u of %u. [Max=%u]\n",
; 1142 :                 Index + 1,
; 1143 :                 BlPlatform->CpuRealCount,
; 1144 :                 BlPlatform->CpuMaxCount);
; 1145 : 
; 1146 : #endif
; 1147 : 
; 1148 :     BlProcessor[Index].KernelStack = (PVOID) BlPlatform->MpBootInfo.KernelStackLimit;

  00029	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  0002c	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00035	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0003b	8b 92 c8 01 00
	00		 mov	 edx, DWORD PTR [edx+456]
  00041	89 54 01 08	 mov	 DWORD PTR [ecx+eax+8], edx

; 1149 :     BlProcessor[Index].Cpu->DomainBsp = FALSE;

  00045	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  00048	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00051	8b 44 01 04	 mov	 eax, DWORD PTR [ecx+eax+4]
  00055	83 60 18 00	 and	 DWORD PTR [eax+24], 0

; 1150 :     BlProcessor[Index].KernelStackSize = BlPlatform->MpBootInfo.KernelStackBegin - BlPlatform->MpBootInfo.KernelStackLimit;

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00064	8b 80 c0 01 00
	00		 mov	 eax, DWORD PTR [eax+448]
  0006a	2b 81 c8 01 00
	00		 sub	 eax, DWORD PTR [ecx+456]
  00070	8b 4d f8	 mov	 ecx, DWORD PTR _Index$[ebp]
  00073	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  00076	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0007c	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 1151 : 
; 1152 :     BlSingularityInitializeProcessor(Index);

  00080	8b 4d f8	 mov	 ecx, DWORD PTR _Index$[ebp]
  00083	e8 00 00 00 00	 call	 ?BlSingularityInitializeProcessor@@YIXK@Z ; BlSingularityInitializeProcessor

; 1153 : 
; 1154 :     BlSingularityProcessorToStart = Index;

  00088	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  0008b	a3 00 00 00 00	 mov	 DWORD PTR ?BlSingularityProcessorToStart@@3KA, eax ; BlSingularityProcessorToStart

; 1155 : 
; 1156 :     BlMmSwitchStack((PVOID) BlProcessor[Index].Cpu->KernelStackBegin, BlSingularityEnterKernel);

  00090	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  00093	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0009c	8b 44 01 04	 mov	 eax, DWORD PTR [ecx+eax+4]
  000a0	ba 00 00 00 00	 mov	 edx, OFFSET ?BlSingularityEnterKernel@@YIXXZ ; BlSingularityEnterKernel
  000a5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a8	e8 00 00 00 00	 call	 ?BlMmSwitchStack@@YIXPAX0@Z ; BlMmSwitchStack

; 1157 : 
; 1158 :     return;
; 1159 : }

  000ad	c9		 leave
  000ae	c3		 ret	 0
?BlSingularityApEntry@@YIXXZ ENDP			; BlSingularityApEntry
_TEXT	ENDS
END
