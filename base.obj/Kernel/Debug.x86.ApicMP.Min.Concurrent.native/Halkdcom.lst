; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	C:\Users\cc\source\repos\Singularity-OS\base\Kernel\Native\Halkdcom.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_KdBasePort DW	02f8H
; Function compile flags: /Ogtp
; File c:\users\cc\source\repos\singularity-os\base\kernel\native\halkdcom.cpp
_DATA	ENDS
;	COMDAT ?KdReadInt8@@YIEG@Z
_TEXT	SEGMENT
?KdReadInt8@@YIEG@Z PROC				; KdReadInt8, COMDAT
; _port$ = edx

; 69   :     return __inbyte(port);

  00000	ec		 in	 al, dx

; 70   : }

  00001	c3		 ret	 0
?KdReadInt8@@YIEG@Z ENDP				; KdReadInt8
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?KdWriteInt8@@YIXGE@Z
_TEXT	SEGMENT
?KdWriteInt8@@YIXGE@Z PROC				; KdWriteInt8, COMDAT
; _port$ = edx
; _value$ = eax

; 74   :     __outbyte(port, value);

  00000	ee		 out	 dx, al

; 75   : }

  00001	c3		 ret	 0
?KdWriteInt8@@YIXGE@Z ENDP				; KdWriteInt8
_TEXT	ENDS
PUBLIC	?KdpSerialInit@@YI_NPAUClass_Microsoft_Singularity_Hal_Platform@@@Z ; KdpSerialInit
; Function compile flags: /Ogtp
;	COMDAT ?KdpSerialInit@@YI_NPAUClass_Microsoft_Singularity_Hal_Platform@@@Z
_TEXT	SEGMENT
?KdpSerialInit@@YI_NPAUClass_Microsoft_Singularity_Hal_Platform@@@Z PROC ; KdpSerialInit, COMDAT
; _nbi$ = ecx

; 80   :     KdBasePort = (UINT16)nbi->DebugBasePort;

  00000	66 8b 89 ac 00
	00 00		 mov	 cx, WORD PTR [ecx+172]

; 83   :         return false;

  00007	32 c0		 xor	 al, al
  00009	66 81 f9 00 01	 cmp	 cx, 256			; 00000100H
  0000e	66 89 0d 00 00
	00 00		 mov	 WORD PTR _KdBasePort, cx
  00015	73 0a		 jae	 SHORT $LN1@KdpSerialI

; 81   :     if (KdBasePort < 0x100) {
; 82   :         KdBasePort = 0;

  00017	66 c7 05 00 00
	00 00 00 00	 mov	 WORD PTR _KdBasePort, 0

; 113  : }

  00020	c3		 ret	 0
$LN1@KdpSerialI:

; 84   :     }
; 85   : 
; 86   :     // turn off interrupts
; 87   :     KdWriteInt8(KdBasePort + COM_LCR, 0x00);

  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KdBasePort
  00027	83 c2 03	 add	 edx, 3
  0002a	ee		 out	 dx, al

; 88   :     KdWriteInt8(KdBasePort + COM_IEN, 0x00);

  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KdBasePort
  00031	83 c2 01	 add	 edx, 1
  00034	32 c0		 xor	 al, al
  00036	ee		 out	 dx, al

; 89   : 
; 90   :     // Turn on DTS/RTS
; 91   :     KdWriteInt8(KdBasePort + COM_MCR, MC_DTRRTS); // Needed for VirtualPC PIPE/Serial

  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KdBasePort
  0003d	83 c2 04	 add	 edx, 4
  00040	b0 03		 mov	 al, 3
  00042	ee		 out	 dx, al

; 92   : 
; 93   :     // Turn on FIFO
; 94   :     //KdWriteInt8(KdBasePort + COM_FCR, 1);
; 95   : 
; 96   :     // Set the baud rate
; 97   :     KdWriteInt8(KdBasePort + COM_LCR, LC_DLAB);  // Divisor latch access bit

  00043	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KdBasePort
  00049	83 c2 03	 add	 edx, 3
  0004c	b0 80		 mov	 al, 128			; 00000080H
  0004e	ee		 out	 dx, al

; 98   :     KdWriteInt8(KdBasePort + COM_DLM, (UINT8)(BaudRate >> 8));

  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KdBasePort
  00055	83 c2 01	 add	 edx, 1
  00058	32 c0		 xor	 al, al
  0005a	ee		 out	 dx, al

; 99   :     KdWriteInt8(KdBasePort + COM_DLL, (UINT8)(BaudRate & 0xFF));

  0005b	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR _KdBasePort
  00062	b0 01		 mov	 al, 1
  00064	ee		 out	 dx, al

; 100  : 
; 101  :     // initialize the LCR
; 102  :     KdWriteInt8(KdBasePort + COM_LCR, 0x03);

  00065	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KdBasePort
  0006b	83 c2 03	 add	 edx, 3
  0006e	b0 03		 mov	 al, 3
  00070	ee		 out	 dx, al

; 103  :     // 8 data bits, 1 stop bit, no parity, no break
; 104  : 
; 105  :     // See if the 16450/16550 scratch register is available.
; 106  :     // If not, we'll assume the serial port doesn't really exist.
; 107  :     KdWriteInt8(KdBasePort + COM_SCR, 0xff);

  00071	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KdBasePort
  00077	83 c2 07	 add	 edx, 7
  0007a	0c ff		 or	 al, 255			; 000000ffH
  0007c	ee		 out	 dx, al

; 108  :     UINT8 a1 = KdReadInt8(KdBasePort + COM_SCR);

  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR _KdBasePort
  00082	83 c0 07	 add	 eax, 7
  00085	0f b7 d0	 movzx	 edx, ax
  00088	ec		 in	 al, dx

; 109  :     KdWriteInt8(KdBasePort + COM_SCR, 0x00);

  00089	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KdBasePort
  0008f	83 c2 07	 add	 edx, 7
  00092	8a c8		 mov	 cl, al
  00094	32 c0		 xor	 al, al
  00096	ee		 out	 dx, al

; 110  :     UINT8 a2 = KdReadInt8(KdBasePort + COM_SCR);

  00097	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KdBasePort
  0009d	83 c2 07	 add	 edx, 7

; 111  : 
; 112  :     return (bool) ((a1 == (UINT8)0xff) && (a2 == (UINT8)0x00));

  000a0	80 f9 ff	 cmp	 cl, 255			; 000000ffH
  000a3	0f b7 d2	 movzx	 edx, dx
  000a6	ec		 in	 al, dx
  000a7	75 07		 jne	 SHORT $LN4@KdpSerialI
  000a9	84 c0		 test	 al, al
  000ab	75 03		 jne	 SHORT $LN4@KdpSerialI
  000ad	b0 01		 mov	 al, 1

; 113  : }

  000af	c3		 ret	 0
$LN4@KdpSerialI:

; 111  : 
; 112  :     return (bool) ((a1 == (UINT8)0xff) && (a2 == (UINT8)0x00));

  000b0	32 c0		 xor	 al, al

; 113  : }

  000b2	c3		 ret	 0
?KdpSerialInit@@YI_NPAUClass_Microsoft_Singularity_Hal_Platform@@@Z ENDP ; KdpSerialInit
_TEXT	ENDS
PUBLIC	?KdpSerialGetByte@@YI?AW4KDP_STATUS@@PAEH@Z	; KdpSerialGetByte
; Function compile flags: /Ogtp
;	COMDAT ?KdpSerialGetByte@@YI?AW4KDP_STATUS@@PAEH@Z
_TEXT	SEGMENT
?KdpSerialGetByte@@YI?AW4KDP_STATUS@@PAEH@Z PROC	; KdpSerialGetByte, COMDAT
; _Input$ = ecx
; _WaitForByte$ = edx

; 124  :     UCHAR lsr;
; 125  :     UCHAR value;
; 126  :     UINT32 limitcount = WaitForByte ? TIMEOUT_COUNT : 1;

  00000	f7 da		 neg	 edx
  00002	1b d2		 sbb	 edx, edx
  00004	81 e2 ff 9f 0f
	00		 and	 edx, 1023999		; 000f9fffH
  0000a	83 c2 01	 add	 edx, 1
  0000d	56		 push	 esi
  0000e	8b f2		 mov	 esi, edx

; 127  : 
; 128  :     UCHAR msr;
; 129  :     msr = KdReadInt8(KdBasePort + COM_MSR);

  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _KdBasePort
  00016	8d 52 06	 lea	 edx, DWORD PTR [edx+6]
  00019	ec		 in	 al, dx

; 130  :     KDDBG2("MSR %02x\n", msr);
; 131  : 
; 132  :     while (limitcount != 0) {

  0001a	74 1b		 je	 SHORT $LN3@KdpSerialG
  0001c	8d 64 24 00	 npad	 4
$LL4@KdpSerialG:

; 133  :         limitcount--;
; 134  : 
; 135  :         lsr = KdReadInt8(KdBasePort + COM_LSR);

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR _KdBasePort
  00025	83 c0 05	 add	 eax, 5
  00028	0f b7 d0	 movzx	 edx, ax
  0002b	ec		 in	 al, dx
  0002c	83 ee 01	 sub	 esi, 1

; 136  :         KDDBG2("LSR %02x\n", lsr);
; 137  :         if (lsr & COM_DATRDY) {

  0002f	a8 01		 test	 al, 1
  00031	75 0b		 jne	 SHORT $LN15@KdpSerialG

; 130  :     KDDBG2("MSR %02x\n", msr);
; 131  : 
; 132  :     while (limitcount != 0) {

  00033	85 f6		 test	 esi, esi
  00035	75 e9		 jne	 SHORT $LL4@KdpSerialG
$LN3@KdpSerialG:

; 141  :         }
; 142  :     }
; 143  :     return KDP_PACKET_TIMEOUT;

  00037	b8 01 00 00 00	 mov	 eax, 1
  0003c	5e		 pop	 esi

; 144  : }

  0003d	c3		 ret	 0
$LN15@KdpSerialG:

; 138  :             value = KdReadInt8(KdBasePort + COM_DAT);

  0003e	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR _KdBasePort
  00045	ec		 in	 al, dx

; 139  :             *Input = value & 0xff;

  00046	88 01		 mov	 BYTE PTR [ecx], al

; 140  :             return KDP_PACKET_RECEIVED;

  00048	33 c0		 xor	 eax, eax
  0004a	5e		 pop	 esi

; 144  : }

  0004b	c3		 ret	 0
?KdpSerialGetByte@@YI?AW4KDP_STATUS@@PAEH@Z ENDP	; KdpSerialGetByte
_TEXT	ENDS
PUBLIC	?KdpSerialPutByte@@YIXE@Z			; KdpSerialPutByte
; Function compile flags: /Ogtp
;	COMDAT ?KdpSerialPutByte@@YIXE@Z
_TEXT	SEGMENT
?KdpSerialPutByte@@YIXE@Z PROC				; KdpSerialPutByte, COMDAT
; _Output$ = cl

; 148  : {

$LL2@KdpSerialP:

; 149  :     // wait for the com port to be ready
; 150  :     while ((KdReadInt8( KdBasePort + COM_LSR ) & COM_OUTRDY) == 0) {

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR _KdBasePort
  00005	83 c0 05	 add	 eax, 5
  00008	0f b7 d0	 movzx	 edx, ax
  0000b	ec		 in	 al, dx
  0000c	a8 20		 test	 al, 32			; 00000020H
  0000e	74 f0		 je	 SHORT $LL2@KdpSerialP

; 151  :         // nop;
; 152  :     }
; 153  : 
; 154  :     // write a single char
; 155  :     KdWriteInt8(KdBasePort + COM_DAT, Output);

  00010	66 8b 15 00 00
	00 00		 mov	 dx, WORD PTR _KdBasePort
  00017	8a c1		 mov	 al, cl
  00019	ee		 out	 dx, al

; 156  : }

  0001a	c3		 ret	 0
?KdpSerialPutByte@@YIXE@Z ENDP				; KdpSerialPutByte
_TEXT	ENDS
END
