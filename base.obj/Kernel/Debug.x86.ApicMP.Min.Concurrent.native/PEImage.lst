; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	C:\Users\cc\source\repos\Singularity-OS\base\Kernel\Native\PEImage.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0DK@BDIPKKLP@assert?$CI?$CBrunAtRing3?$CJ?5failed?5at?5Na@ ; `string'
PUBLIC	?g_HalCallEntryPoint@Class_Microsoft_Singularity_Loader_PEImage@@SIHPAUuintPtr@@H_N@Z ; Class_Microsoft_Singularity_Loader_PEImage::g_HalCallEntryPoint
EXTRN	?fail_assert@@YIXPBD@Z:PROC			; fail_assert
;	COMDAT ??_C@_0DK@BDIPKKLP@assert?$CI?$CBrunAtRing3?$CJ?5failed?5at?5Na@
; File c:\users\cc\source\repos\singularity-os\base\kernel\native\peimage.cpp
CONST	SEGMENT
??_C@_0DK@BDIPKKLP@assert?$CI?$CBrunAtRing3?$CJ?5failed?5at?5Na@ DB 'asse'
	DB	'rt(!runAtRing3) failed at Native\PEImage.cpp:__LINE__', 00H ; `string'
; Function compile flags: /Ogtp
CONST	ENDS
;	COMDAT ?g_HalCallEntryPoint@Class_Microsoft_Singularity_Loader_PEImage@@SIHPAUuintPtr@@H_N@Z
_TEXT	SEGMENT
_runAtRing3$ = 8					; size = 1
?g_HalCallEntryPoint@Class_Microsoft_Singularity_Loader_PEImage@@SIHPAUuintPtr@@H_N@Z PROC ; Class_Microsoft_Singularity_Loader_PEImage::g_HalCallEntryPoint, COMDAT
; _entry$ = ecx
; _threadIndex$ = edx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 157  :     if (entry == 0) {

  00006	85 f6		 test	 esi, esi
  00008	57		 push	 edi
  00009	8b fa		 mov	 edi, edx
  0000b	75 0a		 jne	 SHORT $LN2@g_HalCallE

; 158  :         __debugbreak();

  0000d	cc		 int	 3
  0000e	5f		 pop	 edi

; 159  :         return -1;

  0000f	83 c8 ff	 or	 eax, -1
  00012	5e		 pop	 esi

; 171  : 
; 172  : #if PAGING
; 173  :     if (runAtRing3) {
; 174  :         // We should still be running at ring-3 when the process unwinds
; 175  :         Assert(Class_Microsoft_Singularity_Isal_Isa::g_IsInUserMode());
; 176  : 
; 177  :         // Call ABI zero, which drops us to ring-0. Why is this not
; 178  :         // a gaping security hole? The kernel should verify that this
; 179  :         // request only ever comes from its own (trusted) code (i.e.,
; 180  :         // right here).
; 181  :         __asm {
; 182  :             mov ecx, 0
; 183  :             push ecx
; 184  :             push ecx
; 185  :             mov edx, esp
; 186  :             push done
; 187  :             _emit   0x0f
; 188  :             _emit   0x34  //sysenter
; 189  : done:
; 190  :         }
; 191  :     }
; 192  : #endif
; 193  : 
; 194  :     return retval;
; 195  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
$LN2@g_HalCallE:

; 160  :     }
; 161  : 
; 162  : #if PAGING
; 163  :     if (runAtRing3) {
; 164  :         Class_Microsoft_Singularity_Isal_Isa::g_EnterUserMode();
; 165  :     }
; 166  : #else
; 167  :     Assert(!runAtRing3);

  00017	80 7d 08 00	 cmp	 BYTE PTR _runAtRing3$[ebp], 0
  0001b	74 0a		 je	 SHORT $LN1@g_HalCallE
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0DK@BDIPKKLP@assert?$CI?$CBrunAtRing3?$CJ?5failed?5at?5Na@
  00022	e8 00 00 00 00	 call	 ?fail_assert@@YIXPBD@Z	; fail_assert
$LN1@g_HalCallE:

; 168  : #endif
; 169  : 
; 170  :     int32 retval = (( int32 (__fastcall *)(int32))entry)(threadIndex);

  00027	8b cf		 mov	 ecx, edi
  00029	ff d6		 call	 esi
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi

; 171  : 
; 172  : #if PAGING
; 173  :     if (runAtRing3) {
; 174  :         // We should still be running at ring-3 when the process unwinds
; 175  :         Assert(Class_Microsoft_Singularity_Isal_Isa::g_IsInUserMode());
; 176  : 
; 177  :         // Call ABI zero, which drops us to ring-0. Why is this not
; 178  :         // a gaping security hole? The kernel should verify that this
; 179  :         // request only ever comes from its own (trusted) code (i.e.,
; 180  :         // right here).
; 181  :         __asm {
; 182  :             mov ecx, 0
; 183  :             push ecx
; 184  :             push ecx
; 185  :             mov edx, esp
; 186  :             push done
; 187  :             _emit   0x0f
; 188  :             _emit   0x34  //sysenter
; 189  : done:
; 190  :         }
; 191  :     }
; 192  : #endif
; 193  : 
; 194  :     return retval;
; 195  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?g_HalCallEntryPoint@Class_Microsoft_Singularity_Loader_PEImage@@SIHPAUuintPtr@@H_N@Z ENDP ; Class_Microsoft_Singularity_Loader_PEImage::g_HalCallEntryPoint
_TEXT	ENDS
END
