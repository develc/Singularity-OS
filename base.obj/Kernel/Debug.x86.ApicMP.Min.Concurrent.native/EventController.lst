; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	C:\Users\cc\source\repos\Singularity-OS\base\Kernel\Native\EventController.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?SourceController@@3U_SOURCE_CONTROLLER@@A	; SourceController
_BSS	SEGMENT
?SourceController@@3U_SOURCE_CONTROLLER@@A DB 01cH DUP (?) ; SourceController
_BSS	ENDS
PUBLIC	?strlen@@YIIPAD@Z				; strlen
; Function compile flags: /Ogtp
; File c:\users\cc\source\repos\singularity-os\base\kernel\native\eventing.h
;	COMDAT ?strlen@@YIIPAD@Z
_TEXT	SEGMENT
?strlen@@YIIPAD@Z PROC					; strlen, COMDAT
; _str$ = ecx

; 40   :     uint32 length = 0;

  00000	33 c0		 xor	 eax, eax

; 41   :     while (*str++) length += 1;

  00002	38 01		 cmp	 BYTE PTR [ecx], al
  00004	74 0b		 je	 SHORT $LN6@strlen
$LL2@strlen:
  00006	83 c1 01	 add	 ecx, 1
  00009	83 c0 01	 add	 eax, 1
  0000c	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0000f	75 f5		 jne	 SHORT $LL2@strlen
$LN6@strlen:

; 42   :     return length;
; 43   : }

  00011	c3		 ret	 0
?strlen@@YIIPAD@Z ENDP					; strlen
_TEXT	ENDS
PUBLIC	?GetRecordHeaderSize@@YIIGG@Z			; GetRecordHeaderSize
; Function compile flags: /Ogtp
;	COMDAT ?GetRecordHeaderSize@@YIIGG@Z
_TEXT	SEGMENT
?GetRecordHeaderSize@@YIIGG@Z PROC			; GetRecordHeaderSize, COMDAT
; _Flags$ = cx
; _StackSize$ = edx

; 168  :     uint16 HeaderSize = sizeof(MEMORY_HEADER);
; 169  : 
; 170  :     if (Flags & RECORD_STACK_TRACES) {

  00000	f6 c1 01	 test	 cl, 1
  00003	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00008	74 05		 je	 SHORT $LN4@GetRecordH

; 171  :         
; 172  :         HeaderSize += StackSize;

  0000a	03 d0		 add	 edx, eax
  0000c	0f b7 c2	 movzx	 eax, dx
$LN4@GetRecordH:

; 173  :     }
; 174  : 
; 175  :     return HeaderSize;

  0000f	0f b7 c0	 movzx	 eax, ax

; 176  : }

  00012	c3		 ret	 0
?GetRecordHeaderSize@@YIIGG@Z ENDP			; GetRecordHeaderSize
_TEXT	ENDS
PUBLIC	?GetRecordInternalStructure@@YIPAXPAU_MEMORY_HEADER@@G@Z ; GetRecordInternalStructure
; Function compile flags: /Ogtp
;	COMDAT ?GetRecordInternalStructure@@YIPAXPAU_MEMORY_HEADER@@G@Z
_TEXT	SEGMENT
?GetRecordInternalStructure@@YIPAXPAU_MEMORY_HEADER@@G@Z PROC ; GetRecordInternalStructure, COMDAT
; _Record$ = ecx
; _RecordFlag$ = dx

; 186  :     if (Record->Flags & RecordFlag) {

  00000	66 85 51 06	 test	 WORD PTR [ecx+6], dx
  00004	74 0e		 je	 SHORT $LN2@GetRecordI

; 187  : 
; 188  :         uint16 HeaderSize;
; 189  : 
; 190  :         if (RecordFlag & (RecordFlag - 1)) {

  00006	0f b7 c2	 movzx	 eax, dx
  00009	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]
  0000c	85 d0		 test	 edx, eax

; 191  : 
; 192  :             //  A single bit at the time can be set to query the internal layout info.
; 193  :             //  Return failure otherwise.
; 194  : 
; 195  :             return NULL;

  0000e	75 04		 jne	 SHORT $LN2@GetRecordI

; 196  :         }
; 197  : 
; 198  :         //  The structures are allocated in order, as the flags bits decrease
; 199  :         //  We can clear the flags 
; 200  : 
; 201  :         HeaderSize = GetRecordHeaderSize(Record->Flags & (~((RecordFlag << 1) - 1)), 0);
; 202  : 
; 203  :         return (PVOID)((ULONG_PTR)Record + HeaderSize);

  00010	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]

; 207  : }

  00013	c3		 ret	 0
$LN2@GetRecordI:

; 204  :     }
; 205  : 
; 206  :     return NULL;

  00014	33 c0		 xor	 eax, eax

; 207  : }

  00016	c3		 ret	 0
?GetRecordInternalStructure@@YIPAXPAU_MEMORY_HEADER@@G@Z ENDP ; GetRecordInternalStructure
_TEXT	ENDS
PUBLIC	?GetUserRecordStructure@@YIPAXPAU_MEMORY_HEADER@@@Z ; GetUserRecordStructure
; Function compile flags: /Ogtp
;	COMDAT ?GetUserRecordStructure@@YIPAXPAU_MEMORY_HEADER@@@Z
_TEXT	SEGMENT
?GetUserRecordStructure@@YIPAXPAU_MEMORY_HEADER@@@Z PROC ; GetUserRecordStructure, COMDAT
; _Record$ = ecx

; 216  :     if (Record->Flags & RECORD_STACK_TRACES) {

  00000	f6 41 06 01	 test	 BYTE PTR [ecx+6], 1
  00004	74 17		 je	 SHORT $LN2@GetUserRec

; 217  : 
; 218  :         ULONG_PTR * StackSize = (ULONG_PTR *)GetRecordInternalStructure(Record, RECORD_STACK_TRACES);
; 219  :         return (PVOID)((ULONG_PTR)Record + GetRecordHeaderSize(Record->Flags, (uint16)(*StackSize + 1) * sizeof(UIntPtr)));

  00006	66 8b 41 18	 mov	 ax, WORD PTR [ecx+24]
  0000a	66 05 07 00	 add	 ax, 7
  0000e	66 03 c0	 add	 ax, ax
  00011	66 03 c0	 add	 ax, ax
  00014	0f b7 c0	 movzx	 eax, ax
  00017	0f b7 c0	 movzx	 eax, ax
  0001a	03 c1		 add	 eax, ecx

; 224  :     }
; 225  : 
; 226  :     return NULL;
; 227  : }

  0001c	c3		 ret	 0
$LN2@GetUserRec:

; 220  : 
; 221  :     } else {
; 222  : 
; 223  :         return (PVOID)((ULONG_PTR)Record + GetRecordHeaderSize(Record->Flags, 0));

  0001d	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]

; 224  :     }
; 225  : 
; 226  :     return NULL;
; 227  : }

  00020	c3		 ret	 0
?GetUserRecordStructure@@YIPAXPAU_MEMORY_HEADER@@@Z ENDP ; GetUserRecordStructure
_TEXT	ENDS
PUBLIC	?GetLocalRepository@@YIPAU_MEMORY_STORAGE@@XZ	; GetLocalRepository
; Function compile flags: /Ogtp
;	COMDAT ?GetLocalRepository@@YIPAU_MEMORY_STORAGE@@XZ
_TEXT	SEGMENT
?GetLocalRepository@@YIPAU_MEMORY_STORAGE@@XZ PROC	; GetLocalRepository, COMDAT

; 367  :     return SourceController.SourceRepository;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A

; 368  : }

  00005	c3		 ret	 0
?GetLocalRepository@@YIPAU_MEMORY_STORAGE@@XZ ENDP	; GetLocalRepository
_TEXT	ENDS
PUBLIC	?GetLocalRepositoryHandle@@YIPAUuintPtr@@XZ	; GetLocalRepositoryHandle
; Function compile flags: /Ogtp
;	COMDAT ?GetLocalRepositoryHandle@@YIPAUuintPtr@@XZ
_TEXT	SEGMENT
?GetLocalRepositoryHandle@@YIPAUuintPtr@@XZ PROC	; GetLocalRepositoryHandle, COMDAT

; 374  :     return (UIntPtr)GetLocalRepository();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A

; 375  : }

  00005	c3		 ret	 0
?GetLocalRepositoryHandle@@YIPAUuintPtr@@XZ ENDP	; GetLocalRepositoryHandle
_TEXT	ENDS
PUBLIC	?ConvertToChars@@YIPADPADPA_WH@Z		; ConvertToChars
; Function compile flags: /Ogtp
; File c:\users\cc\source\repos\singularity-os\base\kernel\native\eventcontroller.cpp
;	COMDAT ?ConvertToChars@@YIPADPADPA_WH@Z
_TEXT	SEGMENT
_length$ = 8						; size = 4
?ConvertToChars@@YIPADPADPA_WH@Z PROC			; ConvertToChars, COMDAT
; _dst$ = ecx
; _src$ = edx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 27   :     if (src != NULL) {

  00003	85 d2		 test	 edx, edx
  00005	74 1a		 je	 SHORT $LN1@ConvertToC

; 28   :         bartok_char *end = src + length;

  00007	8b 45 08	 mov	 eax, DWORD PTR _length$[ebp]
  0000a	56		 push	 esi
  0000b	8d 34 42	 lea	 esi, DWORD PTR [edx+eax*2]

; 29   : 
; 30   :         while (src < end) {

  0000e	3b d6		 cmp	 edx, esi
  00010	73 0e		 jae	 SHORT $LN8@ConvertToC
$LL2@ConvertToC:

; 31   :             *dst++ = (uint8)*src++;

  00012	8a 02		 mov	 al, BYTE PTR [edx]
  00014	88 01		 mov	 BYTE PTR [ecx], al
  00016	83 c2 02	 add	 edx, 2
  00019	83 c1 01	 add	 ecx, 1
  0001c	3b d6		 cmp	 edx, esi
  0001e	72 f2		 jb	 SHORT $LL2@ConvertToC
$LN8@ConvertToC:
  00020	5e		 pop	 esi
$LN1@ConvertToC:

; 32   :         }
; 33   :     }
; 34   :     *dst++ = '\0';

  00021	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00024	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]

; 35   :     return dst;
; 36   : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?ConvertToChars@@YIPADPADPA_WH@Z ENDP			; ConvertToChars
_TEXT	ENDS
PUBLIC	?ConvertToChars@@YIXPADPAUClass_System_String@@@Z ; ConvertToChars
; Function compile flags: /Ogtp
;	COMDAT ?ConvertToChars@@YIXPADPAUClass_System_String@@@Z
_TEXT	SEGMENT
?ConvertToChars@@YIXPADPAUClass_System_String@@@Z PROC	; ConvertToChars, COMDAT
; _dst$ = ecx
; _arg$ = edx

; 40   :     ConvertToChars(dst, &arg->m_firstChar, arg->m_stringLength);

  00000	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00003	85 c0		 test	 eax, eax
  00005	74 1e		 je	 SHORT $LN11@ConvertToC@2
  00007	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0000a	56		 push	 esi
  0000b	8d 34 50	 lea	 esi, DWORD PTR [eax+edx*2]
  0000e	3b c6		 cmp	 eax, esi
  00010	73 0e		 jae	 SHORT $LN10@ConvertToC@2
$LL4@ConvertToC@2:
  00012	8a 10		 mov	 dl, BYTE PTR [eax]
  00014	88 11		 mov	 BYTE PTR [ecx], dl
  00016	83 c0 02	 add	 eax, 2
  00019	83 c1 01	 add	 ecx, 1
  0001c	3b c6		 cmp	 eax, esi
  0001e	72 f2		 jb	 SHORT $LL4@ConvertToC@2
$LN10@ConvertToC@2:
  00020	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00023	5e		 pop	 esi

; 41   : }

  00024	c3		 ret	 0
$LN11@ConvertToC@2:

; 40   :     ConvertToChars(dst, &arg->m_firstChar, arg->m_stringLength);

  00025	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 41   : }

  00028	c3		 ret	 0
?ConvertToChars@@YIXPADPAUClass_System_String@@@Z ENDP	; ConvertToChars
_TEXT	ENDS
PUBLIC	?RegisterRepositoryStorage@@YIXPAU_MEMORY_STORAGE@@@Z ; RegisterRepositoryStorage
EXTRN	?RegisterNativeTypes@@YIXXZ:PROC		; RegisterNativeTypes
; Function compile flags: /Ogtp
;	COMDAT ?RegisterRepositoryStorage@@YIXPAU_MEMORY_STORAGE@@@Z
_TEXT	SEGMENT
?RegisterRepositoryStorage@@YIXPAU_MEMORY_STORAGE@@@Z PROC ; RegisterRepositoryStorage, COMDAT
; _storage$ = ecx

; 46   :     EV_ASSERT(SourceController.SourceRepository == NULL);

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A, 0
  00007	74 01		 je	 SHORT $LN1@RegisterRe
  00009	cc		 int	 3
$LN1@RegisterRe:

; 47   :     SourceController.SourceRepository = storage;

  0000a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A, ecx

; 48   :     RegisterNativeTypes();

  00010	e9 00 00 00 00	 jmp	 ?RegisterNativeTypes@@YIXXZ ; RegisterNativeTypes
?RegisterRepositoryStorage@@YIXPAU_MEMORY_STORAGE@@@Z ENDP ; RegisterRepositoryStorage
_TEXT	ENDS
PUBLIC	?RegisterStorage@@YI_NPAU_MEMORY_STORAGE@@@Z	; RegisterStorage
; Function compile flags: /Ogtp
;	COMDAT ?RegisterStorage@@YI_NPAU_MEMORY_STORAGE@@@Z
_TEXT	SEGMENT
?RegisterStorage@@YI_NPAU_MEMORY_STORAGE@@@Z PROC	; RegisterStorage, COMDAT
; _storage$ = ecx

; 54   :     //  Note the caller of this function needs to assure mutual exclusion
; 55   : 
; 56   :     if (SourceController.SourceRepository == NULL) {

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A, 0
  00007	75 0e		 jne	 SHORT $LN2@RegisterSt

; 57   : 
; 58   :         //  The first storage registered needs to be the type repository
; 59   : 
; 60   :         RegisterRepositoryStorage(storage);

  00009	89 0d 00 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A, ecx
  0000f	e8 00 00 00 00	 call	 ?RegisterNativeTypes@@YIXXZ ; RegisterNativeTypes

; 66   :     }
; 67   : 
; 68   :     return true;

  00014	b0 01		 mov	 al, 1

; 69   : }

  00016	c3		 ret	 0
$LN2@RegisterSt:

; 61   : 
; 62   :     } else {
; 63   : 
; 64   :         storage->Link = SourceController.StorageList;

  00017	a1 04 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+4
  0001c	89 01		 mov	 DWORD PTR [ecx], eax

; 65   :         SourceController.StorageList = storage;

  0001e	89 0d 04 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+4, ecx

; 66   :     }
; 67   : 
; 68   :     return true;

  00024	b0 01		 mov	 al, 1

; 69   : }

  00026	c3		 ret	 0
?RegisterStorage@@YI_NPAU_MEMORY_STORAGE@@@Z ENDP	; RegisterStorage
_TEXT	ENDS
PUBLIC	?UnRegisterStorage@@YIXPAU_MEMORY_STORAGE@@@Z	; UnRegisterStorage
; Function compile flags: /Ogtp
;	COMDAT ?UnRegisterStorage@@YIXPAU_MEMORY_STORAGE@@@Z
_TEXT	SEGMENT
?UnRegisterStorage@@YIXPAU_MEMORY_STORAGE@@@Z PROC	; UnRegisterStorage, COMDAT
; _storage$ = ecx

; 75   :     //  Note the caller of this function needs to assure mutual exclusion
; 76   : 
; 77   :     PMEMORY_STORAGE tmpStorage = SourceController.StorageList;

  00000	a1 04 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+4

; 78   : 
; 79   :     EV_ASSERT(tmpStorage != NULL);

  00005	85 c0		 test	 eax, eax
  00007	75 01		 jne	 SHORT $LN6@UnRegister
  00009	cc		 int	 3
$LN6@UnRegister:

; 80   : 
; 81   :     if (tmpStorage == storage) {

  0000a	3b c1		 cmp	 eax, ecx
  0000c	75 08		 jne	 SHORT $LN9@UnRegister

; 82   : 
; 83   :         SourceController.StorageList = tmpStorage->Link;

  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	a3 04 00 00 00	 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+4, eax

; 95   :         }
; 96   :     }
; 97   : }

  00015	c3		 ret	 0
$LN9@UnRegister:

; 84   : 
; 85   :     } else {
; 86   : 
; 87   :         while (tmpStorage->Link != storage) {

  00016	39 08		 cmp	 DWORD PTR [eax], ecx
  00018	74 0c		 je	 SHORT $LN11@UnRegister
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL3@UnRegister:

; 88   : 
; 89   :             tmpStorage = tmpStorage->Link;

  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	39 08		 cmp	 DWORD PTR [eax], ecx
  00024	75 fa		 jne	 SHORT $LL3@UnRegister
$LN11@UnRegister:

; 90   :         }
; 91   : 
; 92   :         if (tmpStorage->Link == storage) {
; 93   : 
; 94   :             tmpStorage->Link = storage->Link;

  00026	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00028	89 08		 mov	 DWORD PTR [eax], ecx

; 95   :         }
; 96   :     }
; 97   : }

  0002a	c3		 ret	 0
?UnRegisterStorage@@YIXPAU_MEMORY_STORAGE@@@Z ENDP	; UnRegisterStorage
_TEXT	ENDS
PUBLIC	?RegisterExternalController@@YIXPAU_EXTERNAL_CONTROLLER_DESCRIPTOR@@@Z ; RegisterExternalController
; Function compile flags: /Ogtp
;	COMDAT ?RegisterExternalController@@YIXPAU_EXTERNAL_CONTROLLER_DESCRIPTOR@@@Z
_TEXT	SEGMENT
?RegisterExternalController@@YIXPAU_EXTERNAL_CONTROLLER_DESCRIPTOR@@@Z PROC ; RegisterExternalController, COMDAT
; _controller$ = ecx

; 102  :     //  Note the caller of this function needs to assure mutual exclusion
; 103  : 
; 104  :     controller->Link = SourceController.ExternalControllers;

  00000	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+12
  00005	89 01		 mov	 DWORD PTR [ecx], eax

; 105  :     SourceController.ExternalControllers = controller;

  00007	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+12, ecx

; 106  : }

  0000d	c3		 ret	 0
?RegisterExternalController@@YIXPAU_EXTERNAL_CONTROLLER_DESCRIPTOR@@@Z ENDP ; RegisterExternalController
_TEXT	ENDS
PUBLIC	?UnRegisterExternalController@@YIXPAU_EXTERNAL_CONTROLLER_DESCRIPTOR@@@Z ; UnRegisterExternalController
; Function compile flags: /Ogtp
;	COMDAT ?UnRegisterExternalController@@YIXPAU_EXTERNAL_CONTROLLER_DESCRIPTOR@@@Z
_TEXT	SEGMENT
?UnRegisterExternalController@@YIXPAU_EXTERNAL_CONTROLLER_DESCRIPTOR@@@Z PROC ; UnRegisterExternalController, COMDAT
; _controller$ = ecx

; 111  :     //  Note the caller of this function needs to assure mutual exclusion
; 112  : 
; 113  :     PEXTERNAL_CONTROLLER_DESCRIPTOR tmpController = SourceController.ExternalControllers;

  00000	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+12

; 114  : 
; 115  :     EV_ASSERT(tmpController != NULL);

  00005	85 c0		 test	 eax, eax
  00007	75 01		 jne	 SHORT $LN6@UnRegister@2
  00009	cc		 int	 3
$LN6@UnRegister@2:

; 116  : 
; 117  :     if (tmpController == controller) {

  0000a	3b c1		 cmp	 eax, ecx
  0000c	75 16		 jne	 SHORT $LN9@UnRegister@2

; 118  : 
; 119  :         SourceController.ExternalControllers = tmpController->Link;

  0000e	8b 00		 mov	 eax, DWORD PTR [eax]

; 131  :         }
; 132  :     }
; 133  : 
; 134  :     //  Insert it to the free llist
; 135  : 
; 136  :     controller->Link = SourceController.FreeControllerList;

  00010	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+16
  00016	a3 0c 00 00 00	 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+12, eax
  0001b	89 11		 mov	 DWORD PTR [ecx], edx

; 137  :     SourceController.FreeControllerList = controller;

  0001d	89 0d 10 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+16, ecx

; 138  : 
; 139  : }

  00023	c3		 ret	 0
$LN9@UnRegister@2:

; 120  : 
; 121  :     } else {
; 122  : 
; 123  :         while (tmpController->Link != controller) {

  00024	39 08		 cmp	 DWORD PTR [eax], ecx
  00026	74 06		 je	 SHORT $LN11@UnRegister@2
$LL3@UnRegister@2:

; 124  : 
; 125  :             tmpController = tmpController->Link;

  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	39 08		 cmp	 DWORD PTR [eax], ecx
  0002c	75 fa		 jne	 SHORT $LL3@UnRegister@2
$LN11@UnRegister@2:

; 126  :         }
; 127  : 
; 128  :         if (tmpController->Link == controller) {
; 129  : 
; 130  :             tmpController->Link = controller->Link;

  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	89 10		 mov	 DWORD PTR [eax], edx

; 131  :         }
; 132  :     }
; 133  : 
; 134  :     //  Insert it to the free llist
; 135  : 
; 136  :     controller->Link = SourceController.FreeControllerList;

  00032	a1 10 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+16
  00037	89 01		 mov	 DWORD PTR [ecx], eax

; 137  :     SourceController.FreeControllerList = controller;

  00039	89 0d 10 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+16, ecx

; 138  : 
; 139  : }

  0003f	c3		 ret	 0
?UnRegisterExternalController@@YIXPAU_EXTERNAL_CONTROLLER_DESCRIPTOR@@@Z ENDP ; UnRegisterExternalController
_TEXT	ENDS
PUBLIC	?RegisterQueryView@@YIXPAU_QUERY_VIEW@@@Z	; RegisterQueryView
; Function compile flags: /Ogtp
;	COMDAT ?RegisterQueryView@@YIXPAU_QUERY_VIEW@@@Z
_TEXT	SEGMENT
?RegisterQueryView@@YIXPAU_QUERY_VIEW@@@Z PROC		; RegisterQueryView, COMDAT
; _queryView$ = ecx

; 144  :     //  Note the caller of this function needs to assure mutula exclusion
; 145  : 
; 146  :     queryView->Link = SourceController.QueryViews;

  00000	a1 14 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+20
  00005	89 01		 mov	 DWORD PTR [ecx], eax

; 147  :     SourceController.QueryViews = queryView;

  00007	89 0d 14 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+20, ecx

; 148  : }

  0000d	c3		 ret	 0
?RegisterQueryView@@YIXPAU_QUERY_VIEW@@@Z ENDP		; RegisterQueryView
_TEXT	ENDS
PUBLIC	?UnRegisterQueryView@@YIXPAU_QUERY_VIEW@@@Z	; UnRegisterQueryView
; Function compile flags: /Ogtp
;	COMDAT ?UnRegisterQueryView@@YIXPAU_QUERY_VIEW@@@Z
_TEXT	SEGMENT
?UnRegisterQueryView@@YIXPAU_QUERY_VIEW@@@Z PROC	; UnRegisterQueryView, COMDAT
; _queryView$ = ecx

; 153  :     //  Note the caller of this function needs to assure mutual exclusion
; 154  : 
; 155  :     PQUERY_VIEW tmpQueryView = SourceController.QueryViews;

  00000	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+20
  00006	8b c2		 mov	 eax, edx

; 156  : 
; 157  :     EV_ASSERT(tmpQueryView != NULL);

  00008	85 c0		 test	 eax, eax
  0000a	75 01		 jne	 SHORT $LN6@UnRegister@3
  0000c	cc		 int	 3
$LN6@UnRegister@3:

; 158  : 
; 159  :     if (tmpQueryView == queryView) {

  0000d	3b c1		 cmp	 eax, ecx
  0000f	75 10		 jne	 SHORT $LN9@UnRegister@3

; 160  : 
; 161  :         SourceController.QueryViews = tmpQueryView->Link;

  00011	8b 00		 mov	 eax, DWORD PTR [eax]
  00013	a3 14 00 00 00	 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+20, eax

; 173  :         }
; 174  :     }
; 175  : 
; 176  :     //  Insert it to the free llist
; 177  : 
; 178  :     queryView->Link = SourceController.QueryViews;

  00018	89 01		 mov	 DWORD PTR [ecx], eax

; 179  :     SourceController.FreeQueryViews = queryView;

  0001a	89 0d 18 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+24, ecx

; 180  : 
; 181  : }

  00020	c3		 ret	 0
$LN9@UnRegister@3:

; 162  : 
; 163  :     } else {
; 164  : 
; 165  :         while (tmpQueryView->Link != queryView) {

  00021	39 08		 cmp	 DWORD PTR [eax], ecx
  00023	74 06		 je	 SHORT $LN11@UnRegister@3
$LL3@UnRegister@3:

; 166  : 
; 167  :             tmpQueryView = tmpQueryView->Link;

  00025	8b 00		 mov	 eax, DWORD PTR [eax]
  00027	39 08		 cmp	 DWORD PTR [eax], ecx
  00029	75 fa		 jne	 SHORT $LL3@UnRegister@3
$LN11@UnRegister@3:

; 168  :         }
; 169  : 
; 170  :         if (tmpQueryView->Link == queryView) {
; 171  : 
; 172  :             tmpQueryView->Link = queryView->Link;

  0002b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002d	89 10		 mov	 DWORD PTR [eax], edx

; 173  :         }
; 174  :     }
; 175  : 
; 176  :     //  Insert it to the free llist
; 177  : 
; 178  :     queryView->Link = SourceController.QueryViews;

  0002f	a1 14 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+20
  00034	89 01		 mov	 DWORD PTR [ecx], eax

; 179  :     SourceController.FreeQueryViews = queryView;

  00036	89 0d 18 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+24, ecx

; 180  : 
; 181  : }

  0003c	c3		 ret	 0
?UnRegisterQueryView@@YIXPAU_QUERY_VIEW@@@Z ENDP	; UnRegisterQueryView
_TEXT	ENDS
PUBLIC	?AllocateQueryView@@YIPAU_QUERY_VIEW@@XZ	; AllocateQueryView
EXTRN	?InternalLogFixedRecord@@YIPAU_MEMORY_HEADER@@PAUuintPtr@@I0PAXI@Z:PROC ; InternalLogFixedRecord
; Function compile flags: /Ogtp
;	COMDAT ?AllocateQueryView@@YIPAU_QUERY_VIEW@@XZ
_TEXT	SEGMENT
_source$ = -36						; size = 36
?AllocateQueryView@@YIPAU_QUERY_VIEW@@XZ PROC		; AllocateQueryView, COMDAT

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 185  :     if (SourceController.FreeQueryViews != NULL) {

  00003	a1 18 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+24
  00008	83 ec 24	 sub	 esp, 36			; 00000024H
  0000b	85 c0		 test	 eax, eax
  0000d	74 19		 je	 SHORT $LN2@AllocateQu

; 186  : 
; 187  :         PQUERY_VIEW queryView = SourceController.FreeQueryViews;
; 188  :         SourceController.FreeQueryViews = queryView->Link;

  0000f	8b 08		 mov	 ecx, DWORD PTR [eax]

; 189  :         RegisterQueryView(queryView);

  00011	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+20
  00017	89 0d 18 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+24, ecx
  0001d	89 10		 mov	 DWORD PTR [eax], edx

; 206  :     RegisterQueryView(newSource);

  0001f	a3 14 00 00 00	 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+20, eax

; 207  :     return newSource;
; 208  : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
$LN2@AllocateQu:

; 190  :         return queryView;
; 191  :     }
; 192  : 
; 193  :     QUERY_VIEW source;
; 194  : 
; 195  :     PMEMORY_HEADER Entry = InternalLogFixedRecord( GetLocalRepositoryHandle(),
; 196  :         RECORD_EVENT_CONTROLLER,
; 197  :         0,
; 198  :         &source,
; 199  :         sizeof(source));

  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A
  0002e	6a 24		 push	 36			; 00000024H
  00030	8d 45 dc	 lea	 eax, DWORD PTR _source$[ebp]
  00033	50		 push	 eax
  00034	6a 00		 push	 0
  00036	ba 00 84 00 00	 mov	 edx, 33792		; 00008400H
  0003b	e8 00 00 00 00	 call	 ?InternalLogFixedRecord@@YIPAU_MEMORY_HEADER@@PAUuintPtr@@I0PAXI@Z ; InternalLogFixedRecord
  00040	8b c8		 mov	 ecx, eax

; 200  : 
; 201  :     if (Entry == NULL) {

  00042	85 c9		 test	 ecx, ecx
  00044	75 04		 jne	 SHORT $LN1@AllocateQu

; 207  :     return newSource;
; 208  : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN1@AllocateQu:

; 202  :         return NULL;
; 203  :     }
; 204  : 
; 205  :     PQUERY_VIEW newSource = (PQUERY_VIEW)GetUserRecordStructure(Entry);

  0004a	f6 41 06 01	 test	 BYTE PTR [ecx+6], 1
  0004e	74 27		 je	 SHORT $LN12@AllocateQu
  00050	66 8b 51 18	 mov	 dx, WORD PTR [ecx+24]
  00054	66 83 c2 07	 add	 dx, 7
  00058	66 03 d2	 add	 dx, dx
  0005b	66 03 d2	 add	 dx, dx
  0005e	0f b7 c2	 movzx	 eax, dx
  00061	0f b7 c0	 movzx	 eax, ax
  00064	03 c1		 add	 eax, ecx

; 206  :     RegisterQueryView(newSource);

  00066	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+20
  0006c	89 08		 mov	 DWORD PTR [eax], ecx
  0006e	a3 14 00 00 00	 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+20, eax

; 207  :     return newSource;
; 208  : }

  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0

; 202  :         return NULL;
; 203  :     }
; 204  : 
; 205  :     PQUERY_VIEW newSource = (PQUERY_VIEW)GetUserRecordStructure(Entry);

$LN12@AllocateQu:
  00077	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]

; 206  :     RegisterQueryView(newSource);

  0007a	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+20
  00080	89 08		 mov	 DWORD PTR [eax], ecx
  00082	a3 14 00 00 00	 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+20, eax

; 207  :     return newSource;
; 208  : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
?AllocateQueryView@@YIPAU_QUERY_VIEW@@XZ ENDP		; AllocateQueryView
_TEXT	ENDS
PUBLIC	?RegisterSource@@YI_NPAU_SOURCE_DESCRIPTOR@@@Z	; RegisterSource
; Function compile flags: /Ogtp
;	COMDAT ?RegisterSource@@YI_NPAU_SOURCE_DESCRIPTOR@@@Z
_TEXT	SEGMENT
?RegisterSource@@YI_NPAU_SOURCE_DESCRIPTOR@@@Z PROC	; RegisterSource, COMDAT
; _newSource$ = ecx

; 215  :     //  Note the caller of this function needs to assure mutual exclusion
; 216  : 
; 217  :     newSource->Link = (UIntPtr)SourceController.SourceDescriptors;

  00000	a1 08 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+8
  00005	89 01		 mov	 DWORD PTR [ecx], eax

; 218  :     SourceController.SourceDescriptors = newSource;

  00007	89 0d 08 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+8, ecx

; 219  : 
; 220  :     return true;

  0000d	b0 01		 mov	 al, 1

; 221  : }

  0000f	c3		 ret	 0
?RegisterSource@@YI_NPAU_SOURCE_DESCRIPTOR@@@Z ENDP	; RegisterSource
_TEXT	ENDS
PUBLIC	?g_FetchLocalStorage@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@XZ ; Class_Microsoft_Singularity_Eventing_LocalController::g_FetchLocalStorage
; Function compile flags: /Ogtp
;	COMDAT ?g_FetchLocalStorage@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@XZ
_TEXT	SEGMENT
?g_FetchLocalStorage@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@XZ PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_FetchLocalStorage, COMDAT

; 231  :     return (UIntPtr)GetLocalRepository();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A

; 232  : }

  00005	c3		 ret	 0
?g_FetchLocalStorage@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@XZ ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_FetchLocalStorage
_TEXT	ENDS
PUBLIC	?g_SetRepositoryStorage@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAUuintPtr@@@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_SetRepositoryStorage
; Function compile flags: /Ogtp
;	COMDAT ?g_SetRepositoryStorage@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAUuintPtr@@@Z
_TEXT	SEGMENT
?g_SetRepositoryStorage@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAUuintPtr@@@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_SetRepositoryStorage, COMDAT
; _storageHandle$ = ecx

; 236  :     if (SourceController.SourceRepository != NULL) {

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A, 0
  00007	74 03		 je	 SHORT $LN4@g_SetRepos

; 237  :         return false;

  00009	32 c0		 xor	 al, al

; 242  : }

  0000b	c3		 ret	 0

; 238  :     }
; 239  : 
; 240  :     RegisterRepositoryStorage(HANDLE_TO_STORAGE(storageHandle));

$LN4@g_SetRepos:
  0000c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A, ecx
  00012	e8 00 00 00 00	 call	 ?RegisterNativeTypes@@YIXXZ ; RegisterNativeTypes

; 241  :     return true;

  00017	b0 01		 mov	 al, 1

; 242  : }

  00019	c3		 ret	 0
?g_SetRepositoryStorage@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAUuintPtr@@@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_SetRepositoryStorage
_TEXT	ENDS
PUBLIC	?g_RegisterEventDescriptorInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAUClass_System_String@@0@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterEventDescriptorInternal
EXTRN	?RegisterEventDescriptorImplementation@@YIPAU_MEMORY_HEADER@@HPAXG0G@Z:PROC ; RegisterEventDescriptorImplementation
; Function compile flags: /Ogtp
;	COMDAT ?g_RegisterEventDescriptorInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAUClass_System_String@@0@Z
_TEXT	SEGMENT
?g_RegisterEventDescriptorInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAUClass_System_String@@0@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterEventDescriptorInternal, COMDAT
; _eventName$ = ecx
; _eventDescription$ = edx

; 249  :     return (UIntPtr)RegisterEventDescriptorImplementation(Class_Microsoft_Singularity_Eventing_DataType___string,
; 250  :                                                           &eventName->m_firstChar,
; 251  :                                                           eventName->m_stringLength,
; 252  :                                                           &eventDescription->m_firstChar,
; 253  :                                                           eventDescription->m_stringLength);

  00000	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00004	83 c2 0c	 add	 edx, 12			; 0000000cH
  00007	50		 push	 eax
  00008	52		 push	 edx
  00009	0f b7 51 08	 movzx	 edx, WORD PTR [ecx+8]
  0000d	52		 push	 edx
  0000e	8d 51 0c	 lea	 edx, DWORD PTR [ecx+12]
  00011	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  00016	e8 00 00 00 00	 call	 ?RegisterEventDescriptorImplementation@@YIPAU_MEMORY_HEADER@@HPAXG0G@Z ; RegisterEventDescriptorImplementation

; 254  : }

  0001b	c3		 ret	 0
?g_RegisterEventDescriptorInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAUClass_System_String@@0@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterEventDescriptorInternal
_TEXT	ENDS
PUBLIC	?g_RegisterEventFieldInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAU2@PAUClass_System_String@@GG@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterEventFieldInternal
EXTRN	?RegisterFieldDescriptorImplementation@@YIPAU_MEMORY_HEADER@@HPAU1@PAXIGG@Z:PROC ; RegisterFieldDescriptorImplementation
; Function compile flags: /Ogtp
;	COMDAT ?g_RegisterEventFieldInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAU2@PAUClass_System_String@@GG@Z
_TEXT	SEGMENT
_offset$ = 8						; size = 2
_type$ = 12						; size = 2
?g_RegisterEventFieldInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAU2@PAUClass_System_String@@GG@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterEventFieldInternal, COMDAT
; _eventHandle$ = ecx
; _fieldName$ = edx

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c2		 mov	 eax, edx

; 262  :     return (UIntPtr) RegisterFieldDescriptorImplementation(
; 263  :                             Class_Microsoft_Singularity_Eventing_DataType___string,
; 264  :                             HANDLE_TO_HEADER(eventHandle),
; 265  :                             &fieldName->m_firstChar,
; 266  :                             fieldName->m_stringLength,
; 267  :                             offset,
; 268  :                             type);

  00005	8b 55 0c	 mov	 edx, DWORD PTR _type$[ebp]
  00008	52		 push	 edx
  00009	8b 55 08	 mov	 edx, DWORD PTR _offset$[ebp]
  0000c	52		 push	 edx
  0000d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00010	52		 push	 edx
  00011	83 c0 0c	 add	 eax, 12			; 0000000cH
  00014	8b d1		 mov	 edx, ecx
  00016	50		 push	 eax
  00017	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  0001c	e8 00 00 00 00	 call	 ?RegisterFieldDescriptorImplementation@@YIPAU_MEMORY_HEADER@@HPAU1@PAXIGG@Z ; RegisterFieldDescriptorImplementation

; 269  : }

  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?g_RegisterEventFieldInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAU2@PAUClass_System_String@@GG@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterEventFieldInternal
_TEXT	ENDS
PUBLIC	?g_RegisterEventGenericFieldInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAU2@PAUClass_System_String@@GG0@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterEventGenericFieldInternal
EXTRN	?RegisterGenericFieldDescriptorImplementation@@YIPAU_MEMORY_HEADER@@HPAU1@PAXIGGPAUuintPtr@@@Z:PROC ; RegisterGenericFieldDescriptorImplementation
; Function compile flags: /Ogtp
;	COMDAT ?g_RegisterEventGenericFieldInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAU2@PAUClass_System_String@@GG0@Z
_TEXT	SEGMENT
_offset$ = 8						; size = 2
_size$ = 12						; size = 2
_typeFieldDescriptor$ = 16				; size = 4
?g_RegisterEventGenericFieldInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAU2@PAUClass_System_String@@GG0@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterEventGenericFieldInternal, COMDAT
; _eventHandle$ = ecx
; _fieldName$ = edx

; 277  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c2		 mov	 eax, edx

; 278  :     return (UIntPtr)RegisterGenericFieldDescriptorImplementation(
; 279  :                      Class_Microsoft_Singularity_Eventing_DataType___string,
; 280  :                      HANDLE_TO_HEADER(eventHandle),
; 281  :                      &fieldName->m_firstChar,
; 282  :                      fieldName->m_stringLength,
; 283  :                      offset,
; 284  :                      size,
; 285  :                      typeFieldDescriptor);

  00005	8b 55 10	 mov	 edx, DWORD PTR _typeFieldDescriptor$[ebp]
  00008	52		 push	 edx
  00009	8b 55 0c	 mov	 edx, DWORD PTR _size$[ebp]
  0000c	52		 push	 edx
  0000d	8b 55 08	 mov	 edx, DWORD PTR _offset$[ebp]
  00010	52		 push	 edx
  00011	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00014	52		 push	 edx
  00015	83 c0 0c	 add	 eax, 12			; 0000000cH
  00018	8b d1		 mov	 edx, ecx
  0001a	50		 push	 eax
  0001b	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  00020	e8 00 00 00 00	 call	 ?RegisterGenericFieldDescriptorImplementation@@YIPAU_MEMORY_HEADER@@HPAU1@PAXIGGPAUuintPtr@@@Z ; RegisterGenericFieldDescriptorImplementation

; 286  : }

  00025	5d		 pop	 ebp
  00026	c2 0c 00	 ret	 12			; 0000000cH
?g_RegisterEventGenericFieldInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAU2@PAUClass_System_String@@GG0@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterEventGenericFieldInternal
_TEXT	ENDS
PUBLIC	?g_RegisterEnumDescriptorInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAUClass_System_String@@G@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterEnumDescriptorInternal
EXTRN	?RegisterEnumDescriptorImplementation@@YIPAU_MEMORY_HEADER@@HPAXGG@Z:PROC ; RegisterEnumDescriptorImplementation
; Function compile flags: /Ogtp
;	COMDAT ?g_RegisterEnumDescriptorInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAUClass_System_String@@G@Z
_TEXT	SEGMENT
?g_RegisterEnumDescriptorInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAUClass_System_String@@G@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterEnumDescriptorInternal, COMDAT
; _name$ = ecx
; _type$ = edx

; 292  :     return (UIntPtr)RegisterEnumDescriptorImplementation(
; 293  :                         Class_Microsoft_Singularity_Eventing_DataType___string,
; 294  :                         &name->m_firstChar,
; 295  :                         name->m_stringLength,
; 296  :                         type);

  00000	0f b7 41 08	 movzx	 eax, WORD PTR [ecx+8]
  00004	52		 push	 edx
  00005	8d 51 0c	 lea	 edx, DWORD PTR [ecx+12]
  00008	50		 push	 eax
  00009	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  0000e	e8 00 00 00 00	 call	 ?RegisterEnumDescriptorImplementation@@YIPAU_MEMORY_HEADER@@HPAXGG@Z ; RegisterEnumDescriptorImplementation

; 297  : }

  00013	c3		 ret	 0
?g_RegisterEnumDescriptorInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAUClass_System_String@@G@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterEnumDescriptorInternal
_TEXT	ENDS
PUBLIC	?g_RegisterValueDescriptorInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAU2@PAUClass_System_String@@_KE@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterValueDescriptorInternal
EXTRN	?RegisterValueDescriptorImplementation@@YIPAU_MEMORY_HEADER@@HPAU1@PAXI_KE@Z:PROC ; RegisterValueDescriptorImplementation
; Function compile flags: /Ogtp
;	COMDAT ?g_RegisterValueDescriptorInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAU2@PAUClass_System_String@@_KE@Z
_TEXT	SEGMENT
_value$ = 8						; size = 8
_flagLetter$ = 16					; size = 1
?g_RegisterValueDescriptorInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAU2@PAUClass_System_String@@_KE@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterValueDescriptorInternal, COMDAT
; _eventHandle$ = ecx
; _name$ = edx

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c2		 mov	 eax, edx

; 305  :     return (UIntPtr)RegisterValueDescriptorImplementation(
; 306  :                          Class_Microsoft_Singularity_Eventing_DataType___string,
; 307  :                          HANDLE_TO_HEADER(eventHandle),
; 308  :                          &name->m_firstChar,
; 309  :                          name->m_stringLength,
; 310  :                          value,
; 311  :                          flagLetter);

  00005	8b 55 10	 mov	 edx, DWORD PTR _flagLetter$[ebp]
  00008	52		 push	 edx
  00009	8b 55 0c	 mov	 edx, DWORD PTR _value$[ebp+4]
  0000c	52		 push	 edx
  0000d	8b 55 08	 mov	 edx, DWORD PTR _value$[ebp]
  00010	52		 push	 edx
  00011	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00014	52		 push	 edx
  00015	83 c0 0c	 add	 eax, 12			; 0000000cH
  00018	8b d1		 mov	 edx, ecx
  0001a	50		 push	 eax
  0001b	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  00020	e8 00 00 00 00	 call	 ?RegisterValueDescriptorImplementation@@YIPAU_MEMORY_HEADER@@HPAU1@PAXI_KE@Z ; RegisterValueDescriptorImplementation

; 312  : }

  00025	5d		 pop	 ebp
  00026	c2 0c 00	 ret	 12			; 0000000cH
?g_RegisterValueDescriptorInternal@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAU2@PAUClass_System_String@@_KE@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterValueDescriptorInternal
_TEXT	ENDS
PUBLIC	?g_RegisterStorageImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAUuintPtr@@@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterStorageImpl
; Function compile flags: /Ogtp
;	COMDAT ?g_RegisterStorageImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAUuintPtr@@@Z
_TEXT	SEGMENT
?g_RegisterStorageImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAUuintPtr@@@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterStorageImpl, COMDAT
; _storageHandle$ = ecx

; 318  :   return RegisterStorage(HANDLE_TO_STORAGE(storageHandle));

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A, 0
  00007	75 0e		 jne	 SHORT $LN4@g_Register
  00009	89 0d 00 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A, ecx
  0000f	e8 00 00 00 00	 call	 ?RegisterNativeTypes@@YIXXZ ; RegisterNativeTypes
  00014	b0 01		 mov	 al, 1

; 319  : }

  00016	c3		 ret	 0

; 318  :   return RegisterStorage(HANDLE_TO_STORAGE(storageHandle));

$LN4@g_Register:
  00017	a1 04 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+4
  0001c	89 01		 mov	 DWORD PTR [ecx], eax
  0001e	89 0d 04 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+4, ecx
  00024	b0 01		 mov	 al, 1

; 319  : }

  00026	c3		 ret	 0
?g_RegisterStorageImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAUuintPtr@@@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterStorageImpl
_TEXT	ENDS
PUBLIC	?g_UnRegisterStorageImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_UnRegisterStorageImpl
; Function compile flags: /Ogtp
;	COMDAT ?g_UnRegisterStorageImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@@Z
_TEXT	SEGMENT
?g_UnRegisterStorageImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_UnRegisterStorageImpl, COMDAT
; _storageHandle$ = ecx

; 323  :   UnRegisterStorage(HANDLE_TO_STORAGE(storageHandle));

  00000	a1 04 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+4
  00005	85 c0		 test	 eax, eax
  00007	75 01		 jne	 SHORT $LN8@g_UnRegist
  00009	cc		 int	 3
$LN8@g_UnRegist:
  0000a	3b c1		 cmp	 eax, ecx
  0000c	75 08		 jne	 SHORT $LN11@g_UnRegist
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	a3 04 00 00 00	 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+4, eax

; 324  : }

  00015	c3		 ret	 0
$LN11@g_UnRegist:

; 323  :   UnRegisterStorage(HANDLE_TO_STORAGE(storageHandle));

  00016	39 08		 cmp	 DWORD PTR [eax], ecx
  00018	74 0c		 je	 SHORT $LN13@g_UnRegist
  0001a	8d 9b 00 00 00
	00		 npad	 6
$LL5@g_UnRegist:
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	39 08		 cmp	 DWORD PTR [eax], ecx
  00024	75 fa		 jne	 SHORT $LL5@g_UnRegist
$LN13@g_UnRegist:
  00026	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00028	89 08		 mov	 DWORD PTR [eax], ecx

; 324  : }

  0002a	c3		 ret	 0
?g_UnRegisterStorageImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_UnRegisterStorageImpl
_TEXT	ENDS
PUBLIC	?g_AllocateSourceHandleImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAUClass_System_String@@@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_AllocateSourceHandleImpl
EXTRN	?CommitEventEntry@@YIXPAU_MEMORY_HEADER@@@Z:PROC ; CommitEventEntry
EXTRN	?InternalLogRecord@@YIPAU_MEMORY_HEADER@@PAUuintPtr@@I0PAXIPAPAXI@Z:PROC ; InternalLogRecord
; Function compile flags: /Ogtp
;	COMDAT ?g_AllocateSourceHandleImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAUClass_System_String@@@Z
_TEXT	SEGMENT
_source$ = -32						; size = 28
_ExtendedBuffer$ = -4					; size = 4
?g_AllocateSourceHandleImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAUClass_System_String@@@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_AllocateSourceHandleImpl, COMDAT
; _sourceName$ = ecx

; 329  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 330  :     SOURCE_DESCRIPTOR source = {NULL, 0};

  00008	33 c0		 xor	 eax, eax
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	89 45 e8	 mov	 DWORD PTR _source$[ebp+8], eax
  00010	89 45 ec	 mov	 DWORD PTR _source$[ebp+12], eax
  00013	89 45 f0	 mov	 DWORD PTR _source$[ebp+16], eax
  00016	89 45 f4	 mov	 DWORD PTR _source$[ebp+20], eax
  00019	89 45 f8	 mov	 DWORD PTR _source$[ebp+24], eax

; 331  :     PVOID ExtendedBuffer;
; 332  : 
; 333  :     PMEMORY_HEADER Entry = InternalLogRecord( GetLocalRepositoryHandle(),
; 334  :         RECORD_EVENT_SOURCE,
; 335  :         0,
; 336  :         &source,
; 337  :         sizeof(source),
; 338  :         &ExtendedBuffer,
; 339  :         sourceName->m_stringLength + 1);

  0001c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001f	83 c0 01	 add	 eax, 1
  00022	50		 push	 eax
  00023	8d 4d fc	 lea	 ecx, DWORD PTR _ExtendedBuffer$[ebp]
  00026	51		 push	 ecx
  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A
  0002d	6a 1c		 push	 28			; 0000001cH
  0002f	8d 55 e0	 lea	 edx, DWORD PTR _source$[ebp]
  00032	33 db		 xor	 ebx, ebx
  00034	52		 push	 edx
  00035	53		 push	 ebx
  00036	ba 00 83 00 00	 mov	 edx, 33536		; 00008300H
  0003b	89 5d e0	 mov	 DWORD PTR _source$[ebp], ebx
  0003e	89 5d e4	 mov	 DWORD PTR _source$[ebp+4], ebx
  00041	e8 00 00 00 00	 call	 ?InternalLogRecord@@YIPAU_MEMORY_HEADER@@PAUuintPtr@@I0PAXIPAPAXI@Z ; InternalLogRecord
  00046	8b f0		 mov	 esi, eax

; 340  : 
; 341  :     if (Entry != NULL) {

  00048	3b f3		 cmp	 esi, ebx
  0004a	74 5d		 je	 SHORT $LN1@g_Allocate

; 342  : 
; 343  :         PSOURCE_DESCRIPTOR newSource = (PSOURCE_DESCRIPTOR)GetUserRecordStructure(Entry);

  0004c	f6 46 06 01	 test	 BYTE PTR [esi+6], 1
  00050	74 18		 je	 SHORT $LN9@g_Allocate
  00052	66 8b 46 18	 mov	 ax, WORD PTR [esi+24]
  00056	66 05 07 00	 add	 ax, 7
  0005a	66 03 c0	 add	 ax, ax
  0005d	66 03 c0	 add	 ax, ax
  00060	0f b7 c0	 movzx	 eax, ax
  00063	0f b7 d0	 movzx	 edx, ax
  00066	03 d6		 add	 edx, esi
  00068	eb 03		 jmp	 SHORT $LN10@g_Allocate
$LN9@g_Allocate:
  0006a	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
$LN10@g_Allocate:

; 344  : 
; 345  :         ConvertToChars((char *)ExtendedBuffer, sourceName);

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _ExtendedBuffer$[ebp]
  00070	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00073	3b c3		 cmp	 eax, ebx
  00075	74 18		 je	 SHORT $LN27@g_Allocate
  00077	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]
  0007a	8d 3c 78	 lea	 edi, DWORD PTR [eax+edi*2]
  0007d	3b c7		 cmp	 eax, edi
  0007f	73 0e		 jae	 SHORT $LN27@g_Allocate
$LL28@g_Allocate:
  00081	8a 18		 mov	 bl, BYTE PTR [eax]
  00083	88 19		 mov	 BYTE PTR [ecx], bl
  00085	83 c0 02	 add	 eax, 2
  00088	83 c1 01	 add	 ecx, 1
  0008b	3b c7		 cmp	 eax, edi
  0008d	72 f2		 jb	 SHORT $LL28@g_Allocate
$LN27@g_Allocate:
  0008f	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 346  :         RegisterSource(newSource);

  00092	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+8
  00098	89 0a		 mov	 DWORD PTR [edx], ecx

; 347  :         CommitEventEntry(Entry);

  0009a	8b ce		 mov	 ecx, esi
  0009c	89 15 08 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+8, edx
  000a2	e8 00 00 00 00	 call	 ?CommitEventEntry@@YIXPAU_MEMORY_HEADER@@@Z ; CommitEventEntry

; 348  :     }
; 349  : 
; 350  :     return (UIntPtr)Entry;

  000a7	8b c6		 mov	 eax, esi
$LN1@g_Allocate:
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx

; 351  : }

  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
?g_AllocateSourceHandleImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIPAUuintPtr@@PAUClass_System_String@@@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_AllocateSourceHandleImpl
_TEXT	ENDS
PUBLIC	?GetSourceFromHandle@@YIPAU_SOURCE_DESCRIPTOR@@PAUuintPtr@@@Z ; GetSourceFromHandle
; Function compile flags: /Ogtp
;	COMDAT ?GetSourceFromHandle@@YIPAU_SOURCE_DESCRIPTOR@@PAUuintPtr@@@Z
_TEXT	SEGMENT
?GetSourceFromHandle@@YIPAU_SOURCE_DESCRIPTOR@@PAUuintPtr@@@Z PROC ; GetSourceFromHandle, COMDAT
; _sourceHandle$ = ecx

; 356  :     if (sourceHandle == 0) {

  00000	85 c9		 test	 ecx, ecx

; 357  : 
; 358  :         return NULL;

  00002	74 0c		 je	 SHORT $LN1@GetSourceF

; 359  :     }
; 360  : 
; 361  :     PMEMORY_HEADER entry = HANDLE_TO_HEADER(sourceHandle);
; 362  : 
; 363  :     if (entry->Flags == RECORD_EVENT_SOURCE) {

  00004	66 81 79 06 00
	83		 cmp	 WORD PTR [ecx+6], 33536	; 00008300H
  0000a	75 04		 jne	 SHORT $LN1@GetSourceF

; 364  : 
; 365  :         return (PSOURCE_DESCRIPTOR)GetUserRecordStructure(entry);

  0000c	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]

; 368  : }

  0000f	c3		 ret	 0
$LN1@GetSourceF:

; 366  :     }
; 367  :     return NULL;

  00010	33 c0		 xor	 eax, eax

; 368  : }

  00012	c3		 ret	 0
?GetSourceFromHandle@@YIPAU_SOURCE_DESCRIPTOR@@PAUuintPtr@@@Z ENDP ; GetSourceFromHandle
_TEXT	ENDS
PUBLIC	?AllocateNativeSourceHandle@@YIPAUuintPtr@@PAD@Z ; AllocateNativeSourceHandle
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtp
;	COMDAT ?AllocateNativeSourceHandle@@YIPAUuintPtr@@PAD@Z
_TEXT	SEGMENT
_source$ = -40						; size = 28
_ExtendedBuffer$ = -12					; size = 4
_sourceName$ = -8					; size = 4
tv263 = -4						; size = 4
?AllocateNativeSourceHandle@@YIPAUuintPtr@@PAD@Z PROC	; AllocateNativeSourceHandle, COMDAT
; _sourceName$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	53		 push	 ebx

; 373  :     SOURCE_DESCRIPTOR source = {0,NULL,0,0,0,0,0,0};

  00007	33 db		 xor	 ebx, ebx

; 374  : 
; 375  :     PVOID ExtendedBuffer;
; 376  :     uint16 sourceLen = strlen(sourceName) + 1;

  00009	33 c0		 xor	 eax, eax
  0000b	38 19		 cmp	 BYTE PTR [ecx], bl
  0000d	56		 push	 esi
  0000e	89 4d f8	 mov	 DWORD PTR _sourceName$[ebp], ecx
  00011	89 5d d8	 mov	 DWORD PTR _source$[ebp], ebx
  00014	89 5d dc	 mov	 DWORD PTR _source$[ebp+4], ebx
  00017	89 5d e0	 mov	 DWORD PTR _source$[ebp+8], ebx
  0001a	89 5d e4	 mov	 DWORD PTR _source$[ebp+12], ebx
  0001d	89 5d e8	 mov	 DWORD PTR _source$[ebp+16], ebx
  00020	89 5d ec	 mov	 DWORD PTR _source$[ebp+20], ebx
  00023	66 89 5d f0	 mov	 WORD PTR _source$[ebp+24], bx
  00027	66 89 5d f2	 mov	 WORD PTR _source$[ebp+26], bx
  0002b	74 0b		 je	 SHORT $LN32@AllocateNa
  0002d	8d 49 00	 npad	 3
$LL5@AllocateNa:
  00030	83 c0 01	 add	 eax, 1
  00033	38 1c 08	 cmp	 BYTE PTR [eax+ecx], bl
  00036	75 f8		 jne	 SHORT $LL5@AllocateNa
$LN32@AllocateNa:
  00038	83 c0 01	 add	 eax, 1
  0003b	0f b7 c0	 movzx	 eax, ax

; 377  : 
; 378  :     PMEMORY_HEADER Entry = InternalLogRecord( GetLocalRepositoryHandle(),
; 379  :         RECORD_EVENT_SOURCE,
; 380  :         0,
; 381  :         &source,
; 382  :         sizeof(source),
; 383  :         &ExtendedBuffer,
; 384  :         sourceLen);

  0003e	0f b7 c0	 movzx	 eax, ax
  00041	50		 push	 eax
  00042	89 45 fc	 mov	 DWORD PTR tv263[ebp], eax
  00045	8d 45 f4	 lea	 eax, DWORD PTR _ExtendedBuffer$[ebp]
  00048	50		 push	 eax
  00049	6a 1c		 push	 28			; 0000001cH
  0004b	8d 4d d8	 lea	 ecx, DWORD PTR _source$[ebp]
  0004e	51		 push	 ecx
  0004f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A
  00055	53		 push	 ebx
  00056	ba 00 83 00 00	 mov	 edx, 33536		; 00008300H
  0005b	e8 00 00 00 00	 call	 ?InternalLogRecord@@YIPAU_MEMORY_HEADER@@PAUuintPtr@@I0PAXIPAPAXI@Z ; InternalLogRecord
  00060	8b f0		 mov	 esi, eax

; 385  : 
; 386  :     if (Entry != NULL) {

  00062	3b f3		 cmp	 esi, ebx
  00064	74 4b		 je	 SHORT $LN34@AllocateNa

; 387  : 
; 388  :         PSOURCE_DESCRIPTOR newSource = (PSOURCE_DESCRIPTOR)GetUserRecordStructure(Entry);

  00066	f6 46 06 01	 test	 BYTE PTR [esi+6], 1
  0006a	57		 push	 edi
  0006b	74 18		 je	 SHORT $LN13@AllocateNa
  0006d	66 8b 56 18	 mov	 dx, WORD PTR [esi+24]
  00071	66 83 c2 07	 add	 dx, 7
  00075	66 03 d2	 add	 dx, dx
  00078	66 03 d2	 add	 dx, dx
  0007b	0f b7 c2	 movzx	 eax, dx
  0007e	0f b7 f8	 movzx	 edi, ax
  00081	03 fe		 add	 edi, esi
  00083	eb 03		 jmp	 SHORT $LN14@AllocateNa
$LN13@AllocateNa:
  00085	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
$LN14@AllocateNa:

; 389  :         memcpy(ExtendedBuffer, sourceName, sourceLen);

  00088	8b 45 fc	 mov	 eax, DWORD PTR tv263[ebp]
  0008b	8b 4d f8	 mov	 ecx, DWORD PTR _sourceName$[ebp]
  0008e	8b 55 f4	 mov	 edx, DWORD PTR _ExtendedBuffer$[ebp]
  00091	50		 push	 eax
  00092	51		 push	 ecx
  00093	52		 push	 edx
  00094	e8 00 00 00 00	 call	 _memcpy

; 390  : 
; 391  :         RegisterSource(newSource);

  00099	a1 08 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+8
  0009e	89 07		 mov	 DWORD PTR [edi], eax
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 392  :         CommitEventEntry(Entry);

  000a3	8b ce		 mov	 ecx, esi
  000a5	89 3d 08 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+8, edi
  000ab	e8 00 00 00 00	 call	 ?CommitEventEntry@@YIXPAU_MEMORY_HEADER@@@Z ; CommitEventEntry
  000b0	5f		 pop	 edi
$LN34@AllocateNa:

; 393  :     }
; 394  : 
; 395  :     return (UIntPtr)Entry;

  000b1	8b c6		 mov	 eax, esi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx

; 396  : }

  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
?AllocateNativeSourceHandle@@YIPAUuintPtr@@PAD@Z ENDP	; AllocateNativeSourceHandle
_TEXT	ENDS
PUBLIC	?g_RegisterSourceStorageImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@0I@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterSourceStorageImpl
; Function compile flags: /Ogtp
;	COMDAT ?g_RegisterSourceStorageImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@0I@Z
_TEXT	SEGMENT
_controlFlags$ = 8					; size = 4
?g_RegisterSourceStorageImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@0I@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterSourceStorageImpl, COMDAT
; _sourceHandle$ = ecx
; _storageHandle$ = edx

; 423  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 424  :     PSOURCE_DESCRIPTOR Source;
; 425  : 
; 426  :     Source = (PSOURCE_DESCRIPTOR)GetUserRecordStructure(HANDLE_TO_HEADER(sourceHandle));

  00003	f6 41 06 01	 test	 BYTE PTR [ecx+6], 1
  00007	74 18		 je	 SHORT $LN5@g_Register@2
  00009	66 8b 41 18	 mov	 ax, WORD PTR [ecx+24]
  0000d	66 05 07 00	 add	 ax, 7
  00011	66 03 c0	 add	 ax, ax
  00014	66 03 c0	 add	 ax, ax
  00017	0f b7 c0	 movzx	 eax, ax
  0001a	0f b7 c0	 movzx	 eax, ax
  0001d	03 c1		 add	 eax, ecx
  0001f	eb 03		 jmp	 SHORT $LN6@g_Register@2
$LN5@g_Register@2:
  00021	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
$LN6@g_Register@2:

; 427  : 
; 428  :     if (Source) {

  00024	33 c9		 xor	 ecx, ecx
  00026	3b c1		 cmp	 eax, ecx
  00028	74 17		 je	 SHORT $LN1@g_Register@2

; 429  :         Source->StorageHandle = storageHandle;
; 430  :         Source->EventTypeHandle = 0;

  0002a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 431  :         Source->DebuggerBufferAddress = 0;

  0002d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 432  :         Source->Count = 0;

  00030	66 89 48 18	 mov	 WORD PTR [eax+24], cx

; 433  :         Source->EntrySize = 0;

  00034	66 89 48 1a	 mov	 WORD PTR [eax+26], cx

; 434  :         Source->ControlFlags = controlFlags;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR _controlFlags$[ebp]
  0003b	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0003e	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN1@g_Register@2:

; 435  :     }
; 436  : }

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?g_RegisterSourceStorageImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@0I@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterSourceStorageImpl
_TEXT	ENDS
PUBLIC	?g_RegisterActiveSourceImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@00GG@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterActiveSourceImpl
; Function compile flags: /Ogtp
;	COMDAT ?g_RegisterActiveSourceImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@00GG@Z
_TEXT	SEGMENT
_debuggerBufferAddress$ = 8				; size = 4
_count$ = 12						; size = 2
_entrySize$ = 16					; size = 2
?g_RegisterActiveSourceImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@00GG@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterActiveSourceImpl, COMDAT
; _sourceHandle$ = ecx
; _eventTypeHandle$ = edx

; 445  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 446  :     PSOURCE_DESCRIPTOR Source;
; 447  : 
; 448  :     Source = (PSOURCE_DESCRIPTOR)GetUserRecordStructure(HANDLE_TO_HEADER(sourceHandle));

  00003	f6 41 06 01	 test	 BYTE PTR [ecx+6], 1
  00007	74 18		 je	 SHORT $LN5@g_Register@3
  00009	66 8b 41 18	 mov	 ax, WORD PTR [ecx+24]
  0000d	66 05 07 00	 add	 ax, 7
  00011	66 03 c0	 add	 ax, ax
  00014	66 03 c0	 add	 ax, ax
  00017	0f b7 c0	 movzx	 eax, ax
  0001a	0f b7 c0	 movzx	 eax, ax
  0001d	03 c1		 add	 eax, ecx
  0001f	eb 03		 jmp	 SHORT $LN6@g_Register@3
$LN5@g_Register@3:
  00021	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
$LN6@g_Register@3:

; 449  : 
; 450  :     if (Source) {

  00024	85 c0		 test	 eax, eax
  00026	74 27		 je	 SHORT $LN1@g_Register@3

; 451  : 
; 452  :         Source->StorageHandle = 0;
; 453  :         Source->EventTypeHandle = eventTypeHandle;
; 454  :         Source->DebuggerBufferAddress = debuggerBufferAddress;

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _debuggerBufferAddress$[ebp]
  0002b	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 455  :         Source->Count = count;

  0002e	66 8b 55 0c	 mov	 dx, WORD PTR _count$[ebp]
  00032	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 456  :         Source->EntrySize = entrySize;

  00035	66 8b 4d 10	 mov	 cx, WORD PTR _entrySize$[ebp]
  00039	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00040	66 89 50 18	 mov	 WORD PTR [eax+24], dx
  00044	66 89 48 1a	 mov	 WORD PTR [eax+26], cx

; 457  :         Source->ControlFlags = 0xFFFF0000;

  00048	c7 40 14 00 00
	ff ff		 mov	 DWORD PTR [eax+20], -65536 ; ffff0000H
$LN1@g_Register@3:

; 458  :     }
; 459  : }

  0004f	5d		 pop	 ebp
  00050	c2 0c 00	 ret	 12			; 0000000cH
?g_RegisterActiveSourceImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@00GG@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterActiveSourceImpl
_TEXT	ENDS
PUBLIC	?g_UnRegisterSourceImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_UnRegisterSourceImpl
; Function compile flags: /Ogtp
;	COMDAT ?g_UnRegisterSourceImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@@Z
_TEXT	SEGMENT
?g_UnRegisterSourceImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_UnRegisterSourceImpl, COMDAT
; _sourceHandle$ = ecx

; 465  :     PSOURCE_DESCRIPTOR Source;
; 466  : 
; 467  :     Source = (PSOURCE_DESCRIPTOR)GetUserRecordStructure(HANDLE_TO_HEADER(sourceHandle));

  00000	f6 41 06 01	 test	 BYTE PTR [ecx+6], 1
  00004	74 18		 je	 SHORT $LN6@g_UnRegist@2
  00006	66 8b 41 18	 mov	 ax, WORD PTR [ecx+24]
  0000a	66 05 07 00	 add	 ax, 7
  0000e	66 03 c0	 add	 ax, ax
  00011	66 03 c0	 add	 ax, ax
  00014	0f b7 c0	 movzx	 eax, ax
  00017	0f b7 c0	 movzx	 eax, ax
  0001a	03 c1		 add	 eax, ecx
  0001c	eb 03		 jmp	 SHORT $LN7@g_UnRegist@2
$LN6@g_UnRegist@2:
  0001e	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
$LN7@g_UnRegist@2:

; 468  : 
; 469  :     if (Source) {

  00021	85 c0		 test	 eax, eax
  00023	74 0e		 je	 SHORT $LN2@g_UnRegist@2

; 470  : 
; 471  :         EV_ASSERT(Source->StorageHandle == 0);

  00025	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00029	74 01		 je	 SHORT $LN1@g_UnRegist@2
  0002b	cc		 int	 3
$LN1@g_UnRegist@2:

; 472  :         Source->StorageHandle = 0;

  0002c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN2@g_UnRegist@2:

; 473  :     }
; 474  : }

  00033	c3		 ret	 0
?g_UnRegisterSourceImpl@Class_Microsoft_Singularity_Eventing_LocalController@@SIXPAUuintPtr@@@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_UnRegisterSourceImpl
_TEXT	ENDS
PUBLIC	?g_GetControllerHandle@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAPAUuintPtr@@0@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_GetControllerHandle
; Function compile flags: /Ogtp
;	COMDAT ?g_GetControllerHandle@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAPAUuintPtr@@0@Z
_TEXT	SEGMENT
?g_GetControllerHandle@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAPAUuintPtr@@0@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_GetControllerHandle, COMDAT
; _storageHandle$ = ecx
; _contextHandle$ = edx

; 480  :     // ????? Some correct values are needed that would allow switching to the right context in debugger
; 481  :     // Note these values are not being accessed programatically. Correct contracts should be established
; 482  :     // to query entries cross SIPs
; 483  : 
; 484  :     *storageHandle = (UIntPtr)&SourceController;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ?SourceController@@3U_SOURCE_CONTROLLER@@A ; SourceController

; 485  :     *contextHandle = 0;

  00006	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 486  :     return true;

  0000c	b0 01		 mov	 al, 1

; 487  : }

  0000e	c3		 ret	 0
?g_GetControllerHandle@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAPAUuintPtr@@0@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_GetControllerHandle
_TEXT	ENDS
PUBLIC	?g_QueryNativeSourceInfo@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAUuintPtr@@PAPAU2@PA_WG@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_QueryNativeSourceInfo
; Function compile flags: /Ogtp
;	COMDAT ?g_QueryNativeSourceInfo@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAUuintPtr@@PAPAU2@PA_WG@Z
_TEXT	SEGMENT
_bufferName$ = 8					; size = 4
_bufferSize$ = 12					; size = 2
?g_QueryNativeSourceInfo@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAUuintPtr@@PAPAU2@PA_WG@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_QueryNativeSourceInfo, COMDAT
; _sourceHandle$ = ecx
; _storageHandle$ = edx

; 495  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 496  :     PMEMORY_HEADER Entry = HANDLE_TO_HEADER(sourceHandle);
; 497  :     PSOURCE_DESCRIPTOR source = (PSOURCE_DESCRIPTOR)GetUserRecordStructure(Entry);

  00003	f6 41 06 01	 test	 BYTE PTR [ecx+6], 1
  00007	74 18		 je	 SHORT $LN8@g_QueryNat
  00009	66 8b 41 18	 mov	 ax, WORD PTR [ecx+24]
  0000d	66 05 07 00	 add	 ax, 7
  00011	66 03 c0	 add	 ax, ax
  00014	66 03 c0	 add	 ax, ax
  00017	0f b7 c0	 movzx	 eax, ax
  0001a	0f b7 c0	 movzx	 eax, ax
  0001d	03 c1		 add	 eax, ecx
  0001f	eb 03		 jmp	 SHORT $LN9@g_QueryNat
$LN8@g_QueryNat:
  00021	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
$LN9@g_QueryNat:

; 498  : 
; 499  :     *storageHandle = source->StorageHandle;

  00024	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00027	56		 push	 esi

; 500  : 
; 501  :     char * src = (char *)(source + 1);

  00028	8d 70 1c	 lea	 esi, DWORD PTR [eax+28]

; 502  : 
; 503  :     if ((bufferName != NULL) && (bufferSize != 0)) {

  0002b	8b 45 08	 mov	 eax, DWORD PTR _bufferName$[ebp]
  0002e	85 c0		 test	 eax, eax
  00030	89 0a		 mov	 DWORD PTR [edx], ecx
  00032	74 2f		 je	 SHORT $LN29@g_QueryNat
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR _bufferSize$[ebp]
  00037	66 85 c9	 test	 cx, cx
  0003a	74 27		 je	 SHORT $LN29@g_QueryNat
  0003c	8d 64 24 00	 npad	 4
$LL3@g_QueryNat:

; 504  : 
; 505  :         while ((bufferSize != 0) && (*src)) {

  00040	8a 16		 mov	 dl, BYTE PTR [esi]
  00042	84 d2		 test	 dl, dl
  00044	74 18		 je	 SHORT $LN2@g_QueryNat

; 506  : 
; 507  :             *bufferName++ = *src++;

  00046	66 0f be d2	 movsx	 dx, dl
  0004a	66 89 10	 mov	 WORD PTR [eax], dx

; 508  :             bufferSize -= sizeof(bartok_char);

  0004d	81 c1 fe ff 00
	00		 add	 ecx, 65534		; 0000fffeH
  00053	83 c0 02	 add	 eax, 2
  00056	83 c6 01	 add	 esi, 1
  00059	66 85 c9	 test	 cx, cx
  0005c	75 e2		 jne	 SHORT $LL3@g_QueryNat
$LN2@g_QueryNat:

; 509  :         }
; 510  : 
; 511  :         if (bufferSize == 0) {
; 512  : 
; 513  :             // Move back one position to insert the null terminator.
; 514  :             // We have at least this character in the buffer due to the test two levels above
; 515  : 
; 516  :             bufferSize -= sizeof(bartok_char);
; 517  :         }
; 518  : 
; 519  :         *bufferName = 0;

  0005e	66 c7 00 00 00	 mov	 WORD PTR [eax], 0
$LN29@g_QueryNat:

; 520  :     }
; 521  : 
; 522  :     return true;

  00063	b0 01		 mov	 al, 1
  00065	5e		 pop	 esi

; 523  : }

  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
?g_QueryNativeSourceInfo@Class_Microsoft_Singularity_Eventing_LocalController@@SI_NPAUuintPtr@@PAPAU2@PA_WG@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_QueryNativeSourceInfo
_TEXT	ENDS
PUBLIC	?g_QuerySystemSources@Class_Microsoft_Singularity_Eventing_LocalController@@SIHPAPAUuintPtr@@G@Z ; Class_Microsoft_Singularity_Eventing_LocalController::g_QuerySystemSources
; Function compile flags: /Ogtp
;	COMDAT ?g_QuerySystemSources@Class_Microsoft_Singularity_Eventing_LocalController@@SIHPAPAUuintPtr@@G@Z
_TEXT	SEGMENT
?g_QuerySystemSources@Class_Microsoft_Singularity_Eventing_LocalController@@SIHPAPAUuintPtr@@G@Z PROC ; Class_Microsoft_Singularity_Eventing_LocalController::g_QuerySystemSources, COMDAT
; _sourceHandles$ = ecx
; _arraySize$ = dx

; 529  : {

  00000	56		 push	 esi

; 530  : 
; 531  :     int totalSources = 0;
; 532  : 
; 533  :     PSOURCE_DESCRIPTOR source = SourceController.SourceDescriptors;

  00001	8b 35 08 00 00
	00		 mov	 esi, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+8
  00007	33 c0		 xor	 eax, eax

; 534  : 
; 535  :     while (source != NULL) {

  00009	85 f6		 test	 esi, esi
  0000b	74 18		 je	 SHORT $LN2@g_QuerySys

; 544  :     }
; 545  : 
; 546  :     return totalSources;

  0000d	0f b7 d2	 movzx	 edx, dx
  00010	57		 push	 edi
$LL3@g_QuerySys:

; 536  : 
; 537  :         if (totalSources < arraySize) {

  00011	3b c2		 cmp	 eax, edx
  00013	7d 06		 jge	 SHORT $LN1@g_QuerySys

; 538  : 
; 539  :             sourceHandles[totalSources] = (UIntPtr)((PMEMORY_HEADER)source - 1);

  00015	8d 7e e8	 lea	 edi, DWORD PTR [esi-24]
  00018	89 3c 81	 mov	 DWORD PTR [ecx+eax*4], edi
$LN1@g_QuerySys:

; 540  :         }
; 541  : 
; 542  :         source = (PSOURCE_DESCRIPTOR)source->Link;

  0001b	8b 36		 mov	 esi, DWORD PTR [esi]

; 543  :         totalSources += 1;

  0001d	83 c0 01	 add	 eax, 1
  00020	85 f6		 test	 esi, esi
  00022	75 ed		 jne	 SHORT $LL3@g_QuerySys
  00024	5f		 pop	 edi
$LN2@g_QuerySys:
  00025	5e		 pop	 esi

; 547  : }

  00026	c3		 ret	 0
?g_QuerySystemSources@Class_Microsoft_Singularity_Eventing_LocalController@@SIHPAPAUuintPtr@@G@Z ENDP ; Class_Microsoft_Singularity_Eventing_LocalController::g_QuerySystemSources
_TEXT	ENDS
PUBLIC	?g_GetSharedSourceHandlesInternal@Class_Microsoft_Singularity_Eventing_Controller@@SI_NIPAPAUuintPtr@@00@Z ; Class_Microsoft_Singularity_Eventing_Controller::g_GetSharedSourceHandlesInternal
EXTRN	?GetTracingHandles@@YI_NPAPAUuintPtr@@00@Z:PROC	; GetTracingHandles
EXTRN	?GetMonitoringHandles@@YI_NPAPAUuintPtr@@00@Z:PROC ; GetMonitoringHandles
; Function compile flags: /Ogtp
;	COMDAT ?g_GetSharedSourceHandlesInternal@Class_Microsoft_Singularity_Eventing_Controller@@SI_NIPAPAUuintPtr@@00@Z
_TEXT	SEGMENT
_sourceHandle$ = 8					; size = 4
_eventTypeHandle$ = 12					; size = 4
?g_GetSharedSourceHandlesInternal@Class_Microsoft_Singularity_Eventing_Controller@@SI_NIPAPAUuintPtr@@00@Z PROC ; Class_Microsoft_Singularity_Eventing_Controller::g_GetSharedSourceHandlesInternal, COMDAT
; _infoId$ = ecx
; _storageHandle$ = edx

; 554  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 555  :     switch (infoId) {

  00003	83 e9 01	 sub	 ecx, 1
  00006	8b c2		 mov	 eax, edx
  00008	74 1d		 je	 SHORT $LN2@g_GetShare
  0000a	83 e9 01	 sub	 ecx, 1
  0000d	74 06		 je	 SHORT $LN1@g_GetShare

; 561  :     }
; 562  : 
; 563  :     return false;

  0000f	32 c0		 xor	 al, al

; 564  : }

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
$LN1@g_GetShare:

; 558  : 
; 559  :         case Class_Microsoft_Singularity_Eventing_Controller_MonitoringInfo:
; 560  :             return GetMonitoringHandles(storageHandle, sourceHandle, eventTypeHandle);

  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _eventTypeHandle$[ebp]
  00018	8b 55 08	 mov	 edx, DWORD PTR _sourceHandle$[ebp]
  0001b	51		 push	 ecx
  0001c	8b c8		 mov	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ?GetMonitoringHandles@@YI_NPAPAUuintPtr@@00@Z ; GetMonitoringHandles

; 564  : }

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN2@g_GetShare:

; 556  :         case Class_Microsoft_Singularity_Eventing_Controller_TracingInfo:
; 557  :             return GetTracingHandles(storageHandle, sourceHandle, eventTypeHandle);

  00027	8b 55 0c	 mov	 edx, DWORD PTR _eventTypeHandle$[ebp]
  0002a	52		 push	 edx
  0002b	8b 55 08	 mov	 edx, DWORD PTR _sourceHandle$[ebp]
  0002e	8b c8		 mov	 ecx, eax
  00030	e8 00 00 00 00	 call	 ?GetTracingHandles@@YI_NPAPAUuintPtr@@00@Z ; GetTracingHandles

; 564  : }

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?g_GetSharedSourceHandlesInternal@Class_Microsoft_Singularity_Eventing_Controller@@SI_NIPAPAUuintPtr@@00@Z ENDP ; Class_Microsoft_Singularity_Eventing_Controller::g_GetSharedSourceHandlesInternal
_TEXT	ENDS
PUBLIC	?RegisterNativeSource@@YIPAUuintPtr@@PADPAU1@I@Z ; RegisterNativeSource
; Function compile flags: /Ogtp
;	COMDAT ?RegisterNativeSource@@YIPAUuintPtr@@PADPAU1@I@Z
_TEXT	SEGMENT
_controlFlags$ = 8					; size = 4
?RegisterNativeSource@@YIPAUuintPtr@@PADPAU1@I@Z PROC	; RegisterNativeSource, COMDAT
; _sourceName$ = ecx
; _storageHandle$ = edx

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b fa		 mov	 edi, edx

; 401  :     UIntPtr sourceHandle = AllocateNativeSourceHandle(sourceName);

  00007	e8 00 00 00 00	 call	 ?AllocateNativeSourceHandle@@YIPAUuintPtr@@PAD@Z ; AllocateNativeSourceHandle
  0000c	8b f0		 mov	 esi, eax

; 402  : 
; 403  :     if (sourceHandle != 0) {

  0000e	33 c9		 xor	 ecx, ecx
  00010	3b f1		 cmp	 esi, ecx
  00012	74 6a		 je	 SHORT $LN25@RegisterNa

; 404  : 
; 405  :         Class_Microsoft_Singularity_Eventing_LocalController::g_RegisterSourceStorageImpl(
; 406  :             sourceHandle, storageHandle, controlFlags);

  00014	f6 46 06 01	 test	 BYTE PTR [esi+6], 1
  00018	74 18		 je	 SHORT $LN9@RegisterNa
  0001a	66 8b 46 18	 mov	 ax, WORD PTR [esi+24]
  0001e	66 05 07 00	 add	 ax, 7
  00022	66 03 c0	 add	 ax, ax
  00025	66 03 c0	 add	 ax, ax
  00028	0f b7 c0	 movzx	 eax, ax
  0002b	0f b7 c0	 movzx	 eax, ax
  0002e	03 c6		 add	 eax, esi
  00030	eb 03		 jmp	 SHORT $LN10@RegisterNa
$LN9@RegisterNa:
  00032	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
$LN10@RegisterNa:
  00035	3b c1		 cmp	 eax, ecx
  00037	74 17		 je	 SHORT $LN5@RegisterNa
  00039	8b 55 08	 mov	 edx, DWORD PTR _controlFlags$[ebp]
  0003c	89 78 08	 mov	 DWORD PTR [eax+8], edi
  0003f	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00042	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00045	66 89 48 18	 mov	 WORD PTR [eax+24], cx
  00049	66 89 48 1a	 mov	 WORD PTR [eax+26], cx
  0004d	89 50 14	 mov	 DWORD PTR [eax+20], edx
$LN5@RegisterNa:

; 407  : 
; 408  :         if (storageHandle != 0) {

  00050	3b f9		 cmp	 edi, ecx
  00052	74 28		 je	 SHORT $LN32@RegisterNa

; 409  : 
; 410  :             RegisterStorage(HANDLE_TO_STORAGE(storageHandle));

  00054	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A, ecx
  0005a	75 13		 jne	 SHORT $LN26@RegisterNa
  0005c	89 3d 00 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A, edi
  00062	e8 00 00 00 00	 call	 ?RegisterNativeTypes@@YIXXZ ; RegisterNativeTypes
  00067	5f		 pop	 edi

; 411  :         }
; 412  : 
; 413  :     }
; 414  : 
; 415  :     return sourceHandle;

  00068	8b c6		 mov	 eax, esi
  0006a	5e		 pop	 esi

; 416  : }

  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4

; 409  : 
; 410  :             RegisterStorage(HANDLE_TO_STORAGE(storageHandle));

$LN26@RegisterNa:
  0006f	a1 04 00 00 00	 mov	 eax, DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+4
  00074	89 07		 mov	 DWORD PTR [edi], eax
  00076	89 3d 04 00 00
	00		 mov	 DWORD PTR ?SourceController@@3U_SOURCE_CONTROLLER@@A+4, edi
$LN32@RegisterNa:

; 411  :         }
; 412  : 
; 413  :     }
; 414  : 
; 415  :     return sourceHandle;

  0007c	8b c6		 mov	 eax, esi

; 409  : 
; 410  :             RegisterStorage(HANDLE_TO_STORAGE(storageHandle));

$LN25@RegisterNa:
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi

; 416  : }

  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
?RegisterNativeSource@@YIPAUuintPtr@@PADPAU1@I@Z ENDP	; RegisterNativeSource
_TEXT	ENDS
END
